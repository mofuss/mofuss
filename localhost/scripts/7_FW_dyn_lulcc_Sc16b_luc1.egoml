<?xml version="1.0" standalone="yes" ?>
<script>
    <property key="dff.date" value="Tue Apr 01 20:29:44 2025" />
    <property key="dff.version" value="2.4.1.20140602" />
    <property key="metadata.author" value="Designed and coded by Adrian Ghilardi (UNAM) and Rob Bailis (SEI)." />
    <property key="metadata.description" value='&quot;MoFuSS&quot; is a dynamic model that simulates the effects of fuelwood harvesting on vegetation, accounting for savings in non-renewable woody biomass from reduced consumption due to an external intervention, such as an improved cookstove (ICS) or fuel substitution project.' />
    <property key="metadata.notes" value='&quot;MoFuSS&quot; first version was developed between September 2011 and April 2015 with funding from Yale Institute for Biospheric Studies, Global Alliance for Clean Cookstoves, Overlook International Foundation, ClimateWorks Foundation and UNAM’s PAPIIT IA101513.&#x0A;&#x0A;Later versions from 2019 to 2023 were developed with funding from CCA, UNFCCC and TNC' />
    <property key="metadata.organization" value="UNAM - SEI" />
    <property key="metadata.showproperties" value="no" />
    <property key="metadata.title" value="VegDyn" />
    <property key="metadata.version" value="0.9.1" />
    <property key="metadata.wizard" value='{&#x0A;&quot;inputPages&quot;: [&#x0A;{&#x0A;&quot;title&quot;: &quot;Cover page&quot;,&#x0A;&quot;content&quot;: &quot;&lt;html&gt;&#x0A;&lt;head/&gt;&#x0A;&lt;body bgcolor=&apos;&apos;&apos;white&apos;&apos;&apos;&gt;&#x0A;&lt;p align=&apos;&apos;&apos;center&apos;&apos;&apos; style=&apos;&apos;&apos;font-family:verdana;font-size:20px;color:gray;&apos;&apos;&apos;&gt;  &lt;span style=&apos;&apos;&apos;font-family:Verdana; font-size:12pt; color:#000099;&apos;&apos;&apos;/&gt;&#x0A;&lt;/p&gt;&#x0A;&lt;p align=&apos;&apos;&apos;center&apos;&apos;&apos; style=&apos;&apos;&apos;font-family:verdana;font-size:20px;color:gray;&apos;&apos;&apos;&gt;&#x0A;&lt;span style=&apos;&apos;&apos;font-family:Verdana; font-size:14pt; color:#000099;&apos;&apos;&apos;&gt;This is a user-friendly interface for running MoFuSS core-scripts while adjusting a set of selected parameters and assumptions. This interface will be deprecated once web-mofuss is fully functional.&lt;/span&gt;&#x0A;&lt;/p&gt;&#x0A;&lt;p align=&apos;&apos;&apos;center&apos;&apos;&apos; style=&apos;&apos;&apos;font-family:verdana;font-size:20px;color:gray;&apos;&apos;&apos;&gt;&#x0A;&lt;span style=&apos;&apos;&apos;font-family:Verdana; font-size:14pt; color:#000099;&apos;&apos;&apos;&gt;Last update: march 18th 2023 &lt;/span&gt;&#x0A;&lt;/p&gt;&#x0A;&lt;p align=&apos;&apos;&apos;center&apos;&apos;&apos; style=&apos;&apos;&apos;font-family:verdana;font-size:20px;color:gray;&apos;&apos;&apos;&gt;&#x0A;&lt;span style=&apos;&apos;&apos;font-family:Verdana; font-size:12pt;&apos;&apos;&apos;&gt;  &lt;/span&gt;&#x0A;&lt;img src=&apos;&apos;&apos;LULCC/Wizard_imgs/mofuss_366.png&apos;&apos;&apos; border=&apos;&apos;&apos;0&apos;&apos;&apos;/&gt;&#x0A;&lt;/p&gt;&#x0A;&lt;p align=&apos;&apos;&apos;center&apos;&apos;&apos; style=&apos;&apos;&apos;font-family:verdana;font-size:20px;color:gray;&apos;&apos;&apos;&gt;&#x0A;&lt;span style=&apos;&apos;&apos;font-family:Verdana; font-size:12pt;&apos;&apos;&apos;&gt;Designed and coded by Adrian Ghilardi (UNAM) and Rob Bailis (SEI)&lt;/span&gt;&#x0A;&lt;/p&gt;&#x0A;&lt;p align=&apos;&apos;&apos;center&apos;&apos;&apos; style=&apos;&apos;&apos;font-family:verdana;font-size:20px;color:gray;&apos;&apos;&apos;&gt;   &lt;/p&gt;&#x0A;&lt;p align=&apos;&apos;&apos;center&apos;&apos;&apos; style=&apos;&apos;&apos;font-family:verdana;font-size:20px;color:gray;&apos;&apos;&apos;&gt;&#x0A;&lt;span style=&apos;&apos;&apos;font-family:Verdana; font-size:14pt; color:#000099;&apos;&apos;&apos;&gt;Project funded by:&lt;/span&gt;&#x0A;&lt;/p&gt;&#x0A;&lt;p align=&apos;&apos;&apos;center&apos;&apos;&apos; style=&apos;&apos;&apos;font-family:verdana;font-size:20px;color:gray;&apos;&apos;&apos;&gt;&#x0A;&lt;img src=&apos;&apos;&apos;LULCC/Wizard_imgs/sponsors_banner.png&apos;&apos;&apos; border=&apos;&apos;&apos;0&apos;&apos;&apos;/&gt;&#x0A;&lt;/p&gt;&#x0A;&lt;p align=&apos;&apos;&apos;left&apos;&apos;&apos; style=&apos;&apos;&apos;font-family:verdana;font-size:20px;color:gray;&apos;&apos;&apos;&gt;   &lt;/p&gt;&#x0A;&lt;p align=&apos;&apos;&apos;left&apos;&apos;&apos; style=&apos;&apos;&apos;font-family:verdana;font-size:20px;color:gray;&apos;&apos;&apos;&gt;   &lt;/p&gt;&#x0A;&lt;/body&gt;&#x0A;&lt;/html&gt;&#x0A;&quot;,&#x0A;&quot;editors&quot;: []&#x0A;},&#x0A;{&#x0A;&quot;title&quot;: &quot;Simulation length and startup year&quot;,&#x0A;&quot;content&quot;: &quot;&lt;html&gt;&#x0A;&lt;head/&gt;&#x0A;&lt;body bgcolor=&apos;&apos;&apos;white&apos;&apos;&apos;&gt;&#x0A;&lt;p style=&apos;&apos;&apos;font-family:verdana;font-size:20px;color:gray;&apos;&apos;&apos;&gt;&#x0A;&lt;span style=&apos;&apos;&apos;font-size:12pt; font-family:Verdana;&apos;&apos;&apos;&gt;The first step in running the model for a previously selected study area is to define the startup year and the length of each simulation.&lt;/span&gt;&#x0A;&lt;/p&gt;&#x0A;&lt;p style=&apos;&apos;&apos;font-size:20px;font-family:verdana;color:gray;&apos;&apos;&apos;&gt;&#x0A;&lt;span style=&apos;&apos;&apos;font-size:14pt; font-family:Verdana; color:#0000cc;&apos;&apos;&apos;&gt;&#x0A;&lt;b&gt;Startup year:&lt;/b&gt;&#x0A;&lt;/span&gt;&#x0A;&lt;b/&gt;&#x0A;&lt;span style=&apos;&apos;&apos;font-size:12pt; font-family:Verdana;&apos;&apos;&apos;&gt;This parameter should correspond to the date &lt;i&gt;(circa)&lt;/i&gt; of the input data you are using. For the Kenyan example, land use/cover maps are a blend from 2010 and 2008 maps; administrative units and woodfuel demand are from 2008 as well. Rivers are roads are from an earlier period (around 2005) but we can assumed that none of this change very much in time. So, a good start up year for the present case study could be 2008. &lt;/span&gt;&#x0A;&lt;/p&gt;&#x0A;&lt;p style=&apos;&apos;&apos;font-size:20px;font-family:verdana;color:gray;&apos;&apos;&apos;&gt;&#x0A;&lt;span style=&apos;&apos;&apos;font-size:12pt; font-family:Verdana;&apos;&apos;&apos;&gt;However, forest loss and gains starts in year 2000. The model use observed changes from 2000 to 2012, and simulated ones from 2013 up to the final year of each simulation. A new fix was added after the course, by which forest loss and gain events will be uploaded in order to coincide with the start up year. In our case study, the first 5 years (2008 to 2012) will use observed data on forest loss and gain, while simulations will take over from 2013.&lt;/span&gt;&#x0A;&lt;/p&gt;&#x0A;&lt;p style=&apos;&apos;&apos;font-size:20px;font-family:verdana;color:gray;&apos;&apos;&apos;&gt;&#x0A;&lt;span style=&apos;&apos;&apos;font-size:12pt; font-family:Verdana;&apos;&apos;&apos;&gt;The start up year is very important for calibration/validation purposes. If you intend use the model to try to mimic &lt;/span&gt;&#x0A;&lt;i&gt; &lt;span style=&apos;&apos;&apos;font-size:12pt; font-family:Verdana;&apos;&apos;&apos;&gt;observed past changes&lt;/span&gt;&#x0A;&lt;/i&gt;&#x0A;&lt;span style=&apos;&apos;&apos;font-size:12pt; font-family:Verdana;&apos;&apos;&apos;&gt;, in order to be somehow confident of future projections, then a longer calibration period is preferred. For example, if your start up year is 2008, then you have 7 years to compare &lt;i&gt;observed changes&lt;/i&gt; between 2008 and 2015 (present time) and &lt;i&gt;simulated changes&lt;/i&gt; between 2008 and 2015. If you can manage to get input information from around year 2000, then you&apos;ll have a 15 year period to calibrate model&apos;s simulations to match observed changes. But what are these &lt;i&gt;&apos;&apos;&apos;changes&apos;&apos;&apos;&lt;/i&gt; all about? Depends on the study area, but in most cases are changes in the landscape observable by remote sensing or any other means but NOT related to the model assumptions or configuration. For example, if we have spatial and ground information on how charcoaling areas in Kenya move away from demand centers into protected areas, between year 2000 and 2015;then we could try to parametrize and tune the model in order to reproduce this spatio-temporal pattern during the same period (2000-2015), even if the exact amount of wood harvest and charcoal production is not known. Later on, we can run 30 year long simulations to go up to year 2030, under varying scenarios for example. &lt;/span&gt;&#x0A;&lt;/p&gt;&#x0A;&lt;p style=&apos;&apos;&apos;font-size:20px;font-family:verdana;color:gray;&apos;&apos;&apos;&gt;&#x0A;&lt;span style=&apos;&apos;&apos;font-size:14pt; font-family:Verdana; color:#0000cc;&apos;&apos;&apos;&gt;&#x0A;&lt;b&gt;Simulation length:&lt;/b&gt;&#x0A;&lt;/span&gt;&#x0A;&lt;b/&gt;&#x0A;&lt;span style=&apos;&apos;&apos;font-size:12pt; font-family:Verdana;&apos;&apos;&apos;&gt;This is the time window for which each simulation will run. By a rule of thumb it should not be much different than the calibration period. For example, if our start up year is 2008, we should try to simulate woodfuel supply and demand patterns up to year 2022 (calibration:2008-&amp;gt;2015; validation: 2016-&amp;gt;2022). &lt;/span&gt;&#x0A;&lt;/p&gt;&#x0A;&lt;/body&gt;&#x0A;&lt;/html&gt;&#x0A;&quot;,&#x0A;&quot;editors&quot;: []&#x0A;},&#x0A;{&#x0A;&quot;title&quot;: &quot;Default&quot;,&#x0A;&quot;content&quot;: &quot;&lt;html&gt;&#x0A;&lt;head/&gt;&#x0A;&lt;body bgcolor=&apos;&apos;&apos;white&apos;&apos;&apos;&gt;&#x0A;&lt;p style=&apos;&apos;&apos;color:gray;font-family:verdana;font-size:20px;&apos;&apos;&apos;&gt; A&lt;span style=&apos;&apos;&apos;font-family:Verdana; font-size:12pt;&apos;&apos;&apos;&gt;dd simulation length, intergrate with excel file&lt;/span&gt;&#x0A;&lt;/p&gt;&#x0A;&lt;/body&gt;&#x0A;&lt;/html&gt;&#x0A;&quot;,&#x0A;&quot;editors&quot;: [&#x0A;{&#x0A;&quot;name&quot;: &quot;Simulation Length (SL)&quot;,&#x0A;&quot;description&quot;: &quot;Integer constant&quot;,&#x0A;&quot;tag&quot;: &quot;Int_constant_1&quot;&#x0A;}&#x0A;]&#x0A;},&#x0A;{&#x0A;&quot;title&quot;: &quot;Uncertainty parameters&quot;,&#x0A;&quot;content&quot;: &quot;&lt;html&gt;&#x0A;&lt;head/&gt;&#x0A;&lt;body bgcolor=&apos;&apos;&apos;white&apos;&apos;&apos;&gt;&#x0A;&lt;p style=&apos;&apos;&apos;color:gray;font-family:verdana;font-size:20px;&apos;&apos;&apos;&gt;&#x0A;&lt;span style=&apos;&apos;&apos;font-size:12pt; font-family:Verdana;&apos;&apos;&apos;&gt;At this stage we will define a few uncertainty parameters. &lt;/span&gt;&#x0A;&lt;/p&gt;&#x0A;&lt;p style=&apos;&apos;&apos;color:gray;font-family:verdana;font-size:20px;&apos;&apos;&apos;&gt;&#x0A;&lt;span style=&apos;&apos;&apos;font-size:12pt; font-family:Verdana;&apos;&apos;&apos;&gt;The model runs each simulation many times (each of this is called a realization). In each time, many assumptions and input parameters will vary randomly so as to incorporate the inherent uncertainty of most parameters and key variables. &lt;/span&gt;&#x0A;&lt;/p&gt;&#x0A;&lt;p style=&apos;&apos;&apos;color:gray;font-family:verdana;font-size:20px;&apos;&apos;&apos;&gt;&#x0A;&lt;b&gt; &lt;span style=&apos;&apos;&apos;color:#0000cc; font-family:Verdana; font-size:14pt;&apos;&apos;&apos;&gt;Number of Monte Carlo runs:&lt;/span&gt;&#x0A;&lt;/b&gt;&#x0A;&lt;span style=&apos;&apos;&apos;color:#0000cc; font-family:Verdana; font-size:14pt;&apos;&apos;&apos;/&gt;&#x0A;&lt;span style=&apos;&apos;&apos;color:#666666; font-family:Verdana; font-size:12pt;&apos;&apos;&apos;&gt;Represent the number of &lt;i&gt;realizations&lt;/i&gt; that will be produced by the Monte Carlo module. A &lt;i&gt;realization&lt;/i&gt; is each of many homologous simulations (i.e. set under randomly varying parameters and assumptions) that are run to account for uncertainty and sensitivity. Realizations should be understood as the process of how simulations “come out” after each Monte Carlo run.&lt;/span&gt;&#x0A;&lt;/p&gt;&#x0A;&lt;p style=&apos;&apos;&apos;color:gray;font-family:verdana;font-size:20px;&apos;&apos;&apos;&gt;&#x0A;&lt;b&gt; &lt;span style=&apos;&apos;&apos;color:#0000cc; font-family:Verdana; font-size:14pt;&apos;&apos;&apos;&gt;K, r&lt;sub&gt;max&lt;/sub&gt; and TOF through Monte Carlo?&lt;/span&gt;&#x0A;&lt;/b&gt;&#x0A;&lt;span style=&apos;&apos;&apos;color:#0000cc; font-family:Verdana; font-size:14pt;&apos;&apos;&apos;/&gt;&#x0A;&lt;span style=&apos;&apos;&apos;color:#666666; font-family:Verdana; font-size:12pt;&apos;&apos;&apos;&gt;Just choose &lt;i&gt;&apos;&apos;&apos;yes&apos;&apos;&apos;&lt;/i&gt; or &lt;i&gt;&apos;&apos;&apos;no&apos;&apos;&apos;&lt;/i&gt; if you want any of these three parameters linked to vegetation growth to vary randomly&lt;/span&gt;&#x0A;&lt;span style=&apos;&apos;&apos;color:#0000cc; font-family:Verdana; font-size:12pt;&apos;&apos;&apos;&gt;. &lt;/span&gt;&#x0A;&lt;/p&gt;&#x0A;&lt;p style=&apos;&apos;&apos;color:gray;font-family:verdana;font-size:20px;&apos;&apos;&apos;&gt;  &lt;span style=&apos;&apos;&apos;font-family:Verdana; font-size:12pt;&apos;&apos;&apos;/&gt;&#x0A;&lt;/p&gt;&#x0A;&lt;p style=&apos;&apos;&apos;color:gray;font-family:verdana;font-size:20px;&apos;&apos;&apos;&gt;  &lt;span style=&apos;&apos;&apos;font-family:Verdana; font-size:12pt;&apos;&apos;&apos;/&gt;&#x0A;&lt;/p&gt;&#x0A;&lt;/body&gt;&#x0A;&lt;/html&gt;&#x0A;&quot;,&#x0A;&quot;editors&quot;: [&#x0A;{&#x0A;&quot;name&quot;: &quot;MC runs&quot;,&#x0A;&quot;description&quot;: &quot;Number of Monte Carlo realizations&quot;,&#x0A;&quot;tag&quot;: &quot;Int_constant_2&quot;&#x0A;},&#x0A;{&#x0A;&quot;name&quot;: &quot;K through MC?&quot;,&#x0A;&quot;description&quot;: &quot;Do you want to allow the aboveground biomass carrying capacity (K) to vary randomly for each simulation? (i.e. pass thorugh the Monte Carlo module)&quot;,&#x0A;&quot;tag&quot;: &quot;Bool_constant_3&quot;&#x0A;},&#x0A;{&#x0A;&quot;name&quot;: &quot;rmax through MC?&quot;,&#x0A;&quot;description&quot;: &quot;Do you want to allow the aboveground biomass maximum growth rate (rmax) to vary randomly for each simulation? (i.e. pass thorugh the Monte Carlo module)&quot;,&#x0A;&quot;tag&quot;: &quot;Bool_constant_4&quot;&#x0A;},&#x0A;{&#x0A;&quot;name&quot;: &quot;TOF through MC?&quot;,&#x0A;&quot;description&quot;: &quot;Do you want to allow that the amount of fuelwood available from trees outside forests (TOF) to vary randomly for each simulation? (i.e. pass thorugh the Monte Carlo module)&quot;,&#x0A;&quot;tag&quot;: &quot;Bool_constant_5&quot;&#x0A;},&#x0A;{&#x0A;&quot;name&quot;: &quot;Re-run Monte Carlo?&quot;,&#x0A;&quot;description&quot;: &quot;Only select \&quot;No\&quot; if you want to keep the last Monte Carlo results to be used in both scenarios: you can turn in on for the the first scenario (e.g. BaU) and off for the second one (e.g ICS). Turning this option off for both scenarios will produce an error. &quot;,&#x0A;&quot;tag&quot;: &quot;Bool_constant_6&quot;&#x0A;}&#x0A;]&#x0A;},&#x0A;{&#x0A;&quot;title&quot;: &quot;Supply parameters&quot;,&#x0A;&quot;content&quot;: &quot;&lt;html&gt;&#x0A;&lt;head/&gt;&#x0A;&lt;body bgcolor=&apos;&apos;&apos;white&apos;&apos;&apos;&gt;&#x0A;&lt;p style=&apos;&apos;&apos;font-size:20px;font-family:verdana;color:gray;&apos;&apos;&apos;&gt;&#x0A;&lt;span style=&apos;&apos;&apos;font-size:12pt; font-family:Verdana;&apos;&apos;&apos;&gt;Supply parameters are hidden from this version of the interface as they are many and somehow complicated to tune. Default values uses sound data from previous case studies.&lt;/span&gt;&#x0A;&lt;/p&gt;&#x0A;&lt;p style=&apos;&apos;&apos;font-size:20px;font-family:verdana;color:gray;&apos;&apos;&apos;&gt;&#x0A;&lt;span style=&apos;&apos;&apos;font-size:12pt; font-family:Verdana;&apos;&apos;&apos;&gt;What can be changed are fuelwood stock and growth assumptions in the .csv table located in ...\\...\\LULCC\\SourceData\\InTables\\growth&lt;a href=&apos;&apos;&apos;LULCC/InTables/Supply_parameters.csv&apos;&apos;&apos;&gt;_parameters#.csv&lt;/a&gt;. You can use any software to open it, change values and save it. The new script will deal with almost any .csv format.&lt;/span&gt;&#x0A;&lt;/p&gt;&#x0A;&lt;p style=&apos;&apos;&apos;font-size:20px;font-family:verdana;color:gray;&apos;&apos;&apos;&gt;&#x0A;&lt;span style=&apos;&apos;&apos;font-size:12pt; font-family:Verdana;&apos;&apos;&apos;&gt;However, tuning these parameters could be tricky given that forests and woodlands stand dynamics are to be fairly known for each category or class in the land use/cover map. &lt;/span&gt;&#x0A;&lt;/p&gt;&#x0A;&lt;p style=&apos;&apos;&apos;font-size:20px;font-family:verdana;color:gray;&apos;&apos;&apos;&gt;&#x0A;&lt;span style=&apos;&apos;&apos;font-size:12pt; font-family:Verdana;&apos;&apos;&apos;&gt;Note: a good practice guidance to produce reasonable supply values is being developed. In the meantime you can add your own values considering the following:&lt;/span&gt;&#x0A;&lt;/p&gt;&#x0A;&lt;p style=&apos;&apos;&apos;font-size:20px;font-family:verdana;color:gray;&apos;&apos;&apos;&gt;&#x0A;&lt;span style=&apos;&apos;&apos;color:#0000cc; font-size:14pt; font-family:Verdana;&apos;&apos;&apos;&gt;&#x0A;&lt;b&gt;TOF:&lt;/b&gt;&#x0A;&lt;/span&gt;&#x0A;&lt;span style=&apos;&apos;&apos;font-size:12pt; font-family:Verdana;&apos;&apos;&apos;&gt;&#x0A;&lt;b&gt;add &apos;&apos;&apos;1&apos;&apos;&apos; if the land cover is not subject to fuelwood degradation, but will produce a prunable amount of fuelwood people will be able to gather every year. By definition, no trees are felled. When the amount of fuelwood from &apos;&apos;&apos;TOF=1&apos;&apos;&apos; is not enough to meet demand, people will move further into forests and woodlands within that same iteration period or year. add &apos;&apos;&apos;0&apos;&apos;&apos; if the land cover/use class is a forest/woodland.&lt;/b&gt;&#x0A;&lt;/span&gt;&#x0A;&lt;/p&gt;&#x0A;&lt;p style=&apos;&apos;&apos;color:gray;font-size:20px;font-family:verdana;&apos;&apos;&apos;&gt;&#x0A;&lt;span style=&apos;&apos;&apos;color:#0000cc; font-size:14pt; font-family:Verdana;&apos;&apos;&apos;&gt;&#x0A;&lt;b&gt;K:&lt;/b&gt;&#x0A;&lt;/span&gt;&#x0A;&lt;span style=&apos;&apos;&apos;font-size:12pt; font-family:Verdana;&apos;&apos;&apos;&gt;&#x0A;&lt;b&gt;For TOF=1 categories, K represents the maximum amount of fuelwood coming from pruning, and KSD the standard deviation of that value. For TOF=0 categories, K represents the maximum achievable biomass stock, this is, without any disturbance from humans, how much biomass per hectare that land class can possible host. Equally, KSD is the standard deviation of that value. &lt;/b&gt;&#x0A;&lt;/span&gt;&#x0A;&lt;/p&gt;&#x0A;&lt;p style=&apos;&apos;&apos;color:gray;font-size:20px;font-family:verdana;&apos;&apos;&apos;&gt;&#x0A;&lt;span style=&apos;&apos;&apos;color:#0000cc; font-size:14pt; font-family:Verdana;&apos;&apos;&apos;&gt;&#x0A;&lt;b&gt;r&lt;sub&gt;max&lt;/sub&gt;:&lt;/b&gt;&#x0A;&lt;/span&gt;&#x0A;&lt;span style=&apos;&apos;&apos;font-size:12pt; font-family:Verdana;&apos;&apos;&apos;&gt;&#x0A;&lt;b&gt;represents the maximum growth rate as a percentage of standing stock. This is the value that the model will use for very low density biomass pixels, and will start to decrease ad eventually approximate 0 as the biomass reaches K. For example, using a value of 0.05 will assume that biomass will grow at 5% rate in biomass scarce pixels. We are in the process of producing a good guidance practice about this. For example, a review of studies in the literature show that growth rates at sparsely covered pixels could be as much as 20%.&lt;/b&gt;&#x0A;&lt;/span&gt;&#x0A;&lt;/p&gt;&#x0A;&lt;p style=&apos;&apos;&apos;color:gray;font-size:20px;font-family:verdana;&apos;&apos;&apos;&gt;   &lt;/p&gt;&#x0A;&lt;p style=&apos;&apos;&apos;color:gray;font-size:20px;font-family:verdana;&apos;&apos;&apos;&gt;   &lt;/p&gt;&#x0A;&lt;/body&gt;&#x0A;&lt;/html&gt;&#x0A;&quot;,&#x0A;&quot;editors&quot;: [&#x0A;{&#x0A;&quot;name&quot;: &quot;Are you using an AGB?&quot;,&#x0A;&quot;description&quot;: &quot;Do you have a raster map displaying the spatial distribution of aboveground biomass? If \&quot;YES\&quot;, arguments \&quot;Initial Stock as a % of K\&quot;, \&quot;Intial Stcok through MC\&quot; and \&quot;Tree cover map\&quot; are ignored.&quot;,&#x0A;&quot;tag&quot;: &quot;Bool_constant_7&quot;&#x0A;},&#x0A;{&#x0A;&quot;name&quot;: &quot;AGB = K?&quot;,&#x0A;&quot;description&quot;: &quot;Do you want to leave no room to grow for aboveground biomass at the start year? i.e. biomass at t0 = K. This parameter is only valid if you are using a biomass map, otherwise is bypassed.&quot;,&#x0A;&quot;tag&quot;: &quot;Bool_constant_8&quot;&#x0A;},&#x0A;{&#x0A;&quot;name&quot;: &quot;Tree cover map&quot;,&#x0A;&quot;description&quot;: &quot;Do you have a vegetation cover map in % to adjust the Initial Stock accordingly based on K (maximum achievable stock) assumptions per land cover class? If \&quot;YES\&quot;, arguments \&quot;Initial Stock as a % of K\&quot; and \&quot;Intial Stcok through MC\&quot; are ignored.&quot;,&#x0A;&quot;tag&quot;: &quot;Bool_constant_9&quot;&#x0A;},&#x0A;{&#x0A;&quot;name&quot;: &quot;Initial Stock as a % of K&quot;,&#x0A;&quot;description&quot;: &quot;Initial Stock as a percentage of K (being K the maximum achievable biomass stock per forest or woodlan type). So, to assign an Initial Stock = K, then the integer must be 100. For an Initial Stock of half K then use 50, or for (K*0.2) use 20.&quot;,&#x0A;&quot;tag&quot;: &quot;Int_constant_10&quot;&#x0A;}&#x0A;]&#x0A;},&#x0A;{&#x0A;&quot;title&quot;: &quot;Accounting for fuelwood supply available from land clearing events&quot;,&#x0A;&quot;content&quot;: &quot;&lt;html&gt;&#x0A;&lt;head/&gt;&#x0A;&lt;body bgcolor=&apos;&apos;&apos;white&apos;&apos;&apos;&gt;&#x0A;&lt;p style=&apos;&apos;&apos;color:gray;font-family:verdana;font-size:20px;&apos;&apos;&apos;&gt; W&lt;span style=&apos;&apos;&apos;font-size:12pt; font-family:Verdana;&apos;&apos;&apos;&gt;hen land clearing events occur, a bunch of woody biomass is readily available at once, and in many cases, it is used as fuelwood. Also, land cleared patches change the spatial distribution of woody biomass sources. On the contrary, forest gain events may turn a non-forest area to a woodland suppling fuelwood in the future.&lt;/span&gt;&#x0A;&lt;/p&gt;&#x0A;&lt;p style=&apos;&apos;&apos;color:gray;font-family:verdana;font-size:20px;&apos;&apos;&apos;&gt;&#x0A;&lt;b&gt; &lt;span style=&apos;&apos;&apos;color:#0000cc; font-family:Verdana; font-size:14pt;&apos;&apos;&apos;&gt;Account for fuelwood available through deforestation?&lt;/span&gt;&#x0A;&lt;/b&gt;&#x0A;&lt;span style=&apos;&apos;&apos;color:#0000cc; font-family:Verdana; font-size:14pt;&apos;&apos;&apos;/&gt;&#x0A;&lt;span style=&apos;&apos;&apos;color:#666666; font-family:Verdana; font-size:12pt;&apos;&apos;&apos;&gt;Turn it on (&apos;&apos;&apos;Yes&apos;&apos;&apos;) if you want to simulate forest loss/gain events that will interact with the fuelwood supply and demand algorithms.&lt;/span&gt;&#x0A;&lt;/p&gt;&#x0A;&lt;/body&gt;&#x0A;&lt;/html&gt;&#x0A;&quot;,&#x0A;&quot;editors&quot;: [&#x0A;{&#x0A;&quot;name&quot;: &quot;Fuelwood from deforestation&quot;,&#x0A;&quot;description&quot;: &quot;Account for fuelwood available through deforestation?&quot;,&#x0A;&quot;tag&quot;: &quot;Bool_constant_11&quot;&#x0A;}&#x0A;]&#x0A;},&#x0A;{&#x0A;&quot;title&quot;: &quot;Default&quot;,&#x0A;&quot;content&quot;: &quot;&lt;html&gt;&#x0A;&lt;head/&gt;&#x0A;&lt;body bgcolor=&apos;&apos;&apos;white&apos;&apos;&apos;&gt;&#x0A;&lt;p style=&apos;&apos;&apos;font-size:20px;font-family:verdana;color:gray;&apos;&apos;&apos;&gt; F&lt;span style=&apos;&apos;&apos;font-size:12pt; font-family:Verdana;&apos;&apos;&apos;&gt;or the purpose of this workshop &lt;i&gt;(Sto Domingo 21-24 march)&lt;/i&gt; keep this parameter in Yes. Otherwise, you need to run an outside tool that has not being fully debugged yet.&lt;/span&gt;&#x0A;&lt;/p&gt;&#x0A;&lt;/body&gt;&#x0A;&lt;/html&gt;&#x0A;&quot;,&#x0A;&quot;editors&quot;: [&#x0A;{&#x0A;&quot;name&quot;: &quot;Are you using an IDW for debugging purposes?&quot;,&#x0A;&quot;description&quot;: &quot;Data carrier for boolean.&quot;,&#x0A;&quot;tag&quot;: &quot;Bool_constant_12&quot;&#x0A;}&#x0A;]&#x0A;},&#x0A;{&#x0A;&quot;title&quot;: &quot;Default&quot;,&#x0A;&quot;content&quot;: &quot;&lt;html&gt;&#x0A;&lt;head/&gt;&#x0A;&lt;body bgcolor=&apos;&apos;&apos;white&apos;&apos;&apos;&gt;&#x0A;&lt;span style=&apos;&apos;&apos;font-size:12pt; font-family:Verdana; color:#666666;&apos;&apos;&apos;&gt;Tables, maps, the pdf report and mostly animations are time consuming. Turn these variable off if you just want basic results to evaluate alternative scenarios in a timely manner. Note that if the AOI is too large (e.g. &amp;gt;10% of the country), it might take some time indistinctively of if maps and animations being generated.&lt;/span&gt;&#x0A;&lt;/body&gt;&#x0A;&lt;/html&gt;&#x0A;&quot;,&#x0A;&quot;editors&quot;: [&#x0A;{&#x0A;&quot;name&quot;: &quot;Do you want to produce Summary Tables by administrative polygons?&quot;,&#x0A;&quot;description&quot;: &quot;Data carrier for boolean.&quot;,&#x0A;&quot;tag&quot;: &quot;Bool_constant_13&quot;&#x0A;},&#x0A;{&#x0A;&quot;name&quot;: &quot;Turn on maps and animations?&quot;,&#x0A;&quot;description&quot;: &quot;Data carrier for boolean.&quot;,&#x0A;&quot;tag&quot;: &quot;Bool_constant_14&quot;&#x0A;}&#x0A;]&#x0A;},&#x0A;{&#x0A;&quot;title&quot;: &quot;Default&quot;,&#x0A;&quot;content&quot;: &quot;&lt;html&gt;&#x0A;&lt;head/&gt;&#x0A;&lt;body bgcolor=&apos;&apos;&apos;white&apos;&apos;&apos;&gt;&#x0A;&lt;p style=&apos;&apos;&apos;font-family:verdana;font-size:20px;color:gray;&apos;&apos;&apos;&gt;&#x0A;&lt;span style=&apos;&apos;&apos;font-family:Verdana; font-size:12pt;&apos;&apos;&apos;&gt;These are some of the harvesting patterns parameters. When run in deterministic mode, the patcher can by bypass saving processing time.&lt;/span&gt;&#x0A;&lt;/p&gt;&#x0A;&lt;/body&gt;&#x0A;&lt;/html&gt;&#x0A;&quot;,&#x0A;&quot;editors&quot;: [&#x0A;{&#x0A;&quot;name&quot;: &quot;Bypass Patchers&quot;,&#x0A;&quot;description&quot;: &quot;Data carrier for boolean.&quot;,&#x0A;&quot;tag&quot;: &quot;Bool_constant_15&quot;&#x0A;},&#x0A;{&#x0A;&quot;name&quot;: &quot;Percentage of V landscape to be harvested&quot;,&#x0A;&quot;description&quot;: &quot;Integer constant&quot;,&#x0A;&quot;tag&quot;: &quot;Int_constant_16&quot;&#x0A;},&#x0A;{&#x0A;&quot;name&quot;: &quot;Prune Factor V&quot;,&#x0A;&quot;description&quot;: &quot;Integer constant&quot;,&#x0A;&quot;tag&quot;: &quot;Int_constant_17&quot;&#x0A;},&#x0A;{&#x0A;&quot;name&quot;: &quot;Percentage of W landscape to be harvested&quot;,&#x0A;&quot;description&quot;: &quot;Integer constant&quot;,&#x0A;&quot;tag&quot;: &quot;Int_constant_18&quot;&#x0A;},&#x0A;{&#x0A;&quot;name&quot;: &quot;Prune Factor W&quot;,&#x0A;&quot;description&quot;: &quot;Integer constant&quot;,&#x0A;&quot;tag&quot;: &quot;Int_constant_19&quot;&#x0A;}&#x0A;]&#x0A;},&#x0A;{&#x0A;&quot;title&quot;: &quot;Demand parameters&quot;,&#x0A;&quot;content&quot;: &quot;&lt;html&gt;&#x0A;&lt;head/&gt;&#x0A;&lt;body bgcolor=&apos;&apos;&apos;white&apos;&apos;&apos;&gt;&#x0A;&lt;p style=&apos;&apos;&apos;font-family:verdana;font-size:20px;color:gray;&apos;&apos;&apos;&gt;&#x0A;&lt;b&gt; &lt;span style=&apos;&apos;&apos;font-family:Verdana; font-size:14pt; color:#0000cc;&apos;&apos;&apos;&gt;Instant increase/decrease of fuelwood use at initial time, in %:&lt;/span&gt;&#x0A;&lt;/b&gt;&#x0A;&lt;span style=&apos;&apos;&apos;font-family:Verdana; font-size:12pt;&apos;&apos;&apos;&gt;allows you to change fuelwood demand instantly (opposite to gradual change over the years). It is only useful for sensitivity analysis or to see how the model responds to extreme assumptions, such as x100 times increase in fuelwood use. Given that the parameter was first designed to account for savings, its rationale is a bit odd for the moment and will be fixed shortly. Follow this instructions you use this parameter:&lt;/span&gt;&#x0A;&lt;/p&gt;&#x0A;&lt;p style=&apos;&apos;&apos;font-family:verdana;font-size:20px;color:gray;&apos;&apos;&apos;&gt;&#x0A;&lt;span style=&apos;&apos;&apos;font-family:Verdana; font-size:12pt;&apos;&apos;&apos;&gt;The equation goes (100-value)/100. This means that a value of &apos;&apos;&apos;100&apos;&apos;&apos; will make fuelwood use equal to 0. In other words, you&apos;ll only see changes attributable to forest losses. If you enter &apos;&apos;&apos;-100&apos;&apos;&apos; it will doubled fuelwood demand, and if you enter &apos;&apos;&apos;-1000&apos;&apos;&apos; it will increase fuelwood demand by roughly 10 times. Positive values greater than 100 should be avoided for the moment as they will produce meaningless results (i.e. negative fuelwood use). As mentioned earlier, a fix and more proper way to handling this variable is being coded.&lt;/span&gt;&#x0A;&lt;/p&gt;&#x0A;&lt;p style=&apos;&apos;&apos;font-family:verdana;font-size:20px;color:gray;&apos;&apos;&apos;&gt;   &lt;/p&gt;&#x0A;&lt;/body&gt;&#x0A;&lt;/html&gt;&#x0A;&quot;,&#x0A;&quot;editors&quot;: [&#x0A;{&#x0A;&quot;name&quot;: &quot;Instant demand knob&quot;,&#x0A;&quot;description&quot;: &quot;Instant increase/decrease of fuelwood use at initial time, in %. Use this for sensitivity purposes only.&quot;,&#x0A;&quot;tag&quot;: &quot;Int_constant_20&quot;&#x0A;}&#x0A;]&#x0A;}&#x0A;],&#x0A;&quot;outputPages&quot;: [&#x0A;{&#x0A;&quot;title&quot;: &quot;Default&quot;,&#x0A;&quot;content&quot;: &quot;&lt;html&gt;&#x0A;&lt;head/&gt;&#x0A;&lt;body bgcolor=&apos;&apos;&apos;white&apos;&apos;&apos;&gt;&#x0A;&lt;p style=&apos;&apos;&apos;color:gray;font-family:verdana;font-size:20px;&apos;&apos;&apos;&gt;&#x0A;&lt;span style=&apos;&apos;&apos;font-family:Verdana; color:#0000ff; font-size:18pt;&apos;&apos;&apos;&gt;&#x0A;&lt;b&gt;Your model ran successfully!&lt;/b&gt;&#x0A;&lt;/span&gt;&#x0A;&lt;b/&gt;&#x0A;&lt;/p&gt;&#x0A;&lt;p style=&apos;&apos;&apos;font-family:verdana;color:gray;font-size:20px;&apos;&apos;&apos;&gt;&#x0A;&lt;img border=&apos;&apos;&apos;0&apos;&apos;&apos; height=&apos;&apos;&apos;106&apos;&apos;&apos; src=&apos;&apos;&apos;LULCC/Wizard_imgs/success.jpg&apos;&apos;&apos; width=&apos;&apos;&apos;159&apos;&apos;&apos;/&gt;&#x0A;&lt;/p&gt;&#x0A;&lt;p style=&apos;&apos;&apos;font-family:verdana;color:gray;font-size:20px;&apos;&apos;&apos;&gt;&#x0A;&lt;span style=&apos;&apos;&apos;font-family:Verdana; font-size:12pt;&apos;&apos;&apos;&gt;Summary outputs, including a .pdf summary report  are saved into the following folders: &lt;/span&gt;&#x0A;&lt;br/&gt;&#x0A;&lt;span style=&apos;&apos;&apos;font-family:Verdana; font-size:12pt;&apos;&apos;&apos;&gt;…/Summary_Report/ &lt;/span&gt;&#x0A;&lt;br/&gt;&#x0A;&lt;span style=&apos;&apos;&apos;font-family:Verdana; font-size:12pt;&apos;&apos;&apos;&gt;…/OutBaU/ &lt;/span&gt;&#x0A;&lt;br/&gt;&#x0A;&lt;span style=&apos;&apos;&apos;font-family:Verdana; font-size:12pt;&apos;&apos;&apos;&gt;…/HTML_animation_OutBaU/ &lt;/span&gt;&#x0A;&lt;/p&gt;&#x0A;&lt;p style=&apos;&apos;&apos;font-family:verdana;color:gray;font-size:20px;&apos;&apos;&apos;&gt;   &lt;/p&gt;&#x0A;&lt;p style=&apos;&apos;&apos;font-family:verdana;color:gray;font-size:20px;&apos;&apos;&apos;&gt;&#x0A;&lt;span style=&apos;&apos;&apos;font-family:Verdana; font-size:12pt;&apos;&apos;&apos;&gt;You can also check all other meaningful results in Temp &lt;/span&gt;&#x0A;&lt;span&gt;&#x0A;&lt;br/&gt;&#x0A;&lt;/span&gt;&#x0A;&lt;/p&gt;&#x0A;&lt;/body&gt;&#x0A;&lt;/html&gt;&#x0A;&quot;,&#x0A;&quot;editors&quot;: []&#x0A;}&#x0A;]&#x0A;}' />
    <containerfunctor name="Group">
        <property key="dff.container.collapsed" value="no" />
        <property key="dff.functor.alias" value="group1320" />
        <functor name="RunExternalProcess">
            <property key="dff.functor.alias" value="runExternalProcess1322" />
            <inputport name="fileName" peerid="v1" />
            <inputport name="parameters" peerid="v3" />
            <inputport name="waitProcessCompletion">.yes</inputport>
            <inputport name="secondsToWait">0</inputport>
        </functor>
        <functor name="String">
            <property key="dff.functor.alias" value="string1739" />
            <inputport name="constant" peerid="v258" />
            <outputport name="object" id="v1" />
        </functor>
        <functor name="Bool">
            <property key="dff.functor.alias" value="bool2518" />
            <inputport name="constant" peerid="v7" />
            <outputport name="object" id="v2" />
        </functor>
        <containerfunctor name="CreateString">
            <property key="dff.functor.alias" value="createString1718" />
            <inputport name="format">&quot;R CMD BATCH --no-save \&quot;--args MC=&lt;v1&gt; IT=&lt;v2&gt; K_MC=&lt;v4&gt; TOF_MC=&lt;v5&gt; Ini_st_MC=&lt;v6&gt; Ini_st.factor.percentage=&lt;v7&gt; COVER_MAP=&lt;v8&gt; rmax_MC=&lt;v9&gt; DEF_FW=&lt;v10&gt; IL=&lt;v11&gt; STdyn=&lt;v12&gt; AGBmap=&lt;v26&gt; SumTables=&lt;v27&gt; OSType=&lt;v28&gt; BaUvsICS=&apos;&lt;s29&gt;&apos; cutoff_yrs=&lt;v30&gt;\&quot; -- NRB_graphs_datasets2.R&quot;</inputport>
            <outputport name="result" id="v3" />
            <functor name="NumberValue">
                <property key="dff.functor.alias" value="numberValue1720" />
                <inputport name="value" peerid="v239" />
                <inputport name="valueNumber">1</inputport>
            </functor>
            <functor name="NumberValue">
                <property key="dff.functor.alias" value="numberValue1724" />
                <inputport name="value" peerid="v241" />
                <inputport name="valueNumber">2</inputport>
            </functor>
            <functor name="NumberValue">
                <property key="dff.functor.alias" value="numberValue4944" />
                <inputport name="value" peerid="v244" />
                <inputport name="valueNumber">4</inputport>
            </functor>
            <functor name="NumberValue">
                <property key="dff.functor.alias" value="numberValue4946" />
                <inputport name="value" peerid="v246" />
                <inputport name="valueNumber">5</inputport>
            </functor>
            <functor name="NumberValue">
                <property key="dff.functor.alias" value="numberValue4952" />
                <inputport name="value" peerid="v265" />
                <inputport name="valueNumber">6</inputport>
            </functor>
            <functor name="NumberValue">
                <property key="dff.functor.alias" value="numberValue4954" />
                <inputport name="value" peerid="v264" />
                <inputport name="valueNumber">7</inputport>
            </functor>
            <functor name="NumberValue">
                <property key="dff.functor.alias" value="numberValue5173" />
                <inputport name="value" peerid="v266" />
                <inputport name="valueNumber">8</inputport>
            </functor>
            <functor name="NumberValue">
                <property key="dff.functor.alias" value="numberValue5175" />
                <inputport name="value" peerid="v245" />
                <inputport name="valueNumber">9</inputport>
            </functor>
            <functor name="NumberValue">
                <property key="dff.functor.alias" value="numberValue5103" />
                <inputport name="value" peerid="v247" />
                <inputport name="valueNumber">10</inputport>
            </functor>
            <functor name="NumberValue">
                <property key="dff.functor.alias" value="numberValue5105" />
                <inputport name="value" peerid="v243" />
                <inputport name="valueNumber">11</inputport>
            </functor>
            <functor name="NumberValue">
                <property key="dff.functor.alias" value="numberValue5107" />
                <inputport name="value" peerid="v240" />
                <inputport name="valueNumber">12</inputport>
            </functor>
            <functor name="NumberValue">
                <property key="dff.functor.alias" value="numberValue3963" />
                <inputport name="value" peerid="v267" />
                <inputport name="valueNumber">26</inputport>
            </functor>
            <functor name="NumberValue">
                <property key="dff.functor.alias" value="numberValue3965" />
                <inputport name="value" peerid="v253" />
                <inputport name="valueNumber">27</inputport>
            </functor>
            <functor name="NumberValue">
                <property key="dff.functor.alias" value="numberValue5167" />
                <inputport name="value" peerid="v260" />
                <inputport name="valueNumber">28</inputport>
            </functor>
            <functor name="NumberString">
                <property key="dff.functor.alias" value="numberString1789" />
                <inputport name="value" peerid="v256" />
                <inputport name="valueNumber">29</inputport>
            </functor>
            <functor name="NumberValue">
                <property key="dff.functor.alias" value="numberValue1812" />
                <inputport name="value" peerid="v263" />
                <inputport name="valueNumber">30</inputport>
            </functor>
        </containerfunctor>
    </containerfunctor>
    <containerfunctor name="Group">
        <property key="dff.container.collapsed" value="no" />
        <property key="dff.functor.alias" value="group3674" />
        <functor name="SaveLookupTable">
            <property key="dff.functor.alias" value="saveLookupTable1181" />
            <inputport name="table" peerid="v20" />
            <inputport name="filename">&quot;Temp/3_NRB.csv&quot;</inputport>
            <inputport name="suffixDigits">2</inputport>
            <inputport name="step">.none</inputport>
            <inputport name="workdir">.none</inputport>
        </functor>
        <functor name="SaveLookupTable">
            <property key="dff.functor.alias" value="saveLookupTable1180" />
            <property key="dff.functor.comment" value="comentar que estoy guardando" />
            <inputport name="table" peerid="v21" />
            <inputport name="filename">&quot;Temp/3_CON_TOT.csv&quot;</inputport>
            <inputport name="suffixDigits">2</inputport>
            <inputport name="step">.none</inputport>
            <inputport name="workdir">.none</inputport>
        </functor>
        <functor name="SaveLookupTable">
            <property key="dff.functor.alias" value="saveLookupTable1179" />
            <inputport name="table" peerid="v22" />
            <inputport name="filename">&quot;Temp/3_CON_NRB.csv&quot;</inputport>
            <inputport name="suffixDigits">2</inputport>
            <inputport name="step">.none</inputport>
            <inputport name="workdir">.none</inputport>
        </functor>
        <functor name="Double">
            <property key="dff.functor.alias" value="double1714" />
            <property key="dff.functor.comment" value="Percetange of fuelwod use savings due to an intervention (e.g. cookstoves, fuel swithching) assuming an INSTANT AND TOTAL (100%) LONG TERM ADOPTION. For sensitivity purposes only." />
            <inputport name="constant" peerid="v242" />
            <outputport name="object" id="v4" />
        </functor>
        <functor name="PositiveInt">
            <property key="dff.functor.alias" value="positiveInt1065" />
            <property key="dff.functor.comment" value="NRB works at a weekly basis and assuming 48 weeks in a year. This defines each simulation length: e.g. 48 =1 year, 4 = 1 month, 1 = 1 week, or 12 = 3 months." />
            <property key="viewer.object" value="yes" />
            <inputport name="constant" peerid="v243" />
            <outputport name="object" id="v5" />
        </functor>
        <functor name="PositiveInt">
            <property key="dff.functor.alias" value="positiveInt1527" />
            <property key="dff.functor.comment" value="DO NOT MODIFIY THIS! Number of weeks in a year, to divide r max values" />
            <inputport name="constant">48</inputport>
            <outputport name="object" id="v6" />
        </functor>
        <functor name="Bool">
            <property key="dff.functor.alias" value="bool2515" />
            <inputport name="constant" peerid="v276" />
            <outputport name="object" id="v7" />
        </functor>
        <functor name="SaveLookupTable">
            <property key="dff.functor.alias" value="saveLookupTable2052" />
            <inputport name="table" peerid="v24" />
            <inputport name="filename">&quot;Temp/3_EXP_CON_TOT.csv&quot;</inputport>
            <inputport name="suffixDigits">2</inputport>
            <inputport name="step">.none</inputport>
            <inputport name="workdir">.none</inputport>
        </functor>
        <functor name="SaveLookupTable">
            <property key="dff.functor.alias" value="saveLookupTable2081" />
            <inputport name="table" peerid="v26" />
            <inputport name="filename">&quot;Temp/3_FW_DEF.csv&quot;</inputport>
            <inputport name="suffixDigits">2</inputport>
            <inputport name="step">.none</inputport>
            <inputport name="workdir">.none</inputport>
        </functor>
        <functor name="SaveTable">
            <property key="dff.functor.alias" value="saveTable2010" />
            <inputport name="table" peerid="v30" />
            <inputport name="filename">&quot;Temp/x_Cons_W.csv&quot;</inputport>
            <inputport name="suffixDigits">2</inputport>
            <inputport name="step">.none</inputport>
            <inputport name="workdir">.none</inputport>
        </functor>
        <functor name="SaveTable">
            <property key="dff.functor.alias" value="saveTable2008" />
            <inputport name="table" peerid="v29" />
            <inputport name="filename">&quot;Temp/x_Cons_W_all.csv&quot;</inputport>
            <inputport name="suffixDigits">2</inputport>
            <inputport name="step">.none</inputport>
            <inputport name="workdir">.none</inputport>
        </functor>
        <functor name="SaveLookupTable">
            <property key="dff.functor.alias" value="saveLookupTable2014" />
            <inputport name="table" peerid="v31" />
            <inputport name="filename">&quot;Temp/x_Cons_V.csv&quot;</inputport>
            <inputport name="suffixDigits">2</inputport>
            <inputport name="step">.none</inputport>
            <inputport name="workdir">.none</inputport>
        </functor>
        <functor name="SaveLookupTable">
            <property key="dff.functor.alias" value="saveLookupTable2016" />
            <inputport name="table" peerid="v32" />
            <inputport name="filename">&quot;Temp/x_Cons_V_all.csv&quot;</inputport>
            <inputport name="suffixDigits">2</inputport>
            <inputport name="step">.none</inputport>
            <inputport name="workdir">.none</inputport>
        </functor>
        <containerfunctor name="Repeat">
            <property key="dff.container.collapsed" value="no" />
            <property key="dff.functor.alias" value="repeat775" />
            <inputport name="iterations" peerid="v239" />
            <internaloutputport name="step" id="v8" />
            <functor name="Step">
                <property key="dff.functor.alias" value="step472" />
                <property key="viewer.step" value="yes" />
                <inputport name="step" peerid="v8" />
                <outputport name="step" id="v9" />
            </functor>
            <functor name="Step">
                <property key="dff.functor.alias" value="step581" />
                <property key="viewer.step" value="yes" />
                <inputport name="step" peerid="v8" />
                <outputport name="step" id="v10" />
            </functor>
            <functor name="ExtractMapAttributes">
                <property key="dff.functor.alias" value="extractMapAttributes757" />
                <inputport name="map" peerid="v106" />
                <inputport name="extractDynamicAttributes">.yes</inputport>
                <inputport name="extractStatisticalAttributes">.no</inputport>
                <outputport name="attributes" id="v11" />
            </functor>
            <functor name="ExtractMapAttributes">
                <property key="dff.functor.alias" value="extractMapAttributes1323" />
                <inputport name="map" peerid="v107" />
                <inputport name="extractDynamicAttributes">.yes</inputport>
                <inputport name="extractStatisticalAttributes">.no</inputport>
                <outputport name="attributes" id="v12" />
            </functor>
            <functor name="ExtractMapAttributes">
                <property key="dff.functor.alias" value="extractMapAttributes564" />
                <inputport name="map" peerid="v185" />
                <inputport name="extractDynamicAttributes">.yes</inputport>
                <inputport name="extractStatisticalAttributes">.no</inputport>
                <outputport name="attributes" id="v13" />
            </functor>
            <functor name="MuxLookupTable">
                <property key="dff.functor.alias" value="muxLookupTable1335" />
                <inputport name="initial">[&#x0A;    &quot;Key&quot; &quot;Value&quot;&#x0A;]</inputport>
                <inputport name="feedback" peerid="v21" />
                <outputport name="table" id="v14" />
            </functor>
            <functor name="MuxLookupTable">
                <property key="dff.functor.alias" value="muxLookupTable761" />
                <inputport name="initial">[&#x0A;    &quot;Key&quot; &quot;Value&quot;&#x0A;]</inputport>
                <inputport name="feedback" peerid="v22" />
                <outputport name="table" id="v15" />
            </functor>
            <functor name="MuxLookupTable">
                <property key="dff.functor.alias" value="muxLookupTable601" />
                <inputport name="initial">[&#x0A;    &quot;Key&quot; &quot;Value&quot;&#x0A;]</inputport>
                <inputport name="feedback" peerid="v20" />
                <outputport name="table" id="v16" />
            </functor>
            <functor name="Step">
                <property key="dff.functor.alias" value="step1337" />
                <inputport name="step" peerid="v8" />
                <outputport name="step" id="v17" />
            </functor>
            <functor name="Step">
                <property key="dff.functor.alias" value="step347" />
                <inputport name="step" peerid="v8" />
                <outputport name="step" id="v18" />
            </functor>
            <functor name="Step">
                <property key="dff.functor.alias" value="step763" />
                <inputport name="step" peerid="v8" />
                <outputport name="step" id="v19" />
            </functor>
            <functor name="SaveMap">
                <property key="dff.functor.alias" value="saveMap1053" />
                <inputport name="map" peerid="v185" />
                <inputport name="filename">&quot;Temp/2_NRB.tif&quot;</inputport>
                <inputport name="suffixDigits">2</inputport>
                <inputport name="step" peerid="v8" />
                <inputport name="useCompression">.yes</inputport>
                <inputport name="workdir">.none</inputport>
            </functor>
            <functor name="SetLookupTableValue">
                <property key="dff.functor.alias" value="setLookupTableValue579" />
                <property key="viewer.updatedtable" value="yes" />
                <inputport name="table" peerid="v16" />
                <inputport name="key" peerid="v18" />
                <inputport name="value" peerid="v188" />
                <outputport name="updatedTable" id="v20" />
            </functor>
            <functor name="SetLookupTableValue">
                <property key="dff.functor.alias" value="setLookupTableValue1333" />
                <inputport name="table" peerid="v14" />
                <inputport name="key" peerid="v17" />
                <inputport name="value" peerid="v187" />
                <outputport name="updatedTable" id="v21" />
            </functor>
            <functor name="SetLookupTableValue">
                <property key="dff.functor.alias" value="setLookupTableValue765" />
                <property key="viewer.updatedtable" value="yes" />
                <inputport name="table" peerid="v15" />
                <inputport name="key" peerid="v19" />
                <inputport name="value" peerid="v190" />
                <outputport name="updatedTable" id="v22" />
            </functor>
            <functor name="SaveMap">
                <property key="dff.functor.alias" value="saveMap1057" />
                <inputport name="map" peerid="v186" />
                <inputport name="filename">&quot;Temp/2_fNRB.tif&quot;</inputport>
                <inputport name="suffixDigits">2</inputport>
                <inputport name="step" peerid="v8" />
                <inputport name="useCompression">.yes</inputport>
                <inputport name="workdir">.none</inputport>
            </functor>
            <functor name="SaveMap">
                <property key="dff.functor.alias" value="saveMap1059" />
                <inputport name="map" peerid="v189" />
                <inputport name="filename">&quot;Temp/2_fNRB_nrb.tif&quot;</inputport>
                <inputport name="suffixDigits">2</inputport>
                <inputport name="step" peerid="v8" />
                <inputport name="useCompression">.yes</inputport>
                <inputport name="workdir">.none</inputport>
            </functor>
            <functor name="SaveMap">
                <property key="dff.functor.alias" value="saveMap1066" />
                <inputport name="map" peerid="v107" />
                <inputport name="filename">&quot;Temp/2_CON_TOT.tif&quot;</inputport>
                <inputport name="suffixDigits">2</inputport>
                <inputport name="step" peerid="v8" />
                <inputport name="useCompression">.yes</inputport>
                <inputport name="workdir">.none</inputport>
            </functor>
            <functor name="SaveMap">
                <property key="dff.functor.alias" value="saveMap1067" />
                <inputport name="map" peerid="v106" />
                <inputport name="filename">&quot;Temp/2_CON_NRB.tif&quot;</inputport>
                <inputport name="suffixDigits">2</inputport>
                <inputport name="step" peerid="v8" />
                <inputport name="useCompression">.yes</inputport>
                <inputport name="workdir">.none</inputport>
            </functor>
            <functor name="SaveMap">
                <property key="dff.functor.alias" value="saveMap1069" />
                <inputport name="map" peerid="v98" />
                <inputport name="filename">&quot;Temp/2_AGBt1.tif&quot;</inputport>
                <inputport name="suffixDigits">2</inputport>
                <inputport name="step" peerid="v8" />
                <inputport name="useCompression">.yes</inputport>
                <inputport name="workdir">.none</inputport>
            </functor>
            <functor name="SaveLookupTable">
                <property key="dff.functor.alias" value="saveLookupTable1173" />
                <inputport name="table" peerid="v66" />
                <inputport name="filename">&quot;Temp/2_AGBtx.csv&quot;</inputport>
                <inputport name="suffixDigits">2</inputport>
                <inputport name="step" peerid="v8" />
                <inputport name="workdir">.none</inputport>
            </functor>
            <functor name="SaveLookupTable">
                <property key="dff.functor.alias" value="saveLookupTable1174" />
                <inputport name="table" peerid="v64" />
                <inputport name="filename">&quot;Temp/2_CON_NRB.csv&quot;</inputport>
                <inputport name="suffixDigits">2</inputport>
                <inputport name="step" peerid="v8" />
                <inputport name="workdir">.none</inputport>
            </functor>
            <functor name="SaveLookupTable">
                <property key="dff.functor.alias" value="saveLookupTable1175" />
                <inputport name="table" peerid="v69" />
                <inputport name="filename">&quot;Temp/2_AGBt1_NRB.csv&quot;</inputport>
                <inputport name="suffixDigits">2</inputport>
                <inputport name="step" peerid="v8" />
                <inputport name="workdir">.none</inputport>
            </functor>
            <functor name="SaveLookupTable">
                <property key="dff.functor.alias" value="saveLookupTable1176" />
                <inputport name="table" peerid="v68" />
                <inputport name="filename">&quot;Temp/2_NRB.csv&quot;</inputport>
                <inputport name="suffixDigits">2</inputport>
                <inputport name="step" peerid="v8" />
                <inputport name="workdir">.none</inputport>
            </functor>
            <functor name="SaveLookupTable">
                <property key="dff.functor.alias" value="saveLookupTable1177" />
                <inputport name="table" peerid="v65" />
                <inputport name="filename">&quot;Temp/2_AGBt1x.csv&quot;</inputport>
                <inputport name="suffixDigits">2</inputport>
                <inputport name="step" peerid="v8" />
                <inputport name="workdir">.none</inputport>
            </functor>
            <functor name="SaveLookupTable">
                <property key="dff.functor.alias" value="saveLookupTable1178" />
                <inputport name="table" peerid="v67" />
                <inputport name="filename">&quot;Temp/2_CON_TOT.csv&quot;</inputport>
                <inputport name="suffixDigits">2</inputport>
                <inputport name="step" peerid="v8" />
                <inputport name="workdir">.none</inputport>
            </functor>
            <functor name="SaveMap">
                <property key="dff.functor.alias" value="saveMap1865" />
                <inputport name="map" peerid="v117" />
                <inputport name="filename">&quot;Temp/2_FW_DEF.tif&quot;</inputport>
                <inputport name="suffixDigits">2</inputport>
                <inputport name="step" peerid="v8" />
                <inputport name="useCompression">.yes</inputport>
                <inputport name="workdir">.none</inputport>
            </functor>
            <functor name="ExtractMapAttributes">
                <property key="dff.functor.alias" value="extractMapAttributes2044" />
                <inputport name="map" peerid="v118" />
                <inputport name="extractDynamicAttributes">.yes</inputport>
                <inputport name="extractStatisticalAttributes">.yes</inputport>
                <outputport name="attributes" id="v23" />
            </functor>
            <functor name="SetLookupTableValue">
                <property key="dff.functor.alias" value="setLookupTableValue2050" />
                <inputport name="table" peerid="v25" />
                <inputport name="key" peerid="v17" />
                <inputport name="value" peerid="v216" />
                <outputport name="updatedTable" id="v24" />
            </functor>
            <functor name="MuxLookupTable">
                <property key="dff.functor.alias" value="muxLookupTable2058" />
                <inputport name="initial">[&#x0A;    &quot;Key&quot; &quot;Value&quot;&#x0A;]</inputport>
                <inputport name="feedback" peerid="v24" />
                <outputport name="table" id="v25" />
            </functor>
            <functor name="SaveMap">
                <property key="dff.functor.alias" value="saveMap2062" />
                <inputport name="map" peerid="v118" />
                <inputport name="filename">&quot;Temp/2_EXP_CON_TOT.tif&quot;</inputport>
                <inputport name="suffixDigits">2</inputport>
                <inputport name="step" peerid="v8" />
                <inputport name="useCompression">.yes</inputport>
                <inputport name="workdir">.none</inputport>
            </functor>
            <functor name="SetLookupTableValue">
                <property key="dff.functor.alias" value="setLookupTableValue2083" />
                <property key="viewer.updatedtable" value="yes" />
                <inputport name="table" peerid="v28" />
                <inputport name="key" peerid="v17" />
                <inputport name="value" peerid="v217" />
                <outputport name="updatedTable" id="v26" />
            </functor>
            <functor name="ExtractMapAttributes">
                <property key="dff.functor.alias" value="extractMapAttributes2087" />
                <inputport name="map" peerid="v119" />
                <inputport name="extractDynamicAttributes">.yes</inputport>
                <inputport name="extractStatisticalAttributes">.yes</inputport>
                <outputport name="attributes" id="v27" />
            </functor>
            <functor name="MuxLookupTable">
                <property key="dff.functor.alias" value="muxLookupTable2096" />
                <inputport name="initial">[&#x0A;    &quot;Key&quot; &quot;Value&quot;&#x0A;]</inputport>
                <inputport name="feedback" peerid="v26" />
                <outputport name="table" id="v28" />
            </functor>
            <functor name="SetLookupTableValue">
                <property key="dff.functor.alias" value="setLookupTableValue2020" />
                <inputport name="table" peerid="v35" />
                <inputport name="key" peerid="v33" />
                <inputport name="value" peerid="v221" />
                <outputport name="updatedTable" id="v29" />
            </functor>
            <functor name="SetLookupTableValue">
                <property key="dff.functor.alias" value="setLookupTableValue2026" />
                <inputport name="table" peerid="v36" />
                <inputport name="key" peerid="v33" />
                <inputport name="value" peerid="v220" />
                <outputport name="updatedTable" id="v30" />
            </functor>
            <functor name="SetLookupTableValue">
                <property key="dff.functor.alias" value="setLookupTableValue2032" />
                <inputport name="table" peerid="v37" />
                <inputport name="key" peerid="v33" />
                <inputport name="value" peerid="v219" />
                <outputport name="updatedTable" id="v31" />
            </functor>
            <functor name="SetLookupTableValue">
                <property key="dff.functor.alias" value="setLookupTableValue1995" />
                <inputport name="table" peerid="v34" />
                <inputport name="key" peerid="v33" />
                <inputport name="value" peerid="v218" />
                <outputport name="updatedTable" id="v32" />
            </functor>
            <functor name="Step">
                <property key="dff.functor.alias" value="step1999" />
                <inputport name="step" peerid="v8" />
                <outputport name="step" id="v33" />
            </functor>
            <functor name="MuxLookupTable">
                <property key="dff.functor.alias" value="muxLookupTable2017" />
                <inputport name="initial">[&#x0A;    &quot;Key&quot; &quot;Value&quot;&#x0A;]</inputport>
                <inputport name="feedback" peerid="v32" />
                <outputport name="table" id="v34" />
            </functor>
            <functor name="MuxLookupTable">
                <property key="dff.functor.alias" value="muxLookupTable2021" />
                <inputport name="initial">[&#x0A;    &quot;Key&quot; &quot;Value&quot;&#x0A;]</inputport>
                <inputport name="feedback" peerid="v29" />
                <outputport name="table" id="v35" />
            </functor>
            <functor name="MuxLookupTable">
                <property key="dff.functor.alias" value="muxLookupTable2025" />
                <inputport name="initial">[&#x0A;    &quot;Key&quot; &quot;Value&quot;&#x0A;]</inputport>
                <inputport name="feedback" peerid="v30" />
                <outputport name="table" id="v36" />
            </functor>
            <functor name="MuxLookupTable">
                <property key="dff.functor.alias" value="muxLookupTable2029" />
                <inputport name="initial">[&#x0A;    &quot;Key&quot; &quot;Value&quot;&#x0A;]</inputport>
                <inputport name="feedback" peerid="v31" />
                <outputport name="table" id="v37" />
            </functor>
            <functor name="SaveMap">
                <property key="dff.functor.alias" value="saveMap4008" />
                <inputport name="map" peerid="v222" />
                <inputport name="filename">&quot;Temp/2_CON_NRBs.tif&quot;</inputport>
                <inputport name="suffixDigits">2</inputport>
                <inputport name="step" peerid="v8" />
                <inputport name="useCompression">.yes</inputport>
                <inputport name="workdir">.none</inputport>
            </functor>
            <functor name="Step">
                <property key="dff.functor.alias" value="step1818" />
                <inputport name="step" peerid="v8" />
                <outputport name="step" id="v38" />
            </functor>
            <containerfunctor name="Repeat">
                <property key="dff.functor.alias" value="repeat874" />
                <inputport name="iterations" peerid="v191" />
                <internaloutputport name="step" id="v39" />
                <functor name="MuxMap">
                    <property key="dff.functor.alias" value="muxMap268" />
                    <inputport name="initial" peerid="v192" />
                    <inputport name="feedback" peerid="v98" />
                    <outputport name="map" id="v40" />
                </functor>
                <functor name="ExtractMapAttributes">
                    <property key="dff.functor.alias" value="extractMapAttributes2420" />
                    <property key="dff.functor.comment" value="Calcula el numero de celdas validas, este valor se usa para normalizar los valores de tal modo que la suma de los pixeles de 1" />
                    <inputport name="map" peerid="v86" />
                    <inputport name="extractDynamicAttributes">.yes</inputport>
                    <inputport name="extractStatisticalAttributes">.no</inputport>
                    <outputport name="attributes" id="v41" />
                </functor>
                <functor name="ExtractMapAttributes">
                    <property key="dff.functor.alias" value="extractMapAttributes307" />
                    <property key="dff.functor.comment" value="Suma todo el sobrante entre la extraccion y la oferta maxima de areas agrícolas, para ser redistribuído sobre el mapa de probabilidades de aquellos que venden" />
                    <inputport name="map" peerid="v89" />
                    <inputport name="extractDynamicAttributes">.yes</inputport>
                    <inputport name="extractStatisticalAttributes">.no</inputport>
                    <outputport name="attributes" id="v42" />
                </functor>
                <functor name="ExtractMapAttributes">
                    <property key="dff.functor.alias" value="extractMapAttributes1291" />
                    <inputport name="map" peerid="v91" />
                    <inputport name="extractDynamicAttributes">.yes</inputport>
                    <inputport name="extractStatisticalAttributes">.no</inputport>
                    <outputport name="attributes" id="v43" />
                </functor>
                <functor name="ExtractMapAttributes">
                    <property key="dff.functor.alias" value="extractMapAttributes242" />
                    <property key="dff.functor.comment" value="Calcula el numero de celdas validas, este valor se usa para normalizar los valores de tal modod que la suma de los pixeles sea igual a 1" />
                    <inputport name="map" peerid="v92" />
                    <inputport name="extractDynamicAttributes">.yes</inputport>
                    <inputport name="extractStatisticalAttributes">.no</inputport>
                    <outputport name="attributes" id="v44" />
                </functor>
                <functor name="ExtractMapAttributes">
                    <property key="dff.functor.alias" value="extractMapAttributes672" />
                    <inputport name="map" peerid="v40" />
                    <inputport name="extractDynamicAttributes">.yes</inputport>
                    <inputport name="extractStatisticalAttributes">.no</inputport>
                    <outputport name="attributes" id="v45" />
                </functor>
                <functor name="ExtractMapAttributes">
                    <property key="dff.functor.alias" value="extractMapAttributes650" />
                    <inputport name="map" peerid="v130" />
                    <inputport name="extractDynamicAttributes">.yes</inputport>
                    <inputport name="extractStatisticalAttributes">.no</inputport>
                    <outputport name="attributes" id="v46" />
                </functor>
                <functor name="ExtractMapAttributes">
                    <property key="dff.functor.alias" value="extractMapAttributes631" />
                    <inputport name="map" peerid="v98" />
                    <inputport name="extractDynamicAttributes">.yes</inputport>
                    <inputport name="extractStatisticalAttributes">.no</inputport>
                    <outputport name="attributes" id="v47" />
                </functor>
                <functor name="ExtractMapAttributes">
                    <property key="dff.functor.alias" value="extractMapAttributes700" />
                    <inputport name="map" peerid="v99" />
                    <inputport name="extractDynamicAttributes">.yes</inputport>
                    <inputport name="extractStatisticalAttributes">.no</inputport>
                    <outputport name="attributes" id="v48" />
                </functor>
                <functor name="ExtractMapAttributes">
                    <property key="dff.functor.alias" value="extractMapAttributes662" />
                    <inputport name="map" peerid="v180" />
                    <inputport name="extractDynamicAttributes">.yes</inputport>
                    <inputport name="extractStatisticalAttributes">.no</inputport>
                    <outputport name="attributes" id="v49" />
                </functor>
                <functor name="ExtractMapAttributes">
                    <property key="dff.functor.alias" value="extractMapAttributes578" />
                    <inputport name="map" peerid="v97" />
                    <inputport name="extractDynamicAttributes">.yes</inputport>
                    <inputport name="extractStatisticalAttributes">.no</inputport>
                    <outputport name="attributes" id="v50" />
                </functor>
                <functor name="MuxLookupTable">
                    <property key="dff.functor.alias" value="muxLookupTable586" />
                    <inputport name="initial">[&#x0A;    &quot;Key&quot; &quot;Value&quot;&#x0A;]</inputport>
                    <inputport name="feedback" peerid="v68" />
                    <outputport name="table" id="v51" />
                </functor>
                <functor name="MuxLookupTable">
                    <property key="dff.functor.alias" value="muxLookupTable643" />
                    <inputport name="initial">[&#x0A;    &quot;Key&quot; &quot;Value&quot;&#x0A;]</inputport>
                    <inputport name="feedback" peerid="v65" />
                    <outputport name="table" id="v52" />
                </functor>
                <functor name="MuxLookupTable">
                    <property key="dff.functor.alias" value="muxLookupTable666" />
                    <inputport name="initial">[&#x0A;    &quot;Key&quot; &quot;Value&quot;&#x0A;]</inputport>
                    <inputport name="feedback" peerid="v64" />
                    <outputport name="table" id="v53" />
                </functor>
                <functor name="MuxLookupTable">
                    <property key="dff.functor.alias" value="muxLookupTable648" />
                    <inputport name="initial">[&#x0A;    &quot;Key&quot; &quot;Value&quot;&#x0A;]</inputport>
                    <inputport name="feedback" peerid="v67" />
                    <outputport name="table" id="v54" />
                </functor>
                <functor name="MuxLookupTable">
                    <property key="dff.functor.alias" value="muxLookupTable694" />
                    <inputport name="initial">[&#x0A;    &quot;Key&quot; &quot;Value&quot;&#x0A;]</inputport>
                    <inputport name="feedback" peerid="v69" />
                    <outputport name="table" id="v55" />
                </functor>
                <functor name="MuxMap">
                    <property key="dff.functor.alias" value="muxMap780" />
                    <inputport name="initial" peerid="v183" />
                    <inputport name="feedback" peerid="v106" />
                    <outputport name="map" id="v56" />
                </functor>
                <functor name="MuxMap">
                    <property key="dff.functor.alias" value="muxMap343" />
                    <inputport name="initial" peerid="v183" />
                    <inputport name="feedback" peerid="v107" />
                    <outputport name="map" id="v57" />
                </functor>
                <functor name="MuxLookupTable">
                    <property key="dff.functor.alias" value="muxLookupTable661" />
                    <inputport name="initial">[&#x0A;    &quot;Key&quot; &quot;Value&quot;&#x0A;]</inputport>
                    <inputport name="feedback" peerid="v66" />
                    <outputport name="table" id="v58" />
                </functor>
                <functor name="Step">
                    <property key="dff.functor.alias" value="step588" />
                    <inputport name="step" peerid="v39" />
                    <outputport name="step" id="v59" />
                </functor>
                <functor name="Step">
                    <property key="dff.functor.alias" value="step696" />
                    <inputport name="step" peerid="v39" />
                    <outputport name="step" id="v60" />
                </functor>
                <functor name="Step">
                    <property key="dff.functor.alias" value="step659" />
                    <inputport name="step" peerid="v39" />
                    <outputport name="step" id="v61" />
                </functor>
                <functor name="Step">
                    <property key="dff.functor.alias" value="step644" />
                    <inputport name="step" peerid="v39" />
                    <outputport name="step" id="v62" />
                </functor>
                <functor name="Step">
                    <property key="dff.functor.alias" value="step597" />
                    <inputport name="step" peerid="v39" />
                    <outputport name="step" id="v63" />
                </functor>
                <functor name="SetLookupTableValue">
                    <property key="dff.functor.alias" value="setLookupTableValue664" />
                    <inputport name="table" peerid="v53" />
                    <inputport name="key" peerid="v76" />
                    <inputport name="value" peerid="v104" />
                    <outputport name="updatedTable" id="v64" />
                </functor>
                <functor name="SetLookupTableValue">
                    <property key="dff.functor.alias" value="setLookupTableValue633" />
                    <property key="viewer.updatedtable" value="yes" />
                    <inputport name="table" peerid="v52" />
                    <inputport name="key" peerid="v63" />
                    <inputport name="value" peerid="v103" />
                    <outputport name="updatedTable" id="v65" />
                </functor>
                <functor name="SetLookupTableValue">
                    <property key="dff.functor.alias" value="setLookupTableValue656" />
                    <inputport name="table" peerid="v58" />
                    <inputport name="key" peerid="v61" />
                    <inputport name="value" peerid="v102" />
                    <outputport name="updatedTable" id="v66" />
                </functor>
                <functor name="SetLookupTableValue">
                    <property key="dff.functor.alias" value="setLookupTableValue642" />
                    <inputport name="table" peerid="v54" />
                    <inputport name="key" peerid="v62" />
                    <inputport name="value" peerid="v100" />
                    <outputport name="updatedTable" id="v67" />
                </functor>
                <functor name="SetLookupTableValue">
                    <property key="dff.functor.alias" value="setLookupTableValue576" />
                    <property key="viewer.updatedtable" value="yes" />
                    <inputport name="table" peerid="v51" />
                    <inputport name="key" peerid="v59" />
                    <inputport name="value" peerid="v105" />
                    <outputport name="updatedTable" id="v68" />
                </functor>
                <functor name="SetLookupTableValue">
                    <property key="dff.functor.alias" value="setLookupTableValue692" />
                    <inputport name="table" peerid="v55" />
                    <inputport name="key" peerid="v60" />
                    <inputport name="value" peerid="v101" />
                    <outputport name="updatedTable" id="v69" />
                </functor>
                <functor name="Patcher">
                    <property key="dff.functor.alias" value="patcher5095" />
                    <property key="dff.functor.comment" value="Loss" />
                    <property key="viewer.changedlandscape" value="yes" />
                    <property key="viewer.corrodedprobabilities" value="yes" />
                    <property key="viewer.remainingchanges" value="yes" />
                    <inputport name="landscape" peerid="v72" />
                    <inputport name="probabilities" peerid="v108" />
                    <inputport name="changes" peerid="v71" />
                    <inputport name="transitionParameters">[&#x0A;    0-&gt;1 1 5 2&#x0A;]</inputport>
                    <inputport name="neighborWindowLines">6</inputport>
                    <inputport name="neighborWindowColumns">6</inputport>
                    <inputport name="pruneFactor">150</inputport>
                    <outputport name="changedLandscape" id="v70" />
                </functor>
                <functor name="CalcChangeMatrix">
                    <property key="dff.functor.alias" value="calcChangeMatrix5091" />
                    <property key="viewer.changes" value="yes" />
                    <inputport name="landscape" peerid="v72" />
                    <inputport name="transitionMatrix" peerid="v109" />
                    <outputport name="changes" id="v71" />
                </functor>
                <functor name="MuxCategoricalMap">
                    <property key="dff.functor.alias" value="muxCategoricalMap5159" />
                    <property key="viewer.map" value="yes" />
                    <inputport name="initial" peerid="v309" />
                    <inputport name="feedback" peerid="v70" />
                    <outputport name="map" id="v72" />
                </functor>
                <functor name="CalcChangeMatrix">
                    <property key="dff.functor.alias" value="calcChangeMatrix5093" />
                    <inputport name="landscape" peerid="v74" />
                    <inputport name="transitionMatrix" peerid="v110" />
                    <outputport name="changes" id="v73" />
                </functor>
                <functor name="MuxCategoricalMap">
                    <property key="dff.functor.alias" value="muxCategoricalMap5166" />
                    <inputport name="initial" peerid="v308" />
                    <inputport name="feedback" peerid="v179" />
                    <outputport name="map" id="v74" />
                </functor>
                <functor name="SaveMap">
                    <property key="dff.functor.alias" value="saveMap5175" />
                    <inputport name="map" peerid="v70" />
                    <inputport name="filename">&quot;Debugging/Cum_Sim_loss.tif&quot;</inputport>
                    <inputport name="suffixDigits">2</inputport>
                    <inputport name="step" peerid="v39" />
                    <inputport name="useCompression">.yes</inputport>
                    <inputport name="workdir">.none</inputport>
                </functor>
                <functor name="SaveMap">
                    <property key="dff.functor.alias" value="saveMap5057" />
                    <inputport name="map" peerid="v112" />
                    <inputport name="filename">&quot;Debugging/Fw_def_tot.tif&quot;</inputport>
                    <inputport name="suffixDigits">2</inputport>
                    <inputport name="step" peerid="v39" />
                    <inputport name="useCompression">.yes</inputport>
                    <inputport name="workdir">.none</inputport>
                </functor>
                <functor name="Step">
                    <property key="dff.functor.alias" value="step5046" />
                    <property key="viewer.step" value="yes" />
                    <inputport name="step" peerid="v39" />
                    <outputport name="step" id="v75" />
                </functor>
                <functor name="SaveMap">
                    <property key="dff.functor.alias" value="saveMap5060" />
                    <inputport name="map" peerid="v113" />
                    <inputport name="filename">&quot;Debugging/Sim_loss.tif&quot;</inputport>
                    <inputport name="suffixDigits">2</inputport>
                    <inputport name="step" peerid="v39" />
                    <inputport name="useCompression">.yes</inputport>
                    <inputport name="workdir">.none</inputport>
                </functor>
                <functor name="SaveMap">
                    <property key="dff.functor.alias" value="saveMap5064" />
                    <inputport name="map" peerid="v114" />
                    <inputport name="filename">&quot;Debugging/Sim_gain.tif&quot;</inputport>
                    <inputport name="suffixDigits">2</inputport>
                    <inputport name="step" peerid="v39" />
                    <inputport name="useCompression">.yes</inputport>
                    <inputport name="workdir">.none</inputport>
                </functor>
                <functor name="SaveMap">
                    <property key="dff.functor.alias" value="saveMap5141" />
                    <inputport name="map" peerid="v95" />
                    <inputport name="filename">&quot;Debugging/Expect_harv_tot.tif&quot;</inputport>
                    <inputport name="suffixDigits">2</inputport>
                    <inputport name="step" peerid="v39" />
                    <inputport name="useCompression">.yes</inputport>
                    <inputport name="workdir">.none</inputport>
                </functor>
                <functor name="SaveMap">
                    <property key="dff.functor.alias" value="saveMap5215" />
                    <inputport name="map" peerid="v173" />
                    <inputport name="filename">&quot;Debugging/Harv_pix_W.tif&quot;</inputport>
                    <inputport name="suffixDigits">2</inputport>
                    <inputport name="step" peerid="v39" />
                    <inputport name="useCompression">.yes</inputport>
                    <inputport name="workdir">.none</inputport>
                </functor>
                <functor name="SaveMap">
                    <property key="dff.functor.alias" value="saveMap5218" />
                    <inputport name="map" peerid="v176" />
                    <inputport name="filename">&quot;Debugging/Harv_pix_V.tif&quot;</inputport>
                    <inputport name="suffixDigits">2</inputport>
                    <inputport name="step" peerid="v39" />
                    <inputport name="useCompression">.yes</inputport>
                    <inputport name="workdir">.none</inputport>
                </functor>
                <functor name="Step">
                    <property key="dff.functor.alias" value="step5222" />
                    <inputport name="step" peerid="v39" />
                    <outputport name="step" id="v76" />
                </functor>
                <functor name="SaveMap">
                    <property key="dff.functor.alias" value="saveMap5148" />
                    <inputport name="map" peerid="v116" />
                    <inputport name="filename">&quot;Debugging/ProbHarv_V.tif&quot;</inputport>
                    <inputport name="suffixDigits">2</inputport>
                    <inputport name="step" peerid="v39" />
                    <inputport name="useCompression">.yes</inputport>
                    <inputport name="workdir">.none</inputport>
                </functor>
                <functor name="SaveMap">
                    <property key="dff.functor.alias" value="saveMap5151" />
                    <inputport name="map" peerid="v115" />
                    <inputport name="filename">&quot;Debugging/ProbHarv_W.tif&quot;</inputport>
                    <inputport name="suffixDigits">2</inputport>
                    <inputport name="step" peerid="v39" />
                    <inputport name="useCompression">.yes</inputport>
                    <inputport name="workdir">.none</inputport>
                </functor>
                <functor name="SaveMap">
                    <property key="dff.functor.alias" value="saveMap8564" />
                    <inputport name="map" peerid="v87" />
                    <inputport name="filename">&quot;Debugging/Proj_harv_Wtot.tif&quot;</inputport>
                    <inputport name="suffixDigits">2</inputport>
                    <inputport name="step" peerid="v39" />
                    <inputport name="useCompression">.yes</inputport>
                    <inputport name="workdir">.none</inputport>
                </functor>
                <functor name="SaveMap">
                    <property key="dff.functor.alias" value="saveMap8567" />
                    <inputport name="map" peerid="v94" />
                    <inputport name="filename">&quot;Debugging/Proj_harv_Vtot.tif&quot;</inputport>
                    <inputport name="suffixDigits">2</inputport>
                    <inputport name="step" peerid="v39" />
                    <inputport name="useCompression">.yes</inputport>
                    <inputport name="workdir">.none</inputport>
                </functor>
                <functor name="SaveMap">
                    <property key="dff.functor.alias" value="saveMap8570" />
                    <inputport name="map" peerid="v89" />
                    <inputport name="filename">&quot;Debugging/Non_harv_AGR.tif&quot;</inputport>
                    <inputport name="suffixDigits">2</inputport>
                    <inputport name="step" peerid="v39" />
                    <inputport name="useCompression">.yes</inputport>
                    <inputport name="workdir">.none</inputport>
                </functor>
                <functor name="SaveMap">
                    <property key="dff.functor.alias" value="saveMap8573" />
                    <inputport name="map" peerid="v93" />
                    <inputport name="filename">&quot;Debugging/Ex_agr_harv.tif&quot;</inputport>
                    <inputport name="suffixDigits">2</inputport>
                    <inputport name="step" peerid="v39" />
                    <inputport name="useCompression">.yes</inputport>
                    <inputport name="workdir">.none</inputport>
                </functor>
                <functor name="MuxMap">
                    <property key="dff.functor.alias" value="muxMap1856" />
                    <inputport name="initial" peerid="v183" />
                    <inputport name="feedback" peerid="v117" />
                    <outputport name="map" id="v77" />
                </functor>
                <functor name="SaveMap">
                    <property key="dff.functor.alias" value="saveMap7209" />
                    <inputport name="map" peerid="v96" />
                    <inputport name="filename">&quot;Debugging/fnrb.tif&quot;</inputport>
                    <inputport name="suffixDigits">2</inputport>
                    <inputport name="step" peerid="v39" />
                    <inputport name="useCompression">.yes</inputport>
                    <inputport name="workdir">.none</inputport>
                </functor>
                <functor name="SaveMap">
                    <property key="dff.functor.alias" value="saveMap7212" />
                    <inputport name="map" peerid="v97" />
                    <inputport name="filename">&quot;Debugging/nrb.tif&quot;</inputport>
                    <inputport name="suffixDigits">2</inputport>
                    <inputport name="step" peerid="v39" />
                    <inputport name="useCompression">.yes</inputport>
                    <inputport name="workdir">.none</inputport>
                </functor>
                <functor name="SaveMap">
                    <property key="dff.functor.alias" value="saveMap1948" />
                    <inputport name="map" peerid="v107" />
                    <inputport name="filename">&quot;Debugging/Cum_harv.tif&quot;</inputport>
                    <inputport name="suffixDigits">2</inputport>
                    <inputport name="step" peerid="v39" />
                    <inputport name="useCompression">.yes</inputport>
                    <inputport name="workdir">.none</inputport>
                </functor>
                <functor name="SaveMap">
                    <property key="dff.functor.alias" value="saveMap2035" />
                    <inputport name="map" peerid="v118" />
                    <inputport name="filename">&quot;Debugging/Cum_exp_harv.tif&quot;</inputport>
                    <inputport name="suffixDigits">2</inputport>
                    <inputport name="step" peerid="v39" />
                    <inputport name="useCompression">.yes</inputport>
                    <inputport name="workdir">.none</inputport>
                </functor>
                <functor name="MuxMap">
                    <property key="dff.functor.alias" value="muxMap2039" />
                    <inputport name="initial" peerid="v183" />
                    <inputport name="feedback" peerid="v118" />
                    <outputport name="map" id="v78" />
                </functor>
                <functor name="MuxMap">
                    <property key="dff.functor.alias" value="muxMap2073" />
                    <inputport name="initial" peerid="v183" />
                    <inputport name="feedback" peerid="v119" />
                    <outputport name="map" id="v79" />
                </functor>
                <functor name="SaveMap">
                    <property key="dff.functor.alias" value="saveMap2078" />
                    <inputport name="map" peerid="v119" />
                    <inputport name="filename">&quot;Debugging/Cum_Fw_def.tif&quot;</inputport>
                    <inputport name="suffixDigits">2</inputport>
                    <inputport name="step" peerid="v39" />
                    <inputport name="useCompression">.yes</inputport>
                    <inputport name="workdir">.none</inputport>
                </functor>
                <functor name="MuxLookupTable">
                    <property key="dff.functor.alias" value="muxLookupTable1720" />
                    <inputport name="initial">[&#x0A;    &quot;Key&quot; &quot;Value&quot;&#x0A;]</inputport>
                    <inputport name="feedback" peerid="v120" />
                    <outputport name="table" id="v80" />
                </functor>
                <functor name="Step">
                    <property key="dff.functor.alias" value="step1735" />
                    <property key="viewer.step" value="yes" />
                    <inputport name="step" peerid="v39" />
                    <outputport name="step" id="v81" />
                </functor>
                <functor name="MuxLookupTable">
                    <property key="dff.functor.alias" value="muxLookupTable1768" />
                    <inputport name="initial">[&#x0A;    &quot;Key&quot; &quot;Value&quot;&#x0A;]</inputport>
                    <inputport name="feedback" peerid="v121" />
                    <outputport name="table" id="v82" />
                </functor>
                <functor name="MuxLookupTable">
                    <property key="dff.functor.alias" value="muxLookupTable1852" />
                    <inputport name="initial">[&#x0A;    &quot;Key&quot; &quot;Value&quot;&#x0A;]</inputport>
                    <inputport name="feedback" peerid="v123" />
                    <outputport name="table" id="v83" />
                </functor>
                <functor name="MuxLookupTable">
                    <property key="dff.functor.alias" value="muxLookupTable1869" />
                    <inputport name="initial">[&#x0A;    &quot;Key&quot; &quot;Value&quot;&#x0A;]</inputport>
                    <inputport name="feedback" peerid="v122" />
                    <outputport name="table" id="v84" />
                </functor>
                <functor name="SaveMap">
                    <property key="dff.functor.alias" value="saveMap3924" />
                    <inputport name="map" peerid="v90" />
                    <inputport name="filename">&quot;Debugging/harv_AGR.tif&quot;</inputport>
                    <inputport name="suffixDigits">2</inputport>
                    <inputport name="step" peerid="v39" />
                    <inputport name="useCompression">.yes</inputport>
                    <inputport name="workdir">.none</inputport>
                </functor>
                <functor name="MapJunction">
                    <property key="dff.functor.alias" value="mapJunction3985" />
                    <inputport name="possibleMap1" peerid="v134" />
                    <inputport name="possibleMap2" peerid="v135" />
                    <outputport name="map" id="v85" />
                </functor>
                <functor name="SaveMap">
                    <property key="dff.functor.alias" value="saveMap3979" />
                    <inputport name="map" peerid="v137" />
                    <inputport name="filename">&quot;Debugging/Proj_harv_Vdef.tif&quot;</inputport>
                    <inputport name="suffixDigits">2</inputport>
                    <inputport name="step" peerid="v39" />
                    <inputport name="useCompression">.yes</inputport>
                    <inputport name="workdir">.none</inputport>
                </functor>
                <functor name="SaveMap">
                    <property key="dff.functor.alias" value="saveMap3997" />
                    <inputport name="map" peerid="v138" />
                    <inputport name="filename">&quot;Debugging/Proj_harv_Wdef.tif&quot;</inputport>
                    <inputport name="suffixDigits">2</inputport>
                    <inputport name="step" peerid="v39" />
                    <inputport name="useCompression">.yes</inputport>
                    <inputport name="workdir">.none</inputport>
                </functor>
                <functor name="SaveMap">
                    <property key="dff.functor.alias" value="saveMap3978" />
                    <inputport name="map" peerid="v139" />
                    <inputport name="filename">&quot;Debugging/Fw_def_totnb.tif&quot;</inputport>
                    <inputport name="suffixDigits">2</inputport>
                    <inputport name="step" peerid="v39" />
                    <inputport name="useCompression">.yes</inputport>
                    <inputport name="workdir">.none</inputport>
                </functor>
                <functor name="SaveMap">
                    <property key="dff.functor.alias" value="saveMap7137" />
                    <inputport name="map" peerid="v170" />
                    <inputport name="filename">&quot;Debugging/IniProb_V.tif&quot;</inputport>
                    <inputport name="suffixDigits">2</inputport>
                    <inputport name="step" peerid="v39" />
                    <inputport name="useCompression">.yes</inputport>
                    <inputport name="workdir">.none</inputport>
                </functor>
                <functor name="SaveMap">
                    <property key="dff.functor.alias" value="saveMap1072" />
                    <inputport name="map" peerid="v160" />
                    <inputport name="filename">&quot;Debugging/IniProb_W.tif&quot;</inputport>
                    <inputport name="suffixDigits">2</inputport>
                    <inputport name="step" peerid="v39" />
                    <inputport name="useCompression">.yes</inputport>
                    <inputport name="workdir">.none</inputport>
                </functor>
                <containerfunctor name="CalculateMap">
                    <property key="dff.container.collapsed" value="no" />
                    <property key="dff.functor.alias" value="calculateMap1123" />
                    <property key="dff.functor.comment" value='Clip the updated probability map by those cells thar are &quot;1&quot; resulting from the patcher. i.e. those cells that changed from 0 to 1 given the pacther settings. Most of them if the patcher is turned off' />
                    <inputport name="expression">[&#x0A;    i1 * i2&#x0A;]</inputport>
                    <inputport name="cellType">.float32</inputport>
                    <inputport name="nullValue">.default</inputport>
                    <inputport name="resultIsSparse">.no</inputport>
                    <inputport name="resultFormat">.none</inputport>
                    <outputport name="result" id="v86" />
                    <functor name="NumberMap">
                        <property key="dff.functor.alias" value="numberMap884" />
                        <inputport name="map" peerid="v173" />
                        <inputport name="mapNumber">1</inputport>
                    </functor>
                    <functor name="NumberMap">
                        <property key="dff.functor.alias" value="numberMap885" />
                        <inputport name="map" peerid="v115" />
                        <inputport name="mapNumber">2</inputport>
                    </functor>
                </containerfunctor>
                <containerfunctor name="CalculateMap">
                    <property key="dff.container.collapsed" value="no" />
                    <property key="dff.functor.alias" value="calculateMap1124" />
                    <property key="dff.functor.comment" value="Table 1 is equal to toal consumption (which is fixed for the whole period, i.e. NOT elastic). Map1 is the probability map showing only the index vale for those pixel in which some amount of fuelwood will be harvested, meaning that it is a fu3elwood source and that the pixel was selected by the patcher. The amount of fuelwood extracted depends on the index or probability" />
                    <inputport name="expression">[&#x0A;    if v2 = 0 then&#x0A;        0&#x0A;    else &#x0A;        i1 * v2 * v2 / v3 / t2[12]&#x0A;]</inputport>
                    <inputport name="cellType">.float32</inputport>
                    <inputport name="nullValue">.default</inputport>
                    <inputport name="resultIsSparse">.no</inputport>
                    <inputport name="resultFormat">.none</inputport>
                    <outputport name="result" id="v87" />
                    <functor name="NumberMap">
                        <property key="dff.functor.alias" value="numberMap889" />
                        <inputport name="map" peerid="v86" />
                        <inputport name="mapNumber">1</inputport>
                    </functor>
                    <functor name="NumberTable">
                        <property key="dff.functor.alias" value="numberTable1126" />
                        <inputport name="table" peerid="v41" />
                        <inputport name="tableNumber">2</inputport>
                    </functor>
                    <functor name="NumberValue">
                        <property key="dff.functor.alias" value="numberValue1792" />
                        <inputport name="value" peerid="v124" />
                        <inputport name="valueNumber">3</inputport>
                    </functor>
                    <functor name="NumberValue">
                        <property key="dff.functor.alias" value="numberValue1795" />
                        <inputport name="value" peerid="v125" />
                        <inputport name="valueNumber">2</inputport>
                    </functor>
                </containerfunctor>
                <containerfunctor name="CalculateMap">
                    <property key="dff.container.collapsed" value="no" />
                    <property key="dff.functor.alias" value="calculateMap1128" />
                    <property key="viewer.result" value="yes" />
                    <inputport name="expression">[&#x0A;    if i1 = 1 then&#x0A;        i3 - i2&#x0A;    else &#x0A;        0&#x0A;]</inputport>
                    <inputport name="cellType">.float32</inputport>
                    <inputport name="nullValue">.default</inputport>
                    <inputport name="resultIsSparse">.no</inputport>
                    <inputport name="resultFormat">.none</inputport>
                    <outputport name="result" id="v88" />
                    <functor name="NumberMap">
                        <property key="dff.functor.alias" value="numberMap898" />
                        <inputport name="map" peerid="v196" />
                        <inputport name="mapNumber">1</inputport>
                    </functor>
                    <functor name="NumberMap">
                        <property key="dff.functor.alias" value="numberMap899" />
                        <inputport name="map" peerid="v87" />
                        <inputport name="mapNumber">2</inputport>
                    </functor>
                    <functor name="NumberMap">
                        <property key="dff.functor.alias" value="numberMap7541" />
                        <inputport name="map" peerid="v205" />
                        <inputport name="mapNumber">3</inputport>
                    </functor>
                </containerfunctor>
                <containerfunctor name="CalculateMap">
                    <property key="dff.container.collapsed" value="no" />
                    <property key="dff.functor.alias" value="calculateMap1129" />
                    <property key="viewer.result" value="yes" />
                    <inputport name="expression">[&#x0A;    if i1 &lt; 0 then&#x0A;        i1 * -1&#x0A;    else &#x0A;        0&#x0A;]</inputport>
                    <inputport name="cellType">.float32</inputport>
                    <inputport name="nullValue">.default</inputport>
                    <inputport name="resultIsSparse">.no</inputport>
                    <inputport name="resultFormat">.none</inputport>
                    <outputport name="result" id="v89" />
                    <functor name="NumberMap">
                        <property key="dff.functor.alias" value="numberMap902" />
                        <inputport name="map" peerid="v88" />
                        <inputport name="mapNumber">1</inputport>
                    </functor>
                </containerfunctor>
                <containerfunctor name="CalculateMap">
                    <property key="dff.container.collapsed" value="no" />
                    <property key="dff.functor.alias" value="calculateMap1130" />
                    <property key="viewer.result" value="yes" />
                    <inputport name="expression">[&#x0A;    i1 - i2&#x0A;]</inputport>
                    <inputport name="cellType">.float32</inputport>
                    <inputport name="nullValue">.default</inputport>
                    <inputport name="resultIsSparse">.no</inputport>
                    <inputport name="resultFormat">.none</inputport>
                    <outputport name="result" id="v90" />
                    <functor name="NumberMap">
                        <property key="dff.functor.alias" value="numberMap904" />
                        <inputport name="map" peerid="v138" />
                        <inputport name="mapNumber">1</inputport>
                    </functor>
                    <functor name="NumberMap">
                        <property key="dff.functor.alias" value="numberMap905" />
                        <inputport name="map" peerid="v89" />
                        <inputport name="mapNumber">2</inputport>
                    </functor>
                </containerfunctor>
                <containerfunctor name="CalculateMap">
                    <property key="dff.container.collapsed" value="no" />
                    <property key="dff.functor.alias" value="calculateMap1131" />
                    <inputport name="expression">[&#x0A;    if i1 = 1 then&#x0A;        null&#x0A;    else &#x0A;        i2&#x0A;]</inputport>
                    <inputport name="cellType">.float32</inputport>
                    <inputport name="nullValue">.default</inputport>
                    <inputport name="resultIsSparse">.no</inputport>
                    <inputport name="resultFormat">.none</inputport>
                    <outputport name="result" id="v91" />
                    <functor name="NumberMap">
                        <property key="dff.functor.alias" value="numberMap908" />
                        <inputport name="map" peerid="v196" />
                        <inputport name="mapNumber">1</inputport>
                    </functor>
                    <functor name="NumberMap">
                        <property key="dff.functor.alias" value="numberMap909" />
                        <inputport name="map" peerid="v86" />
                        <inputport name="mapNumber">2</inputport>
                    </functor>
                </containerfunctor>
                <containerfunctor name="CalculateMap">
                    <property key="dff.container.collapsed" value="no" />
                    <property key="dff.functor.alias" value="calculateMap1132" />
                    <property key="viewer.result" value="yes" />
                    <inputport name="expression">[&#x0A;    i1 * i2&#x0A;]</inputport>
                    <inputport name="cellType">.float32</inputport>
                    <inputport name="nullValue">.default</inputport>
                    <inputport name="resultIsSparse">.no</inputport>
                    <inputport name="resultFormat">.none</inputport>
                    <outputport name="result" id="v92" />
                    <functor name="NumberMap">
                        <property key="dff.functor.alias" value="numberMap911" />
                        <inputport name="map" peerid="v176" />
                        <inputport name="mapNumber">1</inputport>
                    </functor>
                    <functor name="NumberMap">
                        <property key="dff.functor.alias" value="numberMap912" />
                        <inputport name="map" peerid="v116" />
                        <inputport name="mapNumber">2</inputport>
                    </functor>
                </containerfunctor>
                <containerfunctor name="CalculateMap">
                    <property key="dff.container.collapsed" value="no" />
                    <property key="dff.functor.alias" value="calculateMap1134" />
                    <inputport name="expression">[&#x0A;    i1 * t1[12] / t2[12]&#x0A;]</inputport>
                    <inputport name="cellType">.float32</inputport>
                    <inputport name="nullValue">.default</inputport>
                    <inputport name="resultIsSparse">.no</inputport>
                    <inputport name="resultFormat">.none</inputport>
                    <outputport name="result" id="v93" />
                    <functor name="NumberMap">
                        <property key="dff.functor.alias" value="numberMap931" />
                        <inputport name="map" peerid="v91" />
                        <inputport name="mapNumber">1</inputport>
                    </functor>
                    <functor name="NumberTable">
                        <property key="dff.functor.alias" value="numberTable1135" />
                        <inputport name="table" peerid="v42" />
                        <inputport name="tableNumber">1</inputport>
                    </functor>
                    <functor name="NumberTable">
                        <property key="dff.functor.alias" value="numberTable1136" />
                        <inputport name="table" peerid="v43" />
                        <inputport name="tableNumber">2</inputport>
                    </functor>
                </containerfunctor>
                <containerfunctor name="CalculateMap">
                    <property key="dff.container.collapsed" value="no" />
                    <property key="dff.functor.alias" value="calculateMap1137" />
                    <property key="dff.functor.comment" value="Table 1 is equal to toal consumption (which is fixed for the whole period, i.e. NOT elastic). Map1 is the probability map showing only the index vale for those pixel in which some amount of fuelwood will be harvested, meaning that it is a fu3elwood source and that the pixel was selected by the patcher. The amount of fuelwood extracted depends on the index or probability" />
                    <property key="viewer.result" value="yes" />
                    <inputport name="expression">[&#x0A;    if v2 = 0 then&#x0A;        0&#x0A;    else &#x0A;        i1 * v2 * v2 / v3 / t2[12]&#x0A;]</inputport>
                    <inputport name="cellType">.float32</inputport>
                    <inputport name="nullValue">.default</inputport>
                    <inputport name="resultIsSparse">.no</inputport>
                    <inputport name="resultFormat">.none</inputport>
                    <outputport name="result" id="v94" />
                    <functor name="NumberMap">
                        <property key="dff.functor.alias" value="numberMap935" />
                        <inputport name="map" peerid="v92" />
                        <inputport name="mapNumber">1</inputport>
                    </functor>
                    <functor name="NumberTable">
                        <property key="dff.functor.alias" value="numberTable1139" />
                        <inputport name="table" peerid="v44" />
                        <inputport name="tableNumber">2</inputport>
                    </functor>
                    <functor name="NumberValue">
                        <property key="dff.functor.alias" value="numberValue1860" />
                        <inputport name="value" peerid="v126" />
                        <inputport name="valueNumber">2</inputport>
                    </functor>
                    <functor name="NumberValue">
                        <property key="dff.functor.alias" value="numberValue1863" />
                        <inputport name="value" peerid="v127" />
                        <inputport name="valueNumber">3</inputport>
                    </functor>
                </containerfunctor>
                <containerfunctor name="CalculateMap">
                    <property key="dff.container.collapsed" value="no" />
                    <property key="dff.functor.alias" value="calculateMap1140" />
                    <property key="dff.functor.comment" value="BOTH PREASSURES ARE ADDED (SELFGATHERED AND SELLED)" />
                    <inputport name="expression">[&#x0A;    if isNull(i1) and isNull(i2) and isNull(i3) then&#x0A;        0&#x0A;    else if isNull(i1) and isNull(i2) then&#x0A;        i3&#x0A;    else if isNull(i2) and isNull(i3) then&#x0A;        i1&#x0A;    else if isNull(i1) and isNull(i3) then&#x0A;        i2&#x0A;    else if isNull(i1) then&#x0A;        i2 + i3&#x0A;    else if isNull(i2) then&#x0A;        i1 + i3&#x0A;    else if isNull(i3) then&#x0A;        i1 + i2&#x0A;    else &#x0A;        i1 + i2 + i3&#x0A;]</inputport>
                    <inputport name="cellType">.float32</inputport>
                    <inputport name="nullValue">.default</inputport>
                    <inputport name="resultIsSparse">.no</inputport>
                    <inputport name="resultFormat">.none</inputport>
                    <outputport name="result" id="v95" />
                    <functor name="NumberMap">
                        <property key="dff.functor.alias" value="numberMap940" />
                        <inputport name="map" peerid="v137" />
                        <inputport name="mapNumber">1</inputport>
                    </functor>
                    <functor name="NumberMap">
                        <property key="dff.functor.alias" value="numberMap941" />
                        <inputport name="map" peerid="v93" />
                        <inputport name="mapNumber">2</inputport>
                    </functor>
                    <functor name="NumberMap">
                        <property key="dff.functor.alias" value="numberMap942" />
                        <inputport name="map" peerid="v90" />
                        <inputport name="mapNumber">3</inputport>
                    </functor>
                </containerfunctor>
                <containerfunctor name="CalculateMap">
                    <property key="dff.container.collapsed" value="no" />
                    <property key="dff.functor.alias" value="calculateMap1144" />
                    <inputport name="expression">[&#x0A;    if i4 = 0 then&#x0A;        if i1 - i2 &gt; 0 then&#x0A;            (i1 - i2) / i3&#x0A;        else &#x0A;            0&#x0A;    else &#x0A;        0&#x0A;]</inputport>
                    <inputport name="cellType">.float32</inputport>
                    <inputport name="nullValue">.default</inputport>
                    <inputport name="resultIsSparse">.no</inputport>
                    <inputport name="resultFormat">.none</inputport>
                    <outputport name="result" id="v96" />
                    <functor name="NumberMap">
                        <property key="dff.functor.alias" value="numberMap952" />
                        <inputport name="map" peerid="v40" />
                        <inputport name="mapNumber">1</inputport>
                    </functor>
                    <functor name="NumberMap">
                        <property key="dff.functor.alias" value="numberMap953" />
                        <inputport name="map" peerid="v131" />
                        <inputport name="mapNumber">2</inputport>
                    </functor>
                    <functor name="NumberMap">
                        <property key="dff.functor.alias" value="numberMap954" />
                        <inputport name="map" peerid="v130" />
                        <inputport name="mapNumber">3</inputport>
                    </functor>
                    <functor name="NumberMap">
                        <property key="dff.functor.alias" value="numberMap1645" />
                        <inputport name="map" peerid="v112" />
                        <inputport name="mapNumber">4</inputport>
                    </functor>
                </containerfunctor>
                <containerfunctor name="CalculateMap">
                    <property key="dff.container.collapsed" value="no" />
                    <property key="dff.functor.alias" value="calculateMap1145" />
                    <inputport name="expression">[&#x0A;    if isNull(i1) then&#x0A;        null&#x0A;    else &#x0A;        i1 * i3&#x0A;]</inputport>
                    <inputport name="cellType">.float32</inputport>
                    <inputport name="nullValue">.default</inputport>
                    <inputport name="resultIsSparse">.no</inputport>
                    <inputport name="resultFormat">.none</inputport>
                    <outputport name="result" id="v97" />
                    <functor name="NumberMap">
                        <property key="dff.functor.alias" value="numberMap956" />
                        <inputport name="map" peerid="v96" />
                        <inputport name="mapNumber">1</inputport>
                    </functor>
                    <functor name="NumberMap">
                        <property key="dff.functor.alias" value="numberMap957" />
                        <inputport name="map" peerid="v130" />
                        <inputport name="mapNumber">3</inputport>
                    </functor>
                </containerfunctor>
                <containerfunctor name="CalculateMap">
                    <property key="dff.container.collapsed" value="no" />
                    <property key="dff.functor.alias" value="calculateMap1146" />
                    <property key="dff.functor.comment" value="This takes 0 balance to 1, so it keeps growing" />
                    <inputport name="expression">[&#x0A;    if i1 &lt;= 0 then&#x0A;        2&#x0A;    else &#x0A;        i1&#x0A;]</inputport>
                    <inputport name="cellType">.float32</inputport>
                    <inputport name="nullValue">.default</inputport>
                    <inputport name="resultIsSparse">.no</inputport>
                    <inputport name="resultFormat">.none</inputport>
                    <outputport name="result" id="v98" />
                    <functor name="NumberMap">
                        <property key="dff.functor.alias" value="numberMap959" />
                        <inputport name="map" peerid="v131" />
                        <inputport name="mapNumber">1</inputport>
                    </functor>
                </containerfunctor>
                <containerfunctor name="CalculateMap">
                    <property key="dff.container.collapsed" value="no" />
                    <property key="dff.functor.alias" value="calculateMap1148" />
                    <inputport name="expression">[&#x0A;    if i2 &gt; 0 then&#x0A;        i1&#x0A;    else &#x0A;        i1 * 0&#x0A;]</inputport>
                    <inputport name="cellType">.float32</inputport>
                    <inputport name="nullValue">.default</inputport>
                    <inputport name="resultIsSparse">.no</inputport>
                    <inputport name="resultFormat">.none</inputport>
                    <outputport name="result" id="v99" />
                    <functor name="NumberMap">
                        <property key="dff.functor.alias" value="numberMap964" />
                        <inputport name="map" peerid="v98" />
                        <inputport name="mapNumber">1</inputport>
                    </functor>
                    <functor name="NumberMap">
                        <property key="dff.functor.alias" value="numberMap965" />
                        <inputport name="map" peerid="v97" />
                        <inputport name="mapNumber">2</inputport>
                    </functor>
                </containerfunctor>
                <containerfunctor name="CalculateValue">
                    <property key="dff.container.collapsed" value="no" />
                    <property key="dff.functor.alias" value="calculateValue1149" />
                    <inputport name="expression">[&#x0A;    t1[12]&#x0A;]</inputport>
                    <inputport name="defaultValue">.none</inputport>
                    <outputport name="result" id="v100" />
                    <functor name="NumberTable">
                        <property key="dff.functor.alias" value="numberTable1150" />
                        <inputport name="table" peerid="v46" />
                        <inputport name="tableNumber">1</inputport>
                    </functor>
                </containerfunctor>
                <containerfunctor name="CalculateValue">
                    <property key="dff.container.collapsed" value="no" />
                    <property key="dff.functor.alias" value="calculateValue1151" />
                    <inputport name="expression">[&#x0A;    t1[12]&#x0A;]</inputport>
                    <inputport name="defaultValue">.none</inputport>
                    <outputport name="result" id="v101" />
                    <functor name="NumberTable">
                        <property key="dff.functor.alias" value="numberTable1152" />
                        <inputport name="table" peerid="v48" />
                        <inputport name="tableNumber">1</inputport>
                    </functor>
                </containerfunctor>
                <containerfunctor name="CalculateValue">
                    <property key="dff.container.collapsed" value="no" />
                    <property key="dff.functor.alias" value="calculateValue1153" />
                    <inputport name="expression">[&#x0A;    t1[12]&#x0A;]</inputport>
                    <inputport name="defaultValue">.none</inputport>
                    <outputport name="result" id="v102" />
                    <functor name="NumberTable">
                        <property key="dff.functor.alias" value="numberTable1154" />
                        <inputport name="table" peerid="v45" />
                        <inputport name="tableNumber">1</inputport>
                    </functor>
                </containerfunctor>
                <containerfunctor name="CalculateValue">
                    <property key="dff.container.collapsed" value="no" />
                    <property key="dff.functor.alias" value="calculateValue1155" />
                    <inputport name="expression">[&#x0A;    t1[12]&#x0A;]</inputport>
                    <inputport name="defaultValue">.none</inputport>
                    <outputport name="result" id="v103" />
                    <functor name="NumberTable">
                        <property key="dff.functor.alias" value="numberTable1156" />
                        <inputport name="table" peerid="v47" />
                        <inputport name="tableNumber">1</inputport>
                    </functor>
                </containerfunctor>
                <containerfunctor name="CalculateValue">
                    <property key="dff.container.collapsed" value="no" />
                    <property key="dff.functor.alias" value="calculateValue1157" />
                    <inputport name="expression">[&#x0A;    t1[12]&#x0A;]</inputport>
                    <inputport name="defaultValue">.none</inputport>
                    <outputport name="result" id="v104" />
                    <functor name="NumberTable">
                        <property key="dff.functor.alias" value="numberTable1158" />
                        <inputport name="table" peerid="v49" />
                        <inputport name="tableNumber">1</inputport>
                    </functor>
                </containerfunctor>
                <containerfunctor name="CalculateValue">
                    <property key="dff.container.collapsed" value="no" />
                    <property key="dff.functor.alias" value="calculateValue1159" />
                    <inputport name="expression">[&#x0A;    t1[12]&#x0A;]</inputport>
                    <inputport name="defaultValue">.none</inputport>
                    <outputport name="result" id="v105" />
                    <functor name="NumberTable">
                        <property key="dff.functor.alias" value="numberTable1160" />
                        <inputport name="table" peerid="v50" />
                        <inputport name="tableNumber">1</inputport>
                    </functor>
                </containerfunctor>
                <containerfunctor name="CalculateMap">
                    <property key="dff.container.collapsed" value="no" />
                    <property key="dff.functor.alias" value="calculateMap1161" />
                    <inputport name="expression">[&#x0A;    i1 + i2&#x0A;]</inputport>
                    <inputport name="cellType">.float32</inputport>
                    <inputport name="nullValue">.default</inputport>
                    <inputport name="resultIsSparse">.no</inputport>
                    <inputport name="resultFormat">.none</inputport>
                    <outputport name="result" id="v106" />
                    <functor name="NumberMap">
                        <property key="dff.functor.alias" value="numberMap1005" />
                        <inputport name="map" peerid="v56" />
                        <inputport name="mapNumber">1</inputport>
                    </functor>
                    <functor name="NumberMap">
                        <property key="dff.functor.alias" value="numberMap1006" />
                        <inputport name="map" peerid="v180" />
                        <inputport name="mapNumber">2</inputport>
                    </functor>
                </containerfunctor>
                <containerfunctor name="CalculateMap">
                    <property key="dff.container.collapsed" value="no" />
                    <property key="dff.functor.alias" value="calculateMap1162" />
                    <inputport name="expression">[&#x0A;    i1 + i2&#x0A;]</inputport>
                    <inputport name="cellType">.float32</inputport>
                    <inputport name="nullValue">.default</inputport>
                    <inputport name="resultIsSparse">.no</inputport>
                    <inputport name="resultFormat">.none</inputport>
                    <outputport name="result" id="v107" />
                    <functor name="NumberMap">
                        <property key="dff.functor.alias" value="numberMap1008" />
                        <inputport name="map" peerid="v57" />
                        <inputport name="mapNumber">1</inputport>
                    </functor>
                    <functor name="NumberMap">
                        <property key="dff.functor.alias" value="numberMap1009" />
                        <inputport name="map" peerid="v130" />
                        <inputport name="mapNumber">2</inputport>
                    </functor>
                </containerfunctor>
                <containerfunctor name="CalcWOfEProbabilityMap">
                    <property key="dff.functor.alias" value="calcWOfEProbabilityMap5083" />
                    <property key="viewer.probabilities" value="yes" />
                    <inputport name="landscape" peerid="v72" />
                    <inputport name="weights" peerid="v304" />
                    <inputport name="transitions">[ 0-&gt;1 ]</inputport>
                    <inputport name="cellType">.uint8</inputport>
                    <inputport name="nullValue">.default</inputport>
                    <outputport name="probabilities" id="v108" />
                    <functor name="NameMap">
                        <property key="dff.functor.alias" value="nameMap5119" />
                        <inputport name="map" peerid="v303" />
                        <inputport name="mapName">&quot;elevation&quot;</inputport>
                    </functor>
                    <functor name="NameMap">
                        <property key="dff.functor.alias" value="nameMap5121" />
                        <inputport name="map" peerid="v301" />
                        <inputport name="mapName">&quot;roads&quot;</inputport>
                    </functor>
                    <functor name="NameMap">
                        <property key="dff.functor.alias" value="nameMap5123" />
                        <inputport name="map" peerid="v305" />
                        <inputport name="mapName">&quot;slope&quot;</inputport>
                    </functor>
                    <functor name="NameMap">
                        <property key="dff.functor.alias" value="nameMap5125" />
                        <inputport name="map" peerid="v302" />
                        <inputport name="mapName">&quot;rivers&quot;</inputport>
                    </functor>
                    <functor name="NameMap">
                        <property key="dff.functor.alias" value="nameMap3984" />
                        <inputport name="map" peerid="v310" />
                        <inputport name="mapName">&quot;NPA&quot;</inputport>
                    </functor>
                </containerfunctor>
                <containerfunctor name="SelectTransitionMatrix">
                    <property key="dff.container.collapsed" value="no" />
                    <property key="dff.functor.alias" value="selectTransitionMatrix5077" />
                    <property key="dff.functor.comment" value="Loss" />
                    <property key="viewer.transitionmatrix" value="yes" />
                    <inputport name="step" peerid="v39" />
                    <outputport name="transitionMatrix" id="v109" />
                    <functor name="NumberTransitionMatrix">
                        <property key="dff.functor.alias" value="numberTransitionMatrix5127" />
                        <inputport name="transitionMatrix" peerid="v229" />
                        <inputport name="matrixNumber">1</inputport>
                    </functor>
                </containerfunctor>
                <containerfunctor name="SelectTransitionMatrix">
                    <property key="dff.container.collapsed" value="no" />
                    <property key="dff.functor.alias" value="selectTransitionMatrix5079" />
                    <property key="viewer.transitionmatrix" value="yes" />
                    <inputport name="step" peerid="v39" />
                    <outputport name="transitionMatrix" id="v110" />
                    <functor name="NumberTransitionMatrix">
                        <property key="dff.functor.alias" value="numberTransitionMatrix5129" />
                        <inputport name="transitionMatrix" peerid="v230" />
                        <inputport name="matrixNumber">1</inputport>
                    </functor>
                </containerfunctor>
                <containerfunctor name="CalcWOfEProbabilityMap">
                    <property key="dff.functor.alias" value="calcWOfEProbabilityMap5085" />
                    <property key="viewer.probabilities" value="yes" />
                    <inputport name="landscape" peerid="v74" />
                    <inputport name="weights" peerid="v306" />
                    <inputport name="transitions">[ 0-&gt;1 ]</inputport>
                    <inputport name="cellType">.float32</inputport>
                    <inputport name="nullValue">.default</inputport>
                    <outputport name="probabilities" id="v111" />
                    <functor name="NameMap">
                        <property key="dff.functor.alias" value="nameMap5111" />
                        <inputport name="map" peerid="v305" />
                        <inputport name="mapName">&quot;slope&quot;</inputport>
                    </functor>
                    <functor name="NameMap">
                        <property key="dff.functor.alias" value="nameMap5113" />
                        <inputport name="map" peerid="v302" />
                        <inputport name="mapName">&quot;rivers&quot;</inputport>
                    </functor>
                    <functor name="NameMap">
                        <property key="dff.functor.alias" value="nameMap5115" />
                        <inputport name="map" peerid="v303" />
                        <inputport name="mapName">&quot;elevation&quot;</inputport>
                    </functor>
                    <functor name="NameMap">
                        <property key="dff.functor.alias" value="nameMap5117" />
                        <inputport name="map" peerid="v301" />
                        <inputport name="mapName">&quot;roads&quot;</inputport>
                    </functor>
                </containerfunctor>
                <containerfunctor name="CalculateMap">
                    <property key="dff.functor.alias" value="calculateMap5046" />
                    <property key="viewer.result" value="yes" />
                    <inputport name="expression">[&#x0A;    if i2 = 1 or i4 = 1 then&#x0A;        0&#x0A;    else &#x0A;        i3 * i1&#x0A;]</inputport>
                    <inputport name="cellType">.float32</inputport>
                    <inputport name="nullValue">.default</inputport>
                    <inputport name="resultIsSparse">.no</inputport>
                    <inputport name="resultFormat">.none</inputport>
                    <outputport name="result" id="v112" />
                    <functor name="NumberMap">
                        <property key="dff.functor.alias" value="numberMap5048" />
                        <inputport name="map" peerid="v85" />
                        <inputport name="mapNumber">1</inputport>
                    </functor>
                    <functor name="NumberMap">
                        <property key="dff.functor.alias" value="numberMap5050" />
                        <inputport name="map" peerid="v114" />
                        <inputport name="mapNumber">2</inputport>
                    </functor>
                    <functor name="NumberMap">
                        <property key="dff.functor.alias" value="numberMap5054" />
                        <inputport name="map" peerid="v40" />
                        <inputport name="mapNumber">3</inputport>
                    </functor>
                    <functor name="NumberMap">
                        <property key="dff.functor.alias" value="numberMap5122" />
                        <inputport name="map" peerid="v196" />
                        <inputport name="mapNumber">4</inputport>
                    </functor>
                </containerfunctor>
                <containerfunctor name="CalculateCategoricalMap">
                    <property key="dff.functor.alias" value="calculateCategoricalMap5042" />
                    <inputport name="expression">[&#x0A;    i1 - i2&#x0A;]</inputport>
                    <inputport name="cellType">.int32</inputport>
                    <inputport name="nullValue">.default</inputport>
                    <inputport name="resultIsSparse">.no</inputport>
                    <inputport name="resultFormat">.none</inputport>
                    <outputport name="result" id="v113" />
                    <functor name="NumberMap">
                        <property key="dff.functor.alias" value="numberMap5048" />
                        <inputport name="map" peerid="v70" />
                        <inputport name="mapNumber">1</inputport>
                    </functor>
                    <functor name="NumberMap">
                        <property key="dff.functor.alias" value="numberMap3988" />
                        <inputport name="map" peerid="v72" />
                        <inputport name="mapNumber">2</inputport>
                    </functor>
                </containerfunctor>
                <containerfunctor name="CalculateCategoricalMap">
                    <property key="dff.functor.alias" value="calculateCategoricalMap5074" />
                    <inputport name="expression">[&#x0A;    i1 - i2&#x0A;]</inputport>
                    <inputport name="cellType">.int32</inputport>
                    <inputport name="nullValue">.default</inputport>
                    <inputport name="resultIsSparse">.no</inputport>
                    <inputport name="resultFormat">.none</inputport>
                    <outputport name="result" id="v114" />
                    <functor name="NumberMap">
                        <property key="dff.functor.alias" value="numberMap5066" />
                        <inputport name="map" peerid="v179" />
                        <inputport name="mapNumber">1</inputport>
                    </functor>
                    <functor name="NumberMap">
                        <property key="dff.functor.alias" value="numberMap3993" />
                        <inputport name="map" peerid="v74" />
                        <inputport name="mapNumber">2</inputport>
                    </functor>
                </containerfunctor>
                <containerfunctor name="CalculateMap">
                    <property key="dff.functor.alias" value="calculateMap5119" />
                    <inputport name="expression">[&#x0A;    if i2 &lt; v1 and i3 != 1 then&#x0A;        0&#x0A;    else &#x0A;        i1&#x0A;]</inputport>
                    <inputport name="cellType">.float32</inputport>
                    <inputport name="nullValue">.default</inputport>
                    <inputport name="resultIsSparse">.no</inputport>
                    <inputport name="resultFormat">.none</inputport>
                    <outputport name="result" id="v115" />
                    <functor name="NumberMap">
                        <property key="dff.functor.alias" value="numberMap5121" />
                        <inputport name="map" peerid="v160" />
                        <inputport name="mapNumber">1</inputport>
                    </functor>
                    <functor name="NumberMap">
                        <property key="dff.functor.alias" value="numberMap5125" />
                        <inputport name="map" peerid="v40" />
                        <inputport name="mapNumber">2</inputport>
                    </functor>
                    <functor name="NumberValue">
                        <property key="dff.functor.alias" value="numberValue5127" />
                        <inputport name="value" peerid="v275" />
                        <inputport name="valueNumber">1</inputport>
                    </functor>
                    <functor name="NumberMap">
                        <property key="dff.functor.alias" value="numberMap5137" />
                        <inputport name="map" peerid="v196" />
                        <inputport name="mapNumber">3</inputport>
                    </functor>
                </containerfunctor>
                <containerfunctor name="CalculateMap">
                    <property key="dff.functor.alias" value="calculateMap5133" />
                    <property key="dff.functor.comment" value="It adds a minimum biomass threshold for a pixel to be harvestable." />
                    <property key="viewer.result" value="yes" />
                    <inputport name="expression">[&#x0A;    if i2 &lt; v1 then&#x0A;        0&#x0A;    else &#x0A;        i1&#x0A;]</inputport>
                    <inputport name="cellType">.float32</inputport>
                    <inputport name="nullValue">.default</inputport>
                    <inputport name="resultIsSparse">.no</inputport>
                    <inputport name="resultFormat">.none</inputport>
                    <outputport name="result" id="v116" />
                    <functor name="NumberMap">
                        <property key="dff.functor.alias" value="numberMap5135" />
                        <inputport name="map" peerid="v170" />
                        <inputport name="mapNumber">1</inputport>
                    </functor>
                    <functor name="NumberValue">
                        <property key="dff.functor.alias" value="numberValue5139" />
                        <inputport name="value" peerid="v274" />
                        <inputport name="valueNumber">1</inputport>
                    </functor>
                    <functor name="NumberMap">
                        <property key="dff.functor.alias" value="numberMap5123" />
                        <inputport name="map" peerid="v40" />
                        <inputport name="mapNumber">2</inputport>
                    </functor>
                </containerfunctor>
                <containerfunctor name="CalculateMap">
                    <property key="dff.functor.alias" value="calculateMap1863" />
                    <inputport name="expression">[&#x0A;    i1 + i2&#x0A;]</inputport>
                    <inputport name="cellType">.float32</inputport>
                    <inputport name="nullValue">.default</inputport>
                    <inputport name="resultIsSparse">.no</inputport>
                    <inputport name="resultFormat">.none</inputport>
                    <outputport name="result" id="v117" />
                    <functor name="NumberMap">
                        <property key="dff.functor.alias" value="numberMap1859" />
                        <inputport name="map" peerid="v77" />
                        <inputport name="mapNumber">1</inputport>
                    </functor>
                    <functor name="NumberMap">
                        <property key="dff.functor.alias" value="numberMap1861" />
                        <inputport name="map" peerid="v112" />
                        <inputport name="mapNumber">2</inputport>
                    </functor>
                </containerfunctor>
                <containerfunctor name="CalculateMap">
                    <property key="dff.functor.alias" value="calculateMap2029" />
                    <inputport name="expression">[&#x0A;    i1 + i2&#x0A;]</inputport>
                    <inputport name="cellType">.float32</inputport>
                    <inputport name="nullValue">.default</inputport>
                    <inputport name="resultIsSparse">.no</inputport>
                    <inputport name="resultFormat">.none</inputport>
                    <outputport name="result" id="v118" />
                    <functor name="NumberMap">
                        <property key="dff.functor.alias" value="numberMap2031" />
                        <inputport name="map" peerid="v78" />
                        <inputport name="mapNumber">1</inputport>
                    </functor>
                    <functor name="NumberMap">
                        <property key="dff.functor.alias" value="numberMap2033" />
                        <inputport name="map" peerid="v95" />
                        <inputport name="mapNumber">2</inputport>
                    </functor>
                </containerfunctor>
                <containerfunctor name="CalculateMap">
                    <property key="dff.functor.alias" value="calculateMap2066" />
                    <inputport name="expression">[&#x0A;    i1 + i2&#x0A;]</inputport>
                    <inputport name="cellType">.float32</inputport>
                    <inputport name="nullValue">.default</inputport>
                    <inputport name="resultIsSparse">.no</inputport>
                    <inputport name="resultFormat">.none</inputport>
                    <outputport name="result" id="v119" />
                    <functor name="NumberMap">
                        <property key="dff.functor.alias" value="numberMap2068" />
                        <inputport name="map" peerid="v79" />
                        <inputport name="mapNumber">1</inputport>
                    </functor>
                    <functor name="NumberMap">
                        <property key="dff.functor.alias" value="numberMap2070" />
                        <inputport name="map" peerid="v112" />
                        <inputport name="mapNumber">2</inputport>
                    </functor>
                </containerfunctor>
                <containerfunctor name="Group">
                    <property key="dff.functor.alias" value="group1752" />
                    <functor name="SetLookupTableValue">
                        <property key="dff.functor.alias" value="setLookupTableValue1722" />
                        <property key="viewer.updatedtable" value="yes" />
                        <inputport name="table" peerid="v80" />
                        <inputport name="key" peerid="v81" />
                        <inputport name="value" peerid="v125" />
                        <outputport name="updatedTable" id="v120" />
                    </functor>
                    <functor name="SetLookupTableValue">
                        <property key="dff.functor.alias" value="setLookupTableValue1762" />
                        <property key="viewer.updatedtable" value="yes" />
                        <inputport name="table" peerid="v82" />
                        <inputport name="key" peerid="v81" />
                        <inputport name="value" peerid="v124" />
                        <outputport name="updatedTable" id="v121" />
                    </functor>
                    <functor name="SetLookupTableValue">
                        <property key="dff.functor.alias" value="setLookupTableValue1808" />
                        <property key="viewer.updatedtable" value="yes" />
                        <inputport name="table" peerid="v84" />
                        <inputport name="key" peerid="v81" />
                        <inputport name="value" peerid="v127" />
                        <outputport name="updatedTable" id="v122" />
                    </functor>
                    <functor name="SetLookupTableValue">
                        <property key="dff.functor.alias" value="setLookupTableValue1854" />
                        <property key="viewer.updatedtable" value="yes" />
                        <inputport name="table" peerid="v83" />
                        <inputport name="key" peerid="v81" />
                        <inputport name="value" peerid="v126" />
                        <outputport name="updatedTable" id="v123" />
                    </functor>
                    <containerfunctor name="CalculateValue">
                        <property key="dff.container.collapsed" value="no" />
                        <property key="dff.functor.alias" value="calculateValue1754" />
                        <property key="dff.functor.comment" value="Consumo W para toda el area de análisis, independientemente de si seleccionaron localidades de interés" />
                        <property key="viewer.result" value="yes" />
                        <inputport name="expression">[&#x0A;    v2&#x0A;]</inputport>
                        <inputport name="defaultValue">.none</inputport>
                        <outputport name="result" id="v124" />
                        <functor name="NumberValue">
                            <property key="dff.functor.alias" value="numberValue1758" />
                            <inputport name="value" peerid="v145" />
                            <inputport name="valueNumber">2</inputport>
                        </functor>
                    </containerfunctor>
                    <containerfunctor name="CalculateValue">
                        <property key="dff.container.collapsed" value="no" />
                        <property key="dff.functor.alias" value="calculateValue1716" />
                        <property key="dff.functor.comment" value="Consumo W para las localidades de interes. Es igual al consumo total del area si no se seleccionaron localiddaes de interés" />
                        <property key="viewer.result" value="yes" />
                        <inputport name="expression">[&#x0A;    v2&#x0A;]</inputport>
                        <inputport name="defaultValue">.none</inputport>
                        <outputport name="result" id="v125" />
                        <functor name="NumberValue">
                            <property key="dff.functor.alias" value="numberValue1726" />
                            <inputport name="value" peerid="v144" />
                            <inputport name="valueNumber">2</inputport>
                        </functor>
                    </containerfunctor>
                    <containerfunctor name="CalculateValue">
                        <property key="dff.container.collapsed" value="no" />
                        <property key="dff.functor.alias" value="calculateValue1804" />
                        <property key="dff.functor.comment" value="Consumo V para las localidades de interes. Es igual al consumo total del area si no se seleccionaron localidades de interés." />
                        <property key="viewer.result" value="yes" />
                        <inputport name="expression">[&#x0A;    v2&#x0A;]</inputport>
                        <inputport name="defaultValue">.none</inputport>
                        <outputport name="result" id="v126" />
                        <functor name="NumberValue">
                            <property key="dff.functor.alias" value="numberValue1814" />
                            <inputport name="value" peerid="v146" />
                            <inputport name="valueNumber">2</inputport>
                        </functor>
                    </containerfunctor>
                    <containerfunctor name="CalculateValue">
                        <property key="dff.container.collapsed" value="no" />
                        <property key="dff.functor.alias" value="calculateValue1806" />
                        <property key="dff.functor.comment" value="Consumo V para toda el area de análisis, independientemente de si seleccionaron localidades de interés." />
                        <property key="viewer.result" value="yes" />
                        <inputport name="expression">[&#x0A;    v2&#x0A;]</inputport>
                        <inputport name="defaultValue">.none</inputport>
                        <outputport name="result" id="v127" />
                        <functor name="NumberValue">
                            <property key="dff.functor.alias" value="numberValue1820" />
                            <inputport name="value" peerid="v147" />
                            <inputport name="valueNumber">2</inputport>
                        </functor>
                    </containerfunctor>
                </containerfunctor>
                <containerfunctor name="Group">
                    <property key="dff.functor.alias" value="group3907" />
                    <functor name="SaveMap">
                        <property key="dff.functor.alias" value="saveMap5135" />
                        <inputport name="map" peerid="v131" />
                        <inputport name="filename" peerid="v132" />
                        <inputport name="suffixDigits">2</inputport>
                        <inputport name="step" peerid="v39" />
                        <inputport name="useCompression">.yes</inputport>
                        <inputport name="workdir">.none</inputport>
                    </functor>
                    <functor name="SaveMap">
                        <property key="dff.functor.alias" value="saveMap5138" />
                        <inputport name="map" peerid="v130" />
                        <inputport name="filename" peerid="v133" />
                        <inputport name="suffixDigits">2</inputport>
                        <inputport name="step" peerid="v39" />
                        <inputport name="useCompression">.yes</inputport>
                        <inputport name="workdir">.none</inputport>
                    </functor>
                    <functor name="ExtractMapAttributes">
                        <property key="dff.functor.alias" value="extractMapAttributes3931" />
                        <property key="viewer.attributes" value="yes" />
                        <property key="viewer.layerattributes" value="yes" />
                        <inputport name="map" peerid="v130" />
                        <inputport name="extractDynamicAttributes">.yes</inputport>
                        <inputport name="extractStatisticalAttributes">.yes</inputport>
                        <outputport name="attributes" id="v128" />
                    </functor>
                    <functor name="ExtractMapAttributes">
                        <property key="dff.functor.alias" value="extractMapAttributes3928" />
                        <property key="viewer.attributes" value="yes" />
                        <property key="viewer.layerattributes" value="yes" />
                        <inputport name="map" peerid="v95" />
                        <inputport name="extractDynamicAttributes">.yes</inputport>
                        <inputport name="extractStatisticalAttributes">.yes</inputport>
                        <outputport name="attributes" id="v129" />
                    </functor>
                    <containerfunctor name="CalculateMap">
                        <property key="dff.container.collapsed" value="no" />
                        <property key="dff.functor.alias" value="calculateMap1141" />
                        <property key="dff.functor.comment" value="Only available stock is harvested, the rest is NOT collected and NOT accounted in fw use" />
                        <inputport name="expression">[&#x0A;    if i1 &gt; i2 then&#x0A;        i2&#x0A;    else &#x0A;        i1&#x0A;]</inputport>
                        <inputport name="cellType">.float32</inputport>
                        <inputport name="nullValue">.default</inputport>
                        <inputport name="resultIsSparse">.no</inputport>
                        <inputport name="resultFormat">.none</inputport>
                        <outputport name="result" id="v130" />
                        <functor name="NumberMap">
                            <property key="dff.functor.alias" value="numberMap944" />
                            <inputport name="map" peerid="v95" />
                            <inputport name="mapNumber">1</inputport>
                        </functor>
                        <functor name="NumberMap">
                            <property key="dff.functor.alias" value="numberMap945" />
                            <inputport name="map" peerid="v171" />
                            <inputport name="mapNumber">2</inputport>
                        </functor>
                    </containerfunctor>
                    <containerfunctor name="CalculateMap">
                        <property key="dff.container.collapsed" value="no" />
                        <property key="dff.functor.alias" value="calculateMap1142" />
                        <property key="dff.functor.comment" value="crecimiento del bosques DESPUES del balance entre oferta y demanda" />
                        <inputport name="expression">[&#x0A;    if isNull(i1) then&#x0A;        i2&#x0A;    else if i4 = 1 then&#x0A;        i2 + i3 - i1&#x0A;    else &#x0A;        i2 - i1&#x0A;]</inputport>
                        <inputport name="cellType">.float32</inputport>
                        <inputport name="nullValue">.default</inputport>
                        <inputport name="resultIsSparse">.no</inputport>
                        <inputport name="resultFormat">.none</inputport>
                        <outputport name="result" id="v131" />
                        <functor name="NumberMap">
                            <property key="dff.functor.alias" value="numberMap947" />
                            <inputport name="map" peerid="v130" />
                            <inputport name="mapNumber">1</inputport>
                        </functor>
                        <functor name="NumberMap">
                            <property key="dff.functor.alias" value="numberMap948" />
                            <inputport name="map" peerid="v171" />
                            <inputport name="mapNumber">2</inputport>
                        </functor>
                        <functor name="NumberMap">
                            <property key="dff.functor.alias" value="numberMap916" />
                            <inputport name="map" peerid="v90" />
                            <inputport name="mapNumber">3</inputport>
                        </functor>
                        <functor name="NumberMap">
                            <property key="dff.functor.alias" value="numberMap10905" />
                            <inputport name="map" peerid="v196" />
                            <inputport name="mapNumber">4</inputport>
                        </functor>
                    </containerfunctor>
                    <containerfunctor name="CalculateValue">
                        <property key="dff.functor.alias" value="calculateValue3934" />
                        <property key="viewer.result" value="yes" />
                        <inputport name="expression">[&#x0A;    if t1[12] &lt;= 0 then&#x0A;        1&#x0A;    else &#x0A;        t2[12] / t1[12]&#x0A;]</inputport>
                        <inputport name="defaultValue">.none</inputport>
                        <functor name="NumberTable">
                            <property key="dff.functor.alias" value="numberTable3936" />
                            <inputport name="table" peerid="v129" />
                            <inputport name="tableNumber">1</inputport>
                        </functor>
                        <functor name="NumberTable">
                            <property key="dff.functor.alias" value="numberTable3938" />
                            <inputport name="table" peerid="v128" />
                            <inputport name="tableNumber">2</inputport>
                        </functor>
                    </containerfunctor>
                    <containerfunctor name="CreateString">
                        <property key="dff.functor.alias" value="createString1814" />
                        <property key="viewer.result" value="yes" />
                        <inputport name="format">&quot;debugging_&lt;v1&gt;/Growth_less_harv.tif&quot;</inputport>
                        <outputport name="result" id="v132" />
                        <functor name="NumberValue">
                            <property key="dff.functor.alias" value="numberValue1816" />
                            <inputport name="value" peerid="v38" />
                            <inputport name="valueNumber">1</inputport>
                        </functor>
                    </containerfunctor>
                    <containerfunctor name="CreateString">
                        <property key="dff.functor.alias" value="createString1822" />
                        <inputport name="format">&quot;debugging_&lt;v1&gt;/Harvest_tot.tif&quot;</inputport>
                        <outputport name="result" id="v133" />
                        <functor name="NumberValue">
                            <property key="dff.functor.alias" value="numberValue1830" />
                            <inputport name="value" peerid="v38" />
                            <inputport name="valueNumber">1</inputport>
                        </functor>
                    </containerfunctor>
                </containerfunctor>
                <containerfunctor name="IfThen">
                    <property key="dff.functor.alias" value="ifThen3966" />
                    <inputport name="condition" peerid="v136" />
                    <functor name="LoadMap">
                        <property key="dff.functor.alias" value="loadMap3983" />
                        <inputport name="filename">&quot;LULCC/TempRaster/AnnLoss.tif&quot;</inputport>
                        <inputport name="nullValue">.none</inputport>
                        <inputport name="loadAsSparse">.no</inputport>
                        <inputport name="suffixDigits">2</inputport>
                        <inputport name="step" peerid="v39" />
                        <inputport name="workdir">.none</inputport>
                        <outputport name="map" id="v134" />
                    </functor>
                </containerfunctor>
                <containerfunctor name="IfNotThen">
                    <property key="dff.functor.alias" value="ifNotThen3968" />
                    <inputport name="condition" peerid="v136" />
                    <containerfunctor name="CalculateMap">
                        <property key="dff.functor.alias" value="calculateMap3977" />
                        <inputport name="expression">[&#x0A;    i1&#x0A;]</inputport>
                        <inputport name="cellType">.int32</inputport>
                        <inputport name="nullValue">.default</inputport>
                        <inputport name="resultIsSparse">.no</inputport>
                        <inputport name="resultFormat">.none</inputport>
                        <outputport name="result" id="v135" />
                        <functor name="NumberMap">
                            <property key="dff.functor.alias" value="numberMap3979" />
                            <inputport name="map" peerid="v113" />
                            <inputport name="mapNumber">1</inputport>
                        </functor>
                    </containerfunctor>
                </containerfunctor>
                <containerfunctor name="CalculateValue">
                    <property key="dff.functor.alias" value="calculateValue3970" />
                    <inputport name="expression">[&#x0A;    if v3 = 1 then&#x0A;        if v1 &lt;= v2 then&#x0A;            1&#x0A;        else &#x0A;            0&#x0A;    else &#x0A;        0&#x0A;]</inputport>
                    <inputport name="defaultValue">.none</inputport>
                    <outputport name="result" id="v136" />
                    <functor name="NumberValue">
                        <property key="dff.functor.alias" value="numberValue3972" />
                        <inputport name="value" peerid="v75" />
                        <inputport name="valueNumber">1</inputport>
                    </functor>
                    <functor name="NumberValue">
                        <property key="dff.functor.alias" value="numberValue3976" />
                        <inputport name="value" peerid="v254" />
                        <inputport name="valueNumber">2</inputport>
                    </functor>
                    <functor name="NumberValue">
                        <property key="dff.functor.alias" value="numberValue1825" />
                        <inputport name="value" peerid="v247" />
                        <inputport name="valueNumber">3</inputport>
                    </functor>
                </containerfunctor>
                <containerfunctor name="CalculateMap">
                    <property key="dff.functor.alias" value="calculateMap3970" />
                    <inputport name="expression">[&#x0A;    if i3 = 1 then&#x0A;        i1&#x0A;    else if i2 &gt; 0 and i3 = 0 then&#x0A;        if i2 * v1 &gt;= i1 then&#x0A;            0&#x0A;        else &#x0A;            i1 - i2 * v1&#x0A;    else &#x0A;        i1&#x0A;]</inputport>
                    <inputport name="cellType">.float32</inputport>
                    <inputport name="nullValue">.default</inputport>
                    <inputport name="resultIsSparse">.no</inputport>
                    <inputport name="resultFormat">.none</inputport>
                    <outputport name="result" id="v137" />
                    <functor name="NumberMap">
                        <property key="dff.functor.alias" value="numberMap3972" />
                        <inputport name="map" peerid="v94" />
                        <inputport name="mapNumber">1</inputport>
                    </functor>
                    <functor name="NumberMap">
                        <property key="dff.functor.alias" value="numberMap3974" />
                        <inputport name="map" peerid="v139" />
                        <inputport name="mapNumber">2</inputport>
                    </functor>
                    <functor name="NumberMap">
                        <property key="dff.functor.alias" value="numberMap3976" />
                        <inputport name="map" peerid="v114" />
                        <inputport name="mapNumber">3</inputport>
                    </functor>
                    <functor name="NumberValue">
                        <property key="dff.functor.alias" value="numberValue5099" />
                        <inputport name="value" peerid="v223" />
                        <inputport name="valueNumber">1</inputport>
                    </functor>
                </containerfunctor>
                <containerfunctor name="CalculateMap">
                    <property key="dff.functor.alias" value="calculateMap3985" />
                    <inputport name="expression">[&#x0A;    if i3 = 1 then&#x0A;        i1&#x0A;    else if i2 &gt; 0 and i3 = 0 then&#x0A;        if i2 * v1 &gt;= i1 then&#x0A;            0&#x0A;        else &#x0A;            i1 - i2 * v1&#x0A;    else &#x0A;        i1&#x0A;]</inputport>
                    <inputport name="cellType">.float32</inputport>
                    <inputport name="nullValue">.default</inputport>
                    <inputport name="resultIsSparse">.no</inputport>
                    <inputport name="resultFormat">.none</inputport>
                    <outputport name="result" id="v138" />
                    <functor name="NumberMap">
                        <property key="dff.functor.alias" value="numberMap3987" />
                        <inputport name="map" peerid="v114" />
                        <inputport name="mapNumber">3</inputport>
                    </functor>
                    <functor name="NumberMap">
                        <property key="dff.functor.alias" value="numberMap3989" />
                        <inputport name="map" peerid="v139" />
                        <inputport name="mapNumber">2</inputport>
                    </functor>
                    <functor name="NumberMap">
                        <property key="dff.functor.alias" value="numberMap3991" />
                        <inputport name="map" peerid="v87" />
                        <inputport name="mapNumber">1</inputport>
                    </functor>
                    <functor name="NumberValue">
                        <property key="dff.functor.alias" value="numberValue5097" />
                        <inputport name="value" peerid="v224" />
                        <inputport name="valueNumber">1</inputport>
                    </functor>
                </containerfunctor>
                <containerfunctor name="CalculateMap">
                    <property key="dff.functor.alias" value="calculateMap3976" />
                    <inputport name="expression">[&#x0A;    nbAverage(i1, v1, v1)&#x0A;]</inputport>
                    <inputport name="cellType">.float32</inputport>
                    <inputport name="nullValue">.default</inputport>
                    <inputport name="resultIsSparse">.no</inputport>
                    <inputport name="resultFormat">.none</inputport>
                    <outputport name="result" id="v139" />
                    <functor name="NumberMap">
                        <property key="dff.functor.alias" value="numberMap3981" />
                        <inputport name="map" peerid="v112" />
                        <inputport name="mapNumber">1</inputport>
                    </functor>
                    <functor name="NumberValue">
                        <property key="dff.functor.alias" value="numberValue3981" />
                        <inputport name="value" peerid="v255" />
                        <inputport name="valueNumber">1</inputport>
                    </functor>
                </containerfunctor>
                <containerfunctor name="Group">
                    <property key="dff.container.collapsed" value="no" />
                    <property key="dff.functor.alias" value="group1830" />
                    <functor name="ExtractLookupTableAttributes">
                        <property key="dff.functor.alias" value="extractLookupTableAttributes3510" />
                        <property key="dff.functor.comment" value="calcula el consumo total V sumando el consumo de cada localidad. no olvidarse de prender el item 31 (ultima casilla)" />
                        <property key="viewer.attributes" value="yes" />
                        <inputport name="table" peerid="v153" />
                        <inputport name="extractStatisticalKeyAttributes">.no</inputport>
                        <inputport name="extractStatisticalValueAttributes">.no</inputport>
                        <inputport name="extractDynamicKeyValueAttributes">.yes</inputport>
                        <outputport name="attributes" id="v140" />
                    </functor>
                    <functor name="ExtractLookupTableAttributes">
                        <property key="dff.functor.alias" value="extractLookupTableAttributes7323" />
                        <property key="dff.functor.comment" value="suma el consumo V para toda el area de analisis" />
                        <property key="viewer.attributes" value="yes" />
                        <inputport name="table" peerid="v155" />
                        <inputport name="extractStatisticalKeyAttributes">.no</inputport>
                        <inputport name="extractStatisticalValueAttributes">.no</inputport>
                        <inputport name="extractDynamicKeyValueAttributes">.yes</inputport>
                        <outputport name="attributes" id="v141" />
                    </functor>
                    <functor name="ExtractLookupTableAttributes">
                        <property key="dff.functor.alias" value="extractLookupTableAttributes351" />
                        <property key="dff.functor.comment" value="calcula el consumo total W sumando el consumo de cada localidad. no olvidarse de prender el item 31 (ultima casilla)" />
                        <property key="viewer.attributes" value="yes" />
                        <inputport name="table" peerid="v152" />
                        <inputport name="extractStatisticalKeyAttributes">.no</inputport>
                        <inputport name="extractStatisticalValueAttributes">.no</inputport>
                        <inputport name="extractDynamicKeyValueAttributes">.yes</inputport>
                        <outputport name="attributes" id="v142" />
                    </functor>
                    <functor name="ExtractLookupTableAttributes">
                        <property key="dff.functor.alias" value="extractLookupTableAttributes7325" />
                        <property key="dff.functor.comment" value="suma el consumo W para toda el area de analisis" />
                        <property key="viewer.attributes" value="yes" />
                        <inputport name="table" peerid="v154" />
                        <inputport name="extractStatisticalKeyAttributes">.no</inputport>
                        <inputport name="extractStatisticalValueAttributes">.no</inputport>
                        <inputport name="extractDynamicKeyValueAttributes">.yes</inputport>
                        <outputport name="attributes" id="v143" />
                    </functor>
                    <containerfunctor name="CalculateValue">
                        <property key="dff.functor.alias" value="calculateValue1710" />
                        <property key="viewer.result" value="yes" />
                        <inputport name="expression">[&#x0A;    t1[31]&#x0A;]</inputport>
                        <inputport name="defaultValue">.none</inputport>
                        <outputport name="result" id="v144" />
                        <functor name="NumberTable">
                            <property key="dff.functor.alias" value="numberTable1714" />
                            <inputport name="table" peerid="v142" />
                            <inputport name="tableNumber">1</inputport>
                        </functor>
                    </containerfunctor>
                    <containerfunctor name="CalculateValue">
                        <property key="dff.functor.alias" value="calculateValue1748" />
                        <property key="viewer.result" value="yes" />
                        <inputport name="expression">[&#x0A;    t1[31]&#x0A;]</inputport>
                        <inputport name="defaultValue">.none</inputport>
                        <outputport name="result" id="v145" />
                        <functor name="NumberTable">
                            <property key="dff.functor.alias" value="numberTable1750" />
                            <inputport name="table" peerid="v143" />
                            <inputport name="tableNumber">1</inputport>
                        </functor>
                    </containerfunctor>
                    <containerfunctor name="CalculateValue">
                        <property key="dff.functor.alias" value="calculateValue1834" />
                        <property key="viewer.result" value="yes" />
                        <inputport name="expression">[&#x0A;    t1[31]&#x0A;]</inputport>
                        <inputport name="defaultValue">.none</inputport>
                        <outputport name="result" id="v146" />
                        <functor name="NumberTable">
                            <property key="dff.functor.alias" value="numberTable1838" />
                            <inputport name="table" peerid="v140" />
                            <inputport name="tableNumber">1</inputport>
                        </functor>
                    </containerfunctor>
                    <containerfunctor name="CalculateValue">
                        <property key="dff.functor.alias" value="calculateValue1836" />
                        <property key="viewer.result" value="yes" />
                        <inputport name="expression">[&#x0A;    t1[31]&#x0A;]</inputport>
                        <inputport name="defaultValue">.none</inputport>
                        <outputport name="result" id="v147" />
                        <functor name="NumberTable">
                            <property key="dff.functor.alias" value="numberTable1840" />
                            <inputport name="table" peerid="v141" />
                            <inputport name="tableNumber">1</inputport>
                        </functor>
                    </containerfunctor>
                </containerfunctor>
                <containerfunctor name="Group">
                    <property key="dff.container.collapsed" value="no" />
                    <property key="dff.functor.alias" value="group1605" />
                    <functor name="LookupTable">
                        <property key="dff.functor.alias" value="lookupTable4450" />
                        <property key="dff.functor.comment" value="Upload MARKETED (V: Vehicle) fuelwood consumption table: Key values must coincide with localities ID, while the value with actual consumption in tDM per year. It must be a csv file." />
                        <property key="viewer.object" value="yes" />
                        <inputport name="constant" peerid="v157" />
                        <outputport name="object" id="v148" />
                    </functor>
                    <functor name="LookupTable">
                        <property key="dff.functor.alias" value="lookupTable445" />
                        <property key="dff.functor.comment" value="Upload SELFGATHERED (W: walking) fuelwood consumption table: Key values must coincide with localities ID, while the value with actual consumption in tDM per year. It must be a csv file." />
                        <property key="viewer.object" value="yes" />
                        <inputport name="constant" peerid="v156" />
                        <outputport name="object" id="v149" />
                    </functor>
                    <functor name="LookupTable">
                        <property key="dff.functor.alias" value="lookupTable7289" />
                        <property key="dff.functor.comment" value="W fw consumption of analysis area, to calculate proportion of fw from deforestation to be reduced from localitites of interest" />
                        <property key="viewer.object" value="yes" />
                        <inputport name="constant" peerid="v159" />
                        <outputport name="object" id="v150" />
                    </functor>
                    <functor name="LookupTable">
                        <property key="dff.functor.alias" value="lookupTable7291" />
                        <property key="dff.functor.comment" value="V fw consumption of analysis area, to calculate proportion of fw from deforestation to be reduced from localitites of interest" />
                        <property key="viewer.object" value="yes" />
                        <inputport name="constant" peerid="v158" />
                        <outputport name="object" id="v151" />
                    </functor>
                    <containerfunctor name="CalculateLookupTable">
                        <property key="dff.functor.alias" value="calculateLookupTable1616" />
                        <property key="viewer.result" value="yes" />
                        <inputport name="expression">[&#x0A;    t1[line] / v1 * v2 * (100 - v3) / 100&#x0A;]</inputport>
                        <inputport name="keyName">.none</inputport>
                        <inputport name="valueName">.none</inputport>
                        <outputport name="result" id="v152" />
                        <functor name="NumberTable">
                            <property key="dff.functor.alias" value="numberTable1620" />
                            <inputport name="table" peerid="v149" />
                            <inputport name="tableNumber">1</inputport>
                        </functor>
                        <functor name="NumberValue">
                            <property key="dff.functor.alias" value="numberValue1626" />
                            <inputport name="value" peerid="v6" />
                            <inputport name="valueNumber">1</inputport>
                        </functor>
                        <functor name="NumberValue">
                            <property key="dff.functor.alias" value="numberValue1628" />
                            <inputport name="value" peerid="v5" />
                            <inputport name="valueNumber">2</inputport>
                        </functor>
                        <functor name="NumberValue">
                            <property key="dff.functor.alias" value="numberValue1716" />
                            <inputport name="value" peerid="v4" />
                            <inputport name="valueNumber">3</inputport>
                        </functor>
                    </containerfunctor>
                    <containerfunctor name="CalculateLookupTable">
                        <property key="dff.functor.alias" value="calculateLookupTable1614" />
                        <property key="viewer.result" value="yes" />
                        <inputport name="expression">[&#x0A;    t1[line] / v1 * v2 * (100 - v3) / 100&#x0A;]</inputport>
                        <inputport name="keyName">.none</inputport>
                        <inputport name="valueName">.none</inputport>
                        <outputport name="result" id="v153" />
                        <functor name="NumberTable">
                            <property key="dff.functor.alias" value="numberTable1618" />
                            <inputport name="table" peerid="v148" />
                            <inputport name="tableNumber">1</inputport>
                        </functor>
                        <functor name="NumberValue">
                            <property key="dff.functor.alias" value="numberValue1622" />
                            <inputport name="value" peerid="v6" />
                            <inputport name="valueNumber">1</inputport>
                        </functor>
                        <functor name="NumberValue">
                            <property key="dff.functor.alias" value="numberValue1624" />
                            <inputport name="value" peerid="v5" />
                            <inputport name="valueNumber">2</inputport>
                        </functor>
                        <functor name="NumberValue">
                            <property key="dff.functor.alias" value="numberValue1718" />
                            <inputport name="value" peerid="v4" />
                            <inputport name="valueNumber">3</inputport>
                        </functor>
                    </containerfunctor>
                    <containerfunctor name="CalculateLookupTable">
                        <property key="dff.functor.alias" value="calculateLookupTable7297" />
                        <property key="viewer.result" value="yes" />
                        <inputport name="expression">[&#x0A;    t1[line] / v1 * v2 * (100 - v3) / 100&#x0A;]</inputport>
                        <inputport name="keyName">.none</inputport>
                        <inputport name="valueName">.none</inputport>
                        <outputport name="result" id="v154" />
                        <functor name="NumberTable">
                            <property key="dff.functor.alias" value="numberTable7301" />
                            <inputport name="table" peerid="v150" />
                            <inputport name="tableNumber">1</inputport>
                        </functor>
                        <functor name="NumberValue">
                            <property key="dff.functor.alias" value="numberValue7305" />
                            <inputport name="value" peerid="v4" />
                            <inputport name="valueNumber">3</inputport>
                        </functor>
                        <functor name="NumberValue">
                            <property key="dff.functor.alias" value="numberValue7313" />
                            <inputport name="value" peerid="v6" />
                            <inputport name="valueNumber">1</inputport>
                        </functor>
                        <functor name="NumberValue">
                            <property key="dff.functor.alias" value="numberValue7319" />
                            <inputport name="value" peerid="v5" />
                            <inputport name="valueNumber">2</inputport>
                        </functor>
                    </containerfunctor>
                    <containerfunctor name="CalculateLookupTable">
                        <property key="dff.functor.alias" value="calculateLookupTable7295" />
                        <property key="viewer.result" value="yes" />
                        <inputport name="expression">[&#x0A;    t1[line] / v1 * v2 * (100 - v3) / 100&#x0A;]</inputport>
                        <inputport name="keyName">.none</inputport>
                        <inputport name="valueName">.none</inputport>
                        <outputport name="result" id="v155" />
                        <functor name="NumberTable">
                            <property key="dff.functor.alias" value="numberTable7299" />
                            <inputport name="table" peerid="v151" />
                            <inputport name="tableNumber">1</inputport>
                        </functor>
                        <functor name="NumberValue">
                            <property key="dff.functor.alias" value="numberValue7307" />
                            <inputport name="value" peerid="v4" />
                            <inputport name="valueNumber">3</inputport>
                        </functor>
                        <functor name="NumberValue">
                            <property key="dff.functor.alias" value="numberValue7311" />
                            <inputport name="value" peerid="v6" />
                            <inputport name="valueNumber">1</inputport>
                        </functor>
                        <functor name="NumberValue">
                            <property key="dff.functor.alias" value="numberValue7317" />
                            <inputport name="value" peerid="v5" />
                            <inputport name="valueNumber">2</inputport>
                        </functor>
                    </containerfunctor>
                </containerfunctor>
                <containerfunctor name="Group">
                    <property key="dff.container.collapsed" value="no" />
                    <property key="dff.functor.alias" value="group7072" />
                    <functor name="LoadLookupTable">
                        <property key="dff.functor.alias" value="loadLookupTable7066" />
                        <property key="viewer.table" value="yes" />
                        <inputport name="filename">&quot;In/DemandScenarios/fwuse_W.csv&quot;</inputport>
                        <inputport name="suffixDigits">2</inputport>
                        <inputport name="step" peerid="v39" />
                        <inputport name="workdir">.none</inputport>
                        <outputport name="table" id="v156" />
                    </functor>
                    <functor name="LoadLookupTable">
                        <property key="dff.functor.alias" value="loadLookupTable7068" />
                        <property key="viewer.table" value="yes" />
                        <inputport name="filename">&quot;In/DemandScenarios/fwuse_V.csv&quot;</inputport>
                        <inputport name="suffixDigits">2</inputport>
                        <inputport name="step" peerid="v39" />
                        <inputport name="workdir">.none</inputport>
                        <outputport name="table" id="v157" />
                    </functor>
                    <functor name="LoadLookupTable">
                        <property key="dff.functor.alias" value="loadLookupTable5980" />
                        <property key="viewer.table" value="yes" />
                        <inputport name="filename">&quot;In/DemandScenarios/fwuse_V_ext_fwdef.csv&quot;</inputport>
                        <inputport name="suffixDigits">2</inputport>
                        <inputport name="step" peerid="v39" />
                        <inputport name="workdir">.none</inputport>
                        <outputport name="table" id="v158" />
                    </functor>
                    <functor name="LoadLookupTable">
                        <property key="dff.functor.alias" value="loadLookupTable5982" />
                        <property key="viewer.table" value="yes" />
                        <inputport name="filename">&quot;In/DemandScenarios/fwuse_W_ext_fwdef.csv&quot;</inputport>
                        <inputport name="suffixDigits">2</inputport>
                        <inputport name="step" peerid="v39" />
                        <inputport name="workdir">.none</inputport>
                        <outputport name="table" id="v159" />
                    </functor>
                </containerfunctor>
                <containerfunctor name="CalculateMap">
                    <property key="dff.container.collapsed" value="no" />
                    <property key="dff.functor.alias" value="calculateMap1117" />
                    <inputport name="expression">[&#x0A;    if isNull(i2) then&#x0A;        0&#x0A;    else &#x0A;        i1&#x0A;]</inputport>
                    <inputport name="cellType">.float32</inputport>
                    <inputport name="nullValue">.default</inputport>
                    <inputport name="resultIsSparse">.no</inputport>
                    <inputport name="resultFormat">.none</inputport>
                    <outputport name="result" id="v160" />
                    <functor name="NumberMap">
                        <property key="dff.functor.alias" value="numberMap846" />
                        <inputport name="map" peerid="v161" />
                        <inputport name="mapNumber">1</inputport>
                    </functor>
                    <functor name="NumberMap">
                        <property key="dff.functor.alias" value="numberMap847" />
                        <inputport name="map" peerid="v280" />
                        <inputport name="mapNumber">2</inputport>
                    </functor>
                </containerfunctor>
                <containerfunctor name="CalculateMap">
                    <property key="dff.functor.alias" value="calculateMap7078" />
                    <inputport name="expression">[&#x0A;    if not isNull(i1) then&#x0A;        i2 * v1 / 100&#x0A;    else &#x0A;        i2&#x0A;]</inputport>
                    <inputport name="cellType">.float32</inputport>
                    <inputport name="nullValue">.default</inputport>
                    <inputport name="resultIsSparse">.no</inputport>
                    <inputport name="resultFormat">.none</inputport>
                    <outputport name="result" id="v161" />
                    <functor name="NumberMap">
                        <property key="dff.functor.alias" value="numberMap7074" />
                        <inputport name="map" peerid="v162" />
                        <inputport name="mapNumber">2</inputport>
                    </functor>
                    <functor name="NumberMap">
                        <property key="dff.functor.alias" value="numberMap7076" />
                        <inputport name="map" peerid="v281" />
                        <inputport name="mapNumber">1</inputport>
                    </functor>
                    <functor name="NumberValue">
                        <property key="dff.functor.alias" value="numberValue1652" />
                        <inputport name="value" peerid="v248" />
                        <inputport name="valueNumber">1</inputport>
                    </functor>
                </containerfunctor>
                <containerfunctor name="Group">
                    <property key="dff.functor.alias" value="group1812" />
                    <functor name="MapJunction">
                        <property key="dff.functor.alias" value="mapJunction1824" />
                        <inputport name="possibleMap1" peerid="v165" />
                        <inputport name="possibleMap2" peerid="v168" />
                        <outputport name="map" id="v162" />
                    </functor>
                    <functor name="MapJunction">
                        <property key="dff.functor.alias" value="mapJunction1820" />
                        <inputport name="possibleMap1" peerid="v166" />
                        <inputport name="possibleMap2" peerid="v167" />
                        <outputport name="map" id="v163" />
                    </functor>
                    <functor name="Bool">
                        <property key="dff.functor.alias" value="Are you using an IDW for debugging purposes?" />
                        <property key="wizard.constant.input" value="Bool_constant_12" />
                        <inputport name="constant">.no</inputport>
                        <outputport name="object" id="v164" />
                    </functor>
                    <containerfunctor name="IfNotThen">
                        <property key="dff.functor.alias" value="ifNotThen1807" />
                        <inputport name="condition" peerid="v164" />
                        <functor name="LoadMap">
                            <property key="dff.functor.alias" value="loadMap1091" />
                            <property key="dff.functor.comment" value='Cargar el índice de consumo/costo: &quot;Indice_b.tif&quot; o Indice_s.tif&quot;' />
                            <inputport name="filename">&quot;In/IDW_C++_fw_w.tif&quot;</inputport>
                            <inputport name="nullValue">.none</inputport>
                            <inputport name="loadAsSparse">.no</inputport>
                            <inputport name="suffixDigits">2</inputport>
                            <inputport name="step" peerid="v39" />
                            <inputport name="workdir">.none</inputport>
                            <outputport name="map" id="v165" />
                        </functor>
                        <functor name="LoadMap">
                            <property key="dff.functor.alias" value="loadMap7118" />
                            <inputport name="filename">&quot;In/IDW_C++_fw_v.tif&quot;</inputport>
                            <inputport name="nullValue">.none</inputport>
                            <inputport name="loadAsSparse">.no</inputport>
                            <inputport name="suffixDigits">2</inputport>
                            <inputport name="step" peerid="v39" />
                            <inputport name="workdir">.none</inputport>
                            <outputport name="map" id="v166" />
                        </functor>
                    </containerfunctor>
                    <containerfunctor name="IfThen">
                        <property key="dff.functor.alias" value="ifThen1813" />
                        <inputport name="condition" peerid="v164" />
                        <functor name="LoadMap">
                            <property key="dff.functor.alias" value="loadMap1815" />
                            <inputport name="filename">&quot;In/Indice_v.tif&quot;</inputport>
                            <inputport name="nullValue">.none</inputport>
                            <inputport name="loadAsSparse">.no</inputport>
                            <inputport name="suffixDigits">0</inputport>
                            <inputport name="step" peerid="v39" />
                            <inputport name="workdir">.none</inputport>
                            <outputport name="map" id="v167" />
                        </functor>
                        <functor name="LoadMap">
                            <property key="dff.functor.alias" value="loadMap1817" />
                            <inputport name="filename">&quot;In/Indice_w.tif&quot;</inputport>
                            <inputport name="nullValue">.none</inputport>
                            <inputport name="loadAsSparse">.no</inputport>
                            <inputport name="suffixDigits">0</inputport>
                            <inputport name="step" peerid="v39" />
                            <inputport name="workdir">.none</inputport>
                            <outputport name="map" id="v168" />
                        </functor>
                    </containerfunctor>
                </containerfunctor>
                <containerfunctor name="CalculateMap">
                    <property key="dff.functor.alias" value="calculateMap7149" />
                    <inputport name="expression">[&#x0A;    if not isNull(i1) then&#x0A;        i2 * v1 / 100&#x0A;    else &#x0A;        i2&#x0A;]</inputport>
                    <inputport name="cellType">.float32</inputport>
                    <inputport name="nullValue">.default</inputport>
                    <inputport name="resultIsSparse">.no</inputport>
                    <inputport name="resultFormat">.none</inputport>
                    <outputport name="result" id="v169" />
                    <functor name="NumberMap">
                        <property key="dff.functor.alias" value="numberMap7153" />
                        <inputport name="map" peerid="v163" />
                        <inputport name="mapNumber">2</inputport>
                    </functor>
                    <functor name="NumberMap">
                        <property key="dff.functor.alias" value="numberMap7161" />
                        <inputport name="map" peerid="v281" />
                        <inputport name="mapNumber">1</inputport>
                    </functor>
                    <functor name="NumberValue">
                        <property key="dff.functor.alias" value="numberValue1647" />
                        <inputport name="value" peerid="v248" />
                        <inputport name="valueNumber">1</inputport>
                    </functor>
                </containerfunctor>
                <containerfunctor name="CalculateMap">
                    <property key="dff.functor.alias" value="calculateMap7124" />
                    <inputport name="expression">[&#x0A;    if isNull(i2) then&#x0A;        0&#x0A;    else &#x0A;        i1&#x0A;]</inputport>
                    <inputport name="cellType">.float32</inputport>
                    <inputport name="nullValue">.default</inputport>
                    <inputport name="resultIsSparse">.no</inputport>
                    <inputport name="resultFormat">.none</inputport>
                    <outputport name="result" id="v170" />
                    <functor name="NumberMap">
                        <property key="dff.functor.alias" value="numberMap7130" />
                        <inputport name="map" peerid="v169" />
                        <inputport name="mapNumber">1</inputport>
                    </functor>
                    <functor name="NumberMap">
                        <property key="dff.functor.alias" value="numberMap7132" />
                        <inputport name="map" peerid="v298" />
                        <inputport name="mapNumber">2</inputport>
                    </functor>
                </containerfunctor>
                <containerfunctor name="Group">
                    <property key="dff.functor.alias" value="group1798" />
                    <functor name="SaveMap">
                        <property key="dff.functor.alias" value="saveMap5132" />
                        <inputport name="map" peerid="v171" />
                        <inputport name="filename" peerid="v172" />
                        <inputport name="suffixDigits">2</inputport>
                        <inputport name="step" peerid="v39" />
                        <inputport name="useCompression">.yes</inputport>
                        <inputport name="workdir">.none</inputport>
                    </functor>
                    <containerfunctor name="CalculateMap">
                        <property key="dff.container.collapsed" value="no" />
                        <property key="dff.functor.alias" value="calculateMap1133" />
                        <property key="dff.functor.comment" value="funciones de crecimiento logistico por tipo de cobertura forestal. Entre el stock anterior como map2" />
                        <property key="viewer.result" value="yes" />
                        <inputport name="expression">[&#x0A;    if i11 = 0 then&#x0A;        if i4 = 0 and i5 = 0 then&#x0A;            i2 + i2 * i9 * (1 - i2 / i10)&#x0A;        else if i4 != 0 and i5 = 0 then&#x0A;            i2 - i4 + 1 + (i2 - i4 + 1) * i9 * (1 - (i2 - i4 + 1) / i10)&#x0A;        else if i4 = 0 and i5 = 1 then&#x0A;            i6 + i6 * i9 * (1 - i6 / i10)&#x0A;        else if i4 != 0 and i5 = 1 then&#x0A;            i2 + i2 * i9 * (1 - i2 / i10)&#x0A;        else &#x0A;            null&#x0A;    else &#x0A;        i2&#x0A;]</inputport>
                        <inputport name="cellType">.float32</inputport>
                        <inputport name="nullValue">.default</inputport>
                        <inputport name="resultIsSparse">.no</inputport>
                        <inputport name="resultFormat">.none</inputport>
                        <outputport name="result" id="v171" />
                        <functor name="NumberMap">
                            <property key="dff.functor.alias" value="numberMap914" />
                            <inputport name="map" peerid="v280" />
                            <inputport name="mapNumber">1</inputport>
                        </functor>
                        <functor name="NumberMap">
                            <property key="dff.functor.alias" value="numberMap915" />
                            <inputport name="map" peerid="v40" />
                            <inputport name="mapNumber">2</inputport>
                        </functor>
                        <functor name="NumberMap">
                            <property key="dff.functor.alias" value="numberMap5129" />
                            <inputport name="map" peerid="v112" />
                            <inputport name="mapNumber">4</inputport>
                        </functor>
                        <functor name="NumberMap">
                            <property key="dff.functor.alias" value="numberMap5203" />
                            <inputport name="map" peerid="v114" />
                            <inputport name="mapNumber">5</inputport>
                        </functor>
                        <functor name="NumberMap">
                            <property key="dff.functor.alias" value="numberMap5206" />
                            <inputport name="map" peerid="v192" />
                            <inputport name="mapNumber">6</inputport>
                        </functor>
                        <functor name="NumberMap">
                            <property key="dff.functor.alias" value="numberMap5468" />
                            <inputport name="map" peerid="v201" />
                            <inputport name="mapNumber">10</inputport>
                        </functor>
                        <functor name="NumberMap">
                            <property key="dff.functor.alias" value="numberMap5470" />
                            <inputport name="map" peerid="v205" />
                            <inputport name="mapNumber">9</inputport>
                        </functor>
                        <functor name="NumberMap">
                            <property key="dff.functor.alias" value="numberMap7537" />
                            <inputport name="map" peerid="v196" />
                            <inputport name="mapNumber">11</inputport>
                        </functor>
                    </containerfunctor>
                    <containerfunctor name="CreateString">
                        <property key="dff.functor.alias" value="createString1835" />
                        <inputport name="format">&quot;debugging_&lt;v1&gt;/Growth.tif&quot;</inputport>
                        <outputport name="result" id="v172" />
                        <functor name="NumberValue">
                            <property key="dff.functor.alias" value="numberValue1837" />
                            <inputport name="value" peerid="v38" />
                            <inputport name="valueNumber">1</inputport>
                        </functor>
                    </containerfunctor>
                </containerfunctor>
                <containerfunctor name="Group">
                    <property key="dff.functor.alias" value="group1795" />
                    <functor name="MapJunction">
                        <property key="dff.functor.alias" value="mapJunction1823" />
                        <property key="viewer.map" value="yes" />
                        <inputport name="possibleMap1" peerid="v175" />
                        <inputport name="possibleMap2" peerid="v174" />
                        <outputport name="map" id="v173" />
                    </functor>
                    <containerfunctor name="IfThen">
                        <property key="dff.functor.alias" value="ifThen1797" />
                        <inputport name="condition" peerid="v294" />
                        <containerfunctor name="CalculateMap">
                            <property key="dff.functor.alias" value="calculateMap1815" />
                            <property key="viewer.result" value="yes" />
                            <inputport name="expression">[&#x0A;    if i2 = 0 then&#x0A;        i1 * 0&#x0A;    else &#x0A;        i1 + 1&#x0A;]</inputport>
                            <inputport name="cellType">.int32</inputport>
                            <inputport name="nullValue">.default</inputport>
                            <inputport name="resultIsSparse">.no</inputport>
                            <inputport name="resultFormat">.none</inputport>
                            <outputport name="result" id="v174" />
                            <functor name="NumberMap">
                                <property key="dff.functor.alias" value="numberMap1821" />
                                <inputport name="map" peerid="v182" />
                                <inputport name="mapNumber">1</inputport>
                            </functor>
                            <functor name="NumberMap">
                                <property key="dff.functor.alias" value="numberMap1811" />
                                <inputport name="map" peerid="v115" />
                                <inputport name="mapNumber">2</inputport>
                            </functor>
                        </containerfunctor>
                    </containerfunctor>
                    <containerfunctor name="IfNotThen">
                        <property key="dff.functor.alias" value="ifNotThen1799" />
                        <inputport name="condition" peerid="v294" />
                        <functor name="Patcher">
                            <property key="dff.functor.alias" value="patcher2190" />
                            <property key="dff.functor.comment" value="Patcher for SELF-GATHERED fuelwood. To turn off set the amount of change equal to total number of cells in the input mask and set the prune factor to 1 and the rest fo the CA to one. The temporal path maps should be equal to the inoput mask." />
                            <property key="viewer.changedlandscape" value="yes" />
                            <property key="viewer.corrodedprobabilities" value="yes" />
                            <property key="viewer.remainingchanges" value="yes" />
                            <inputport name="landscape" peerid="v182" />
                            <inputport name="probabilities" peerid="v115" />
                            <inputport name="changes" peerid="v214" />
                            <inputport name="transitionParameters">[&#x0A;    0-&gt;1 100 100 1&#x0A;]</inputport>
                            <inputport name="neighborWindowLines">3</inputport>
                            <inputport name="neighborWindowColumns">3</inputport>
                            <inputport name="pruneFactor" peerid="v210" />
                            <outputport name="changedLandscape" id="v175" />
                        </functor>
                    </containerfunctor>
                </containerfunctor>
                <containerfunctor name="Group">
                    <property key="dff.functor.alias" value="group1803" />
                    <functor name="MapJunction">
                        <property key="dff.functor.alias" value="mapJunction1829" />
                        <property key="viewer.map" value="yes" />
                        <inputport name="possibleMap1" peerid="v178" />
                        <inputport name="possibleMap2" peerid="v177" />
                        <outputport name="map" id="v176" />
                    </functor>
                    <containerfunctor name="IfThen">
                        <property key="dff.functor.alias" value="ifThen1805" />
                        <inputport name="condition" peerid="v294" />
                        <containerfunctor name="CalculateMap">
                            <property key="dff.functor.alias" value="calculateMap1817" />
                            <property key="dff.functor.extendedcomment" value="if isNull(i1) then&#x0A;null&#x0A;else if i2 = 0 then&#x0A;i1 * 0&#x0A;else if i1 = 0 then&#x0A;i1 + 1&#x0A;else&#x0A;i1" />
                            <property key="viewer.result" value="yes" />
                            <inputport name="expression">[&#x0A;    if i2 = 0 then&#x0A;        i1 * 0&#x0A;    else &#x0A;        i1 + 1&#x0A;]</inputport>
                            <inputport name="cellType">.int32</inputport>
                            <inputport name="nullValue">.default</inputport>
                            <inputport name="resultIsSparse">.no</inputport>
                            <inputport name="resultFormat">.none</inputport>
                            <outputport name="result" id="v177" />
                            <functor name="NumberMap">
                                <property key="dff.functor.alias" value="numberMap1819" />
                                <inputport name="map" peerid="v184" />
                                <inputport name="mapNumber">1</inputport>
                            </functor>
                            <functor name="NumberMap">
                                <property key="dff.functor.alias" value="numberMap1808" />
                                <inputport name="map" peerid="v116" />
                                <inputport name="mapNumber">2</inputport>
                            </functor>
                        </containerfunctor>
                    </containerfunctor>
                    <containerfunctor name="IfNotThen">
                        <property key="dff.functor.alias" value="ifNotThen1807" />
                        <inputport name="condition" peerid="v294" />
                        <functor name="Patcher">
                            <property key="dff.functor.alias" value="patcher219" />
                            <property key="dff.functor.comment" value='Patsche for SELLED (buy=&quot;b&quot;)fuelwood. Top turn off set the amount of change equal to total of cells in the input mask and set the prune to 1 and rest fo the CA to one. The temporal path maps should be equal to the input mask' />
                            <property key="viewer.changedlandscape" value="yes" />
                            <property key="viewer.corrodedprobabilities" value="yes" />
                            <property key="viewer.remainingchanges" value="yes" />
                            <inputport name="landscape" peerid="v184" />
                            <inputport name="probabilities" peerid="v116" />
                            <inputport name="changes" peerid="v215" />
                            <inputport name="transitionParameters">[&#x0A;    0-&gt;1 100 100 1&#x0A;]</inputport>
                            <inputport name="neighborWindowLines">3</inputport>
                            <inputport name="neighborWindowColumns">3</inputport>
                            <inputport name="pruneFactor" peerid="v211" />
                            <outputport name="changedLandscape" id="v178" />
                        </functor>
                    </containerfunctor>
                </containerfunctor>
                <containerfunctor name="Group">
                    <property key="dff.functor.alias" value="group1824" />
                    <functor name="Patcher">
                        <property key="dff.functor.alias" value="patcher5097" />
                        <property key="dff.functor.comment" value="Gain" />
                        <property key="viewer.changedlandscape" value="yes" />
                        <property key="viewer.corrodedprobabilities" value="yes" />
                        <property key="viewer.remainingchanges" value="yes" />
                        <inputport name="landscape" peerid="v74" />
                        <inputport name="probabilities" peerid="v111" />
                        <inputport name="changes" peerid="v73" />
                        <inputport name="transitionParameters">[&#x0A;    0-&gt;1 1 5 1&#x0A;]</inputport>
                        <inputport name="neighborWindowLines">3</inputport>
                        <inputport name="neighborWindowColumns">3</inputport>
                        <inputport name="pruneFactor">10</inputport>
                        <outputport name="changedLandscape" id="v179" />
                    </functor>
                    <functor name="SaveMap">
                        <property key="dff.functor.alias" value="saveMap5178" />
                        <inputport name="map" peerid="v179" />
                        <inputport name="filename">&quot;Debugging/Cum_Sim_gain.tif&quot;</inputport>
                        <inputport name="suffixDigits">2</inputport>
                        <inputport name="step" peerid="v39" />
                        <inputport name="useCompression">.yes</inputport>
                        <inputport name="workdir">.none</inputport>
                    </functor>
                    <containerfunctor name="CreateString">
                        <property key="dff.functor.alias" value="createString1826" />
                        <inputport name="format">&quot;debugging_&lt;v1&gt;/Cum_Sim_gain.tif&quot;</inputport>
                        <functor name="NumberValue">
                            <property key="dff.functor.alias" value="numberValue1828" />
                            <inputport name="value" peerid="v38" />
                            <inputport name="valueNumber">1</inputport>
                        </functor>
                    </containerfunctor>
                </containerfunctor>
                <containerfunctor name="Group">
                    <property key="dff.functor.alias" value="group1841" />
                    <functor name="SaveMap">
                        <property key="dff.functor.alias" value="saveMap1648" />
                        <inputport name="map" peerid="v180" />
                        <inputport name="filename" peerid="v181" />
                        <inputport name="suffixDigits">2</inputport>
                        <inputport name="step" peerid="v39" />
                        <inputport name="useCompression">.yes</inputport>
                        <inputport name="workdir">.none</inputport>
                    </functor>
                    <containerfunctor name="CalculateMap">
                        <property key="dff.container.collapsed" value="no" />
                        <property key="dff.functor.alias" value="calculateMap1147" />
                        <inputport name="expression">[&#x0A;    if i2 &gt; 0 then&#x0A;        i1&#x0A;    else &#x0A;        i1 * 0&#x0A;]</inputport>
                        <inputport name="cellType">.float32</inputport>
                        <inputport name="nullValue">.default</inputport>
                        <inputport name="resultIsSparse">.no</inputport>
                        <inputport name="resultFormat">.none</inputport>
                        <outputport name="result" id="v180" />
                        <functor name="NumberMap">
                            <property key="dff.functor.alias" value="numberMap961" />
                            <inputport name="map" peerid="v130" />
                            <inputport name="mapNumber">1</inputport>
                        </functor>
                        <functor name="NumberMap">
                            <property key="dff.functor.alias" value="numberMap962" />
                            <inputport name="map" peerid="v97" />
                            <inputport name="mapNumber">2</inputport>
                        </functor>
                    </containerfunctor>
                    <containerfunctor name="CreateString">
                        <property key="dff.functor.alias" value="createString1843" />
                        <inputport name="format">&quot;debugging_&lt;v1&gt;/Harvest_tot_nrb.tif&quot;</inputport>
                        <outputport name="result" id="v181" />
                        <functor name="NumberValue">
                            <property key="dff.functor.alias" value="numberValue1845" />
                            <inputport name="value" peerid="v38" />
                            <inputport name="valueNumber">1</inputport>
                        </functor>
                    </containerfunctor>
                </containerfunctor>
            </containerfunctor>
            <containerfunctor name="CalculateCategoricalMap">
                <property key="dff.container.collapsed" value="yes" />
                <property key="dff.functor.alias" value="calculateCategoricalMap1119" />
                <property key="dff.functor.comment" value="Creates the categorical landscape that enters the Patcher. Its a null or 0 map, where 0 means its a fuelwood source and null it is not. For a land cover to be or not a fuelwood source depends on the extraction patters: e.g. people selfgather fuelwood from any place but only from forests if its to be sell. In the patcher, 0 are turned into 1 based on the probability map and the cellular automata settings.&#x0A;Each loop, the patcher eats the same input landscape assuming NO LAND COVER CHANGE DURING THE SIMULATION PERIOD.&#x0A;THIS IS THE INPUT LANDSCAPE FOR SELFGATEHRED FUELWOOD" />
                <property key="viewer.result" value="yes" />
                <inputport name="expression">[&#x0A;    if i1 &gt; 0 then&#x0A;        0&#x0A;    else &#x0A;        null&#x0A;]</inputport>
                <inputport name="cellType">.int32</inputport>
                <inputport name="nullValue">.default</inputport>
                <inputport name="resultIsSparse">.no</inputport>
                <inputport name="resultFormat">.none</inputport>
                <outputport name="result" id="v182" />
                <functor name="NumberMap">
                    <property key="dff.functor.alias" value="numberMap864" />
                    <inputport name="map" peerid="v280" />
                    <inputport name="mapNumber">1</inputport>
                </functor>
            </containerfunctor>
            <containerfunctor name="CalculateMap">
                <property key="dff.container.collapsed" value="no" />
                <property key="dff.functor.alias" value="calculateMap1120" />
                <inputport name="expression">[&#x0A;    i1 * 0&#x0A;]</inputport>
                <inputport name="cellType">.float32</inputport>
                <inputport name="nullValue">.default</inputport>
                <inputport name="resultIsSparse">.no</inputport>
                <inputport name="resultFormat">.none</inputport>
                <outputport name="result" id="v183" />
                <functor name="NumberMap">
                    <property key="dff.functor.alias" value="numberMap866" />
                    <inputport name="map" peerid="v280" />
                    <inputport name="mapNumber">1</inputport>
                </functor>
            </containerfunctor>
            <containerfunctor name="CalculateCategoricalMap">
                <property key="dff.container.collapsed" value="yes" />
                <property key="dff.functor.alias" value="calculateCategoricalMap1121" />
                <property key="dff.functor.comment" value="Creates the categorical landscape that enters the Patcher. Its a null or 0 map, where 0 means its a fuelwood source and null it is not. For a land cover to be or not a fuelwood source depends on the extraction patters: e.g. people selfgather fuelwood from any place but only from forests if its to be sell. In the patcher, 0 are turned into 1 based on the probability map and the cellular automata settings.&#x0A;Each loop, the patcher eats the same input landscape assuming NO LAND COVER CHANGE DURING THE SIMULATION PERIOD.&#x0A;THIS IS THE INPUT LANDSCAPE FOR SELLED FUELWOOD" />
                <property key="viewer.result" value="yes" />
                <inputport name="expression">[&#x0A;    if i1 &gt; 0 then&#x0A;        0&#x0A;    else &#x0A;        null&#x0A;]</inputport>
                <inputport name="cellType">.int32</inputport>
                <inputport name="nullValue">.default</inputport>
                <inputport name="resultIsSparse">.no</inputport>
                <inputport name="resultFormat">.none</inputport>
                <outputport name="result" id="v184" />
                <functor name="NumberMap">
                    <property key="dff.functor.alias" value="numberMap868" />
                    <inputport name="map" peerid="v298" />
                    <inputport name="mapNumber">1</inputport>
                </functor>
            </containerfunctor>
            <containerfunctor name="CalculateMap">
                <property key="dff.container.collapsed" value="no" />
                <property key="dff.functor.alias" value="calculateMap1163" />
                <inputport name="expression">[&#x0A;    if i1 &gt;= i2 or i3 &gt; 0 then&#x0A;        0&#x0A;    else &#x0A;        i2 - i1&#x0A;]</inputport>
                <inputport name="cellType">.float32</inputport>
                <inputport name="nullValue">.default</inputport>
                <inputport name="resultIsSparse">.no</inputport>
                <inputport name="resultFormat">.none</inputport>
                <outputport name="result" id="v185" />
                <functor name="NumberMap">
                    <property key="dff.functor.alias" value="numberMap1027" />
                    <inputport name="map" peerid="v98" />
                    <inputport name="mapNumber">1</inputport>
                </functor>
                <functor name="NumberMap">
                    <property key="dff.functor.alias" value="numberMap1028" />
                    <inputport name="map" peerid="v192" />
                    <inputport name="mapNumber">2</inputport>
                </functor>
                <functor name="NumberMap">
                    <property key="dff.functor.alias" value="numberMap3666" />
                    <inputport name="map" peerid="v117" />
                    <inputport name="mapNumber">3</inputport>
                </functor>
            </containerfunctor>
            <containerfunctor name="CalculateMap">
                <property key="dff.container.collapsed" value="no" />
                <property key="dff.functor.alias" value="calculateMap1164" />
                <inputport name="expression">[&#x0A;    if i2 = 0 then&#x0A;        0&#x0A;    else &#x0A;        i1 / i2&#x0A;]</inputport>
                <inputport name="cellType">.float32</inputport>
                <inputport name="nullValue">.default</inputport>
                <inputport name="resultIsSparse">.no</inputport>
                <inputport name="resultFormat">.none</inputport>
                <outputport name="result" id="v186" />
                <functor name="NumberMap">
                    <property key="dff.functor.alias" value="numberMap1036" />
                    <inputport name="map" peerid="v185" />
                    <inputport name="mapNumber">1</inputport>
                </functor>
                <functor name="NumberMap">
                    <property key="dff.functor.alias" value="numberMap1037" />
                    <inputport name="map" peerid="v107" />
                    <inputport name="mapNumber">2</inputport>
                </functor>
            </containerfunctor>
            <containerfunctor name="CalculateValue">
                <property key="dff.container.collapsed" value="no" />
                <property key="dff.functor.alias" value="calculateValue1165" />
                <inputport name="expression">[&#x0A;    t1[12]&#x0A;]</inputport>
                <inputport name="defaultValue">.none</inputport>
                <outputport name="result" id="v187" />
                <functor name="NumberTable">
                    <property key="dff.functor.alias" value="numberTable1166" />
                    <inputport name="table" peerid="v12" />
                    <inputport name="tableNumber">1</inputport>
                </functor>
            </containerfunctor>
            <containerfunctor name="CalculateValue">
                <property key="dff.container.collapsed" value="no" />
                <property key="dff.functor.alias" value="calculateValue1168" />
                <inputport name="expression">[&#x0A;    t1[12]&#x0A;]</inputport>
                <inputport name="defaultValue">.none</inputport>
                <outputport name="result" id="v188" />
                <functor name="NumberTable">
                    <property key="dff.functor.alias" value="numberTable1169" />
                    <inputport name="table" peerid="v13" />
                    <inputport name="tableNumber">1</inputport>
                </functor>
            </containerfunctor>
            <containerfunctor name="CalculateMap">
                <property key="dff.container.collapsed" value="no" />
                <property key="dff.functor.alias" value="calculateMap1170" />
                <inputport name="expression">[&#x0A;    if i2 = 0 then&#x0A;        0&#x0A;    else &#x0A;        i1 / i2&#x0A;]</inputport>
                <inputport name="cellType">.float32</inputport>
                <inputport name="nullValue">.default</inputport>
                <inputport name="resultIsSparse">.no</inputport>
                <inputport name="resultFormat">.none</inputport>
                <outputport name="result" id="v189" />
                <functor name="NumberMap">
                    <property key="dff.functor.alias" value="numberMap1046" />
                    <inputport name="map" peerid="v185" />
                    <inputport name="mapNumber">1</inputport>
                </functor>
                <functor name="NumberMap">
                    <property key="dff.functor.alias" value="numberMap1047" />
                    <inputport name="map" peerid="v106" />
                    <inputport name="mapNumber">2</inputport>
                </functor>
            </containerfunctor>
            <containerfunctor name="CalculateValue">
                <property key="dff.container.collapsed" value="no" />
                <property key="dff.functor.alias" value="calculateValue1171" />
                <inputport name="expression">[&#x0A;    t1[12]&#x0A;]</inputport>
                <inputport name="defaultValue">.none</inputport>
                <outputport name="result" id="v190" />
                <functor name="NumberTable">
                    <property key="dff.functor.alias" value="numberTable1172" />
                    <inputport name="table" peerid="v11" />
                    <inputport name="tableNumber">1</inputport>
                </functor>
            </containerfunctor>
            <containerfunctor name="CalculateValue">
                <property key="dff.functor.alias" value="calculateValue4948" />
                <inputport name="expression">[&#x0A;    v1 * 48 / v2 + 1&#x0A;]</inputport>
                <inputport name="defaultValue">.none</inputport>
                <outputport name="result" id="v191" />
                <functor name="NumberValue">
                    <property key="dff.functor.alias" value="numberValue4950" />
                    <inputport name="value" peerid="v240" />
                    <inputport name="valueNumber">1</inputport>
                </functor>
                <functor name="NumberValue">
                    <property key="dff.functor.alias" value="numberValue4957" />
                    <inputport name="value" peerid="v5" />
                    <inputport name="valueNumber">2</inputport>
                </functor>
            </containerfunctor>
            <containerfunctor name="Group">
                <property key="dff.functor.alias" value="group4993" />
                <functor name="SaveMap">
                    <property key="dff.functor.alias" value="saveMap5023" />
                    <inputport name="map" peerid="v192" />
                    <inputport name="filename">&quot;Temp/2_IniSt.tif&quot;</inputport>
                    <inputport name="suffixDigits">2</inputport>
                    <inputport name="step" peerid="v8" />
                    <inputport name="useCompression">.yes</inputport>
                    <inputport name="workdir">.none</inputport>
                </functor>
                <functor name="ExtractMapAttributes">
                    <property key="dff.functor.alias" value="extractMapAttributes7205" />
                    <property key="viewer.attributes" value="yes" />
                    <property key="viewer.layerattributes" value="yes" />
                    <inputport name="map" peerid="v192" />
                    <inputport name="extractDynamicAttributes">.yes</inputport>
                    <inputport name="extractStatisticalAttributes">.yes</inputport>
                </functor>
                <functor name="SaveMap">
                    <property key="dff.functor.alias" value="saveMap7526" />
                    <inputport name="map" peerid="v196" />
                    <inputport name="filename">&quot;Temp/2_TOFvsFOR.tif&quot;</inputport>
                    <inputport name="suffixDigits">2</inputport>
                    <inputport name="step" peerid="v8" />
                    <inputport name="useCompression">.yes</inputport>
                    <inputport name="workdir">.none</inputport>
                </functor>
                <functor name="MapJunction">
                    <property key="dff.functor.alias" value="mapJunction1739" />
                    <property key="viewer.map" value="yes" />
                    <inputport name="possibleMap1" peerid="v200" />
                    <inputport name="possibleMap2" peerid="v199" />
                    <outputport name="map" id="v192" />
                </functor>
                <containerfunctor name="CalculateMap">
                    <property key="dff.container.collapsed" value="no" />
                    <property key="dff.functor.alias" value="calculateMap1114" />
                    <property key="dff.functor.comment" value="Creates the initial biomass stock map for SELLED and SELFGATHERED fuelwood. This is to say, is the TOTAL BIOMASS STOCK DISTRIBUTION AT TIME 0" />
                    <property key="viewer.result" value="yes" />
                    <inputport name="expression">[&#x0A;    if v55 = 0 then&#x0A;        if t1[[v1][i1 + 1]] &gt; t2[[v1][i1 + 1]] then&#x0A;            t2[[v1][i1 + 1]]&#x0A;        else &#x0A;            t1[[v1][i1 + 1]]&#x0A;    else if i2 = 1 then&#x0A;        t2[[v1][i1 + 1]]&#x0A;    else &#x0A;        i55 / 100 * t2[[v1][i1 + 1]]&#x0A;]</inputport>
                    <inputport name="cellType">.float32</inputport>
                    <inputport name="nullValue">.default</inputport>
                    <inputport name="resultIsSparse">.no</inputport>
                    <inputport name="resultFormat">.none</inputport>
                    <outputport name="result" id="v193" />
                    <functor name="NumberMap">
                        <property key="dff.functor.alias" value="numberMap832" />
                        <inputport name="map" peerid="v280" />
                        <inputport name="mapNumber">1</inputport>
                    </functor>
                    <functor name="NumberTable">
                        <property key="dff.functor.alias" value="numberTable5436" />
                        <inputport name="table" peerid="v234" />
                        <inputport name="tableNumber">1</inputport>
                    </functor>
                    <functor name="NumberValue">
                        <property key="dff.functor.alias" value="numberValue5438" />
                        <inputport name="value" peerid="v10" />
                        <inputport name="valueNumber">1</inputport>
                    </functor>
                    <functor name="NumberValue">
                        <property key="dff.functor.alias" value="numberValue4988" />
                        <inputport name="value" peerid="v266" />
                        <inputport name="valueNumber">55</inputport>
                    </functor>
                    <functor name="NumberMap">
                        <property key="dff.functor.alias" value="numberMap4991" />
                        <inputport name="map" peerid="v194" />
                        <inputport name="mapNumber">55</inputport>
                    </functor>
                    <functor name="NumberTable">
                        <property key="dff.functor.alias" value="numberTable5444" />
                        <inputport name="table" peerid="v236" />
                        <inputport name="tableNumber">2</inputport>
                    </functor>
                    <functor name="NumberMap">
                        <property key="dff.functor.alias" value="numberMap8174" />
                        <inputport name="map" peerid="v196" />
                        <inputport name="mapNumber">2</inputport>
                    </functor>
                </containerfunctor>
                <containerfunctor name="CalculateMap">
                    <property key="dff.functor.alias" value="calculateMap5018" />
                    <inputport name="expression">[&#x0A;    if i1 = 0 then&#x0A;        i1 + 1&#x0A;    else &#x0A;        i1&#x0A;]</inputport>
                    <inputport name="cellType">.float32</inputport>
                    <inputport name="nullValue">.default</inputport>
                    <inputport name="resultIsSparse">.no</inputport>
                    <inputport name="resultFormat">.none</inputport>
                    <outputport name="result" id="v194" />
                    <functor name="NumberMap">
                        <property key="dff.functor.alias" value="numberMap5016" />
                        <inputport name="map" peerid="v307" />
                        <inputport name="mapNumber">1</inputport>
                    </functor>
                </containerfunctor>
                <containerfunctor name="CalculateMap">
                    <property key="dff.container.collapsed" value="no" />
                    <property key="dff.functor.alias" value="calculateMap5412" />
                    <property key="viewer.result" value="yes" />
                    <inputport name="expression">[&#x0A;    t1[[v1][i1 + 1]]&#x0A;]</inputport>
                    <inputport name="cellType">.float32</inputport>
                    <inputport name="nullValue">.default</inputport>
                    <inputport name="resultIsSparse">.no</inputport>
                    <inputport name="resultFormat">.none</inputport>
                    <outputport name="result" id="v195" />
                    <functor name="NumberMap">
                        <property key="dff.functor.alias" value="numberMap5448" />
                        <inputport name="map" peerid="v280" />
                        <inputport name="mapNumber">1</inputport>
                    </functor>
                    <functor name="NumberTable">
                        <property key="dff.functor.alias" value="numberTable5452" />
                        <inputport name="table" peerid="v236" />
                        <inputport name="tableNumber">1</inputport>
                    </functor>
                    <functor name="NumberValue">
                        <property key="dff.functor.alias" value="numberValue5456" />
                        <inputport name="value" peerid="v10" />
                        <inputport name="valueNumber">1</inputport>
                    </functor>
                </containerfunctor>
                <containerfunctor name="CalculateMap">
                    <property key="dff.functor.alias" value="calculateMap7528" />
                    <inputport name="expression">[&#x0A;    t1[i1]&#x0A;]</inputport>
                    <inputport name="cellType">.int32</inputport>
                    <inputport name="nullValue">.default</inputport>
                    <inputport name="resultIsSparse">.no</inputport>
                    <inputport name="resultFormat">.none</inputport>
                    <outputport name="result" id="v196" />
                    <functor name="NumberMap">
                        <property key="dff.functor.alias" value="numberMap7531" />
                        <inputport name="map" peerid="v280" />
                        <inputport name="mapNumber">1</inputport>
                    </functor>
                    <functor name="NumberTable">
                        <property key="dff.functor.alias" value="numberTable7533" />
                        <inputport name="table" peerid="v237" />
                        <inputport name="tableNumber">1</inputport>
                    </functor>
                </containerfunctor>
                <containerfunctor name="CalculateMap">
                    <property key="dff.functor.alias" value="calculateMap10909" />
                    <inputport name="expression">[&#x0A;    if i2 != 1 and i1 &lt; 1 then&#x0A;        1&#x0A;    else &#x0A;        i1&#x0A;]</inputport>
                    <inputport name="cellType">.float32</inputport>
                    <inputport name="nullValue">.default</inputport>
                    <inputport name="resultIsSparse">.no</inputport>
                    <inputport name="resultFormat">.none</inputport>
                    <outputport name="result" id="v197" />
                    <functor name="NumberMap">
                        <property key="dff.functor.alias" value="numberMap10913" />
                        <inputport name="map" peerid="v193" />
                        <inputport name="mapNumber">1</inputport>
                    </functor>
                    <functor name="NumberMap">
                        <property key="dff.functor.alias" value="numberMap10915" />
                        <inputport name="map" peerid="v196" />
                        <inputport name="mapNumber">2</inputport>
                    </functor>
                </containerfunctor>
                <containerfunctor name="IfThen">
                    <property key="dff.functor.alias" value="ifThen1735" />
                    <inputport name="condition" peerid="v267" />
                    <functor name="LoadMap">
                        <property key="dff.functor.alias" value="loadMap1760" />
                        <inputport name="filename">&quot;LULCC/TempRaster/agb_c.tif&quot;</inputport>
                        <inputport name="nullValue">.default</inputport>
                        <inputport name="loadAsSparse">.no</inputport>
                        <inputport name="suffixDigits">0</inputport>
                        <inputport name="step" peerid="v8" />
                        <inputport name="workdir">.none</inputport>
                        <outputport name="map" id="v198" />
                    </functor>
                    <containerfunctor name="CalculateMap">
                        <property key="dff.functor.alias" value="calculateMap1748" />
                        <property key="viewer.result" value="yes" />
                        <inputport name="expression">[&#x0A;    if i2 = 1 then&#x0A;        t2[[v1][i1 + 1]]&#x0A;    else &#x0A;        i5 * v2 / 100&#x0A;]</inputport>
                        <inputport name="cellType">.float32</inputport>
                        <inputport name="nullValue">.default</inputport>
                        <inputport name="resultIsSparse">.no</inputport>
                        <inputport name="resultFormat">.none</inputport>
                        <outputport name="result" id="v199" />
                        <functor name="NumberMap">
                            <property key="dff.functor.alias" value="numberMap1741" />
                            <inputport name="map" peerid="v198" />
                            <inputport name="mapNumber">5</inputport>
                        </functor>
                        <functor name="NumberMap">
                            <property key="dff.functor.alias" value="numberMap1883" />
                            <inputport name="map" peerid="v196" />
                            <inputport name="mapNumber">2</inputport>
                        </functor>
                        <functor name="NumberTable">
                            <property key="dff.functor.alias" value="numberTable1885" />
                            <inputport name="table" peerid="v236" />
                            <inputport name="tableNumber">2</inputport>
                        </functor>
                        <functor name="NumberValue">
                            <property key="dff.functor.alias" value="numberValue1887" />
                            <inputport name="value" peerid="v10" />
                            <inputport name="valueNumber">1</inputport>
                        </functor>
                        <functor name="NumberMap">
                            <property key="dff.functor.alias" value="numberMap3960" />
                            <inputport name="map" peerid="v280" />
                            <inputport name="mapNumber">1</inputport>
                        </functor>
                        <functor name="NumberValue">
                            <property key="dff.functor.alias" value="numberValue1813" />
                            <inputport name="value" peerid="v264" />
                            <inputport name="valueNumber">2</inputport>
                        </functor>
                    </containerfunctor>
                </containerfunctor>
                <containerfunctor name="IfNotThen">
                    <property key="dff.functor.alias" value="ifNotThen1737" />
                    <inputport name="condition" peerid="v267" />
                    <containerfunctor name="CalculateMap">
                        <property key="dff.functor.alias" value="calculateMap1746" />
                        <inputport name="expression">[&#x0A;    i1&#x0A;]</inputport>
                        <inputport name="cellType">.float32</inputport>
                        <inputport name="nullValue">.default</inputport>
                        <inputport name="resultIsSparse">.no</inputport>
                        <inputport name="resultFormat">.none</inputport>
                        <outputport name="result" id="v200" />
                        <functor name="NumberMap">
                            <property key="dff.functor.alias" value="numberMap1743" />
                            <inputport name="map" peerid="v197" />
                            <inputport name="mapNumber">1</inputport>
                        </functor>
                    </containerfunctor>
                </containerfunctor>
                <containerfunctor name="Group">
                    <property key="dff.functor.alias" value="group1779" />
                    <functor name="SaveMap">
                        <property key="dff.functor.alias" value="saveMap5418" />
                        <inputport name="map" peerid="v201" />
                        <inputport name="filename">&quot;Temp/2_K.tif&quot;</inputport>
                        <inputport name="suffixDigits">2</inputport>
                        <inputport name="step" peerid="v8" />
                        <inputport name="useCompression">.yes</inputport>
                        <inputport name="workdir">.none</inputport>
                    </functor>
                    <functor name="MapJunction">
                        <property key="dff.functor.alias" value="mapJunction1787" />
                        <inputport name="possibleMap1" peerid="v203" />
                        <inputport name="possibleMap2" peerid="v204" />
                        <outputport name="map" id="v201" />
                    </functor>
                    <functor name="MapJunction">
                        <property key="dff.functor.alias" value="mapJunction1776" />
                        <inputport name="possibleMap1" peerid="v199" />
                        <inputport name="possibleMap2" peerid="v195" />
                        <outputport name="map" id="v202" />
                    </functor>
                    <containerfunctor name="IfThen">
                        <property key="dff.functor.alias" value="ifThen1791" />
                        <inputport name="condition" peerid="v268" />
                        <containerfunctor name="CalculateMap">
                            <property key="dff.functor.alias" value="calculateMap1781" />
                            <property key="viewer.result" value="yes" />
                            <inputport name="expression">[&#x0A;    if i1 &lt; i2 then&#x0A;        i1&#x0A;    else &#x0A;        i1&#x0A;]</inputport>
                            <inputport name="cellType">.float32</inputport>
                            <inputport name="nullValue">.default</inputport>
                            <inputport name="resultIsSparse">.no</inputport>
                            <inputport name="resultFormat">.none</inputport>
                            <outputport name="result" id="v203" />
                            <functor name="NumberMap">
                                <property key="dff.functor.alias" value="numberMap1783" />
                                <inputport name="map" peerid="v202" />
                                <inputport name="mapNumber">1</inputport>
                            </functor>
                            <functor name="NumberMap">
                                <property key="dff.functor.alias" value="numberMap1785" />
                                <inputport name="map" peerid="v195" />
                                <inputport name="mapNumber">2</inputport>
                            </functor>
                        </containerfunctor>
                    </containerfunctor>
                    <containerfunctor name="IfNotThen">
                        <property key="dff.functor.alias" value="ifNotThen1793" />
                        <inputport name="condition" peerid="v268" />
                        <containerfunctor name="CalculateMap">
                            <property key="dff.functor.alias" value="calculateMap1785" />
                            <property key="dff.functor.extendedcomment" value="Compares if the initial biomass with pre-defined K values. If they biomass is lower than K, the intial stock is = biomass and K i equal to K (there is room to grow). WARNING NOW BIOMASS = TO K&#x0A;Shoul be like this to leave room to grow:&#x0A;if i1 &lt; i2 then&#x0A;i2&#x0A;else&#x0A;i1" />
                            <inputport name="expression">[&#x0A;    if i1 &lt; i2 then&#x0A;        i2&#x0A;    else &#x0A;        i1&#x0A;]</inputport>
                            <inputport name="cellType">.float32</inputport>
                            <inputport name="nullValue">.default</inputport>
                            <inputport name="resultIsSparse">.no</inputport>
                            <inputport name="resultFormat">.none</inputport>
                            <outputport name="result" id="v204" />
                            <functor name="NumberMap">
                                <property key="dff.functor.alias" value="numberMap1787" />
                                <inputport name="map" peerid="v202" />
                                <inputport name="mapNumber">1</inputport>
                            </functor>
                            <functor name="NumberMap">
                                <property key="dff.functor.alias" value="numberMap1789" />
                                <inputport name="map" peerid="v195" />
                                <inputport name="mapNumber">2</inputport>
                            </functor>
                        </containerfunctor>
                    </containerfunctor>
                </containerfunctor>
                <containerfunctor name="Group">
                    <property key="dff.functor.alias" value="group1794" />
                    <functor name="SaveMap">
                        <property key="dff.functor.alias" value="saveMap5416" />
                        <inputport name="map" peerid="v205" />
                        <inputport name="filename">&quot;Temp/2_rmax.tif&quot;</inputport>
                        <inputport name="suffixDigits">2</inputport>
                        <inputport name="step" peerid="v8" />
                        <inputport name="useCompression">.yes</inputport>
                        <inputport name="workdir">.none</inputport>
                    </functor>
                    <containerfunctor name="CalculateMap">
                        <property key="dff.functor.alias" value="calculateMap5414" />
                        <property key="viewer.result" value="yes" />
                        <inputport name="expression">[&#x0A;    t1[[v1][i1 + 1]] / v2 * v3&#x0A;]</inputport>
                        <inputport name="cellType">.float32</inputport>
                        <inputport name="nullValue">.default</inputport>
                        <inputport name="resultIsSparse">.no</inputport>
                        <inputport name="resultFormat">.none</inputport>
                        <outputport name="result" id="v205" />
                        <functor name="NumberMap">
                            <property key="dff.functor.alias" value="numberMap5450" />
                            <inputport name="map" peerid="v280" />
                            <inputport name="mapNumber">1</inputport>
                        </functor>
                        <functor name="NumberTable">
                            <property key="dff.functor.alias" value="numberTable5454" />
                            <inputport name="table" peerid="v235" />
                            <inputport name="tableNumber">1</inputport>
                        </functor>
                        <functor name="NumberValue">
                            <property key="dff.functor.alias" value="numberValue5458" />
                            <inputport name="value" peerid="v10" />
                            <inputport name="valueNumber">1</inputport>
                        </functor>
                        <functor name="NumberValue">
                            <property key="dff.functor.alias" value="numberValue7519" />
                            <inputport name="value" peerid="v5" />
                            <inputport name="valueNumber">3</inputport>
                        </functor>
                        <functor name="NumberValue">
                            <property key="dff.functor.alias" value="numberValue7517" />
                            <inputport name="value" peerid="v6" />
                            <inputport name="valueNumber">2</inputport>
                        </functor>
                    </containerfunctor>
                </containerfunctor>
            </containerfunctor>
            <containerfunctor name="Group">
                <property key="dff.functor.alias" value="group5139" />
                <functor name="LookupTable">
                    <property key="dff.functor.alias" value="lookupTable5143" />
                    <property key="dff.functor.comment" value="Harvest Pixels W" />
                    <property key="viewer.object" value="yes" />
                    <inputport name="constant" peerid="v225" />
                    <outputport name="object" id="v206" />
                </functor>
                <functor name="LookupTable">
                    <property key="dff.functor.alias" value="lookupTable5147" />
                    <property key="dff.functor.comment" value="Prune Factor W" />
                    <inputport name="constant" peerid="v227" />
                    <outputport name="object" id="v207" />
                </functor>
                <functor name="GetLookupTableValue">
                    <property key="dff.functor.alias" value="getLookupTableValue5151" />
                    <property key="viewer.value" value="yes" />
                    <inputport name="table" peerid="v206" />
                    <inputport name="key" peerid="v9" />
                    <inputport name="valueIfNotFound">.none</inputport>
                    <outputport name="value" id="v208" />
                </functor>
                <functor name="GetLookupTableValue">
                    <property key="dff.functor.alias" value="getLookupTableValue5153" />
                    <property key="viewer.value" value="yes" />
                    <inputport name="table" peerid="v213" />
                    <inputport name="key" peerid="v9" />
                    <inputport name="valueIfNotFound">.none</inputport>
                    <outputport name="value" id="v209" />
                </functor>
                <functor name="GetLookupTableValue">
                    <property key="dff.functor.alias" value="getLookupTableValue5155" />
                    <property key="viewer.value" value="yes" />
                    <inputport name="table" peerid="v207" />
                    <inputport name="key" peerid="v9" />
                    <inputport name="valueIfNotFound">.none</inputport>
                    <outputport name="value" id="v210" />
                </functor>
                <functor name="GetLookupTableValue">
                    <property key="dff.functor.alias" value="getLookupTableValue5157" />
                    <property key="viewer.value" value="yes" />
                    <inputport name="table" peerid="v212" />
                    <inputport name="key" peerid="v9" />
                    <inputport name="valueIfNotFound">.none</inputport>
                    <outputport name="value" id="v211" />
                </functor>
                <functor name="LookupTable">
                    <property key="dff.functor.alias" value="lookupTable5149" />
                    <property key="dff.functor.comment" value="Prune Factor V" />
                    <inputport name="constant" peerid="v226" />
                    <outputport name="object" id="v212" />
                </functor>
                <functor name="LookupTable">
                    <property key="dff.functor.alias" value="lookupTable5145" />
                    <property key="dff.functor.comment" value="Harvest Pixels V" />
                    <property key="viewer.object" value="yes" />
                    <inputport name="constant" peerid="v228" />
                    <outputport name="object" id="v213" />
                </functor>
                <functor name="SetLookupTableValue">
                    <property key="dff.functor.alias" value="setLookupTableValue1580" />
                    <property key="viewer.updatedtable" value="yes" />
                    <inputport name="table">[&#x0A;    &quot;Key&quot; &quot;Value&quot;&#x0A;]</inputport>
                    <inputport name="key">0.001</inputport>
                    <inputport name="value" peerid="v208" />
                    <outputport name="updatedTable" id="v214" />
                </functor>
                <functor name="SetLookupTableValue">
                    <property key="dff.functor.alias" value="setLookupTableValue1582" />
                    <property key="viewer.updatedtable" value="yes" />
                    <inputport name="table">[&#x0A;    &quot;Key&quot; &quot;Value&quot;&#x0A;]</inputport>
                    <inputport name="key">0.001</inputport>
                    <inputport name="value" peerid="v209" />
                    <outputport name="updatedTable" id="v215" />
                </functor>
            </containerfunctor>
            <containerfunctor name="CalculateValue">
                <property key="dff.functor.alias" value="calculateValue2046" />
                <inputport name="expression">[&#x0A;    t1[12]&#x0A;]</inputport>
                <inputport name="defaultValue">.none</inputport>
                <outputport name="result" id="v216" />
                <functor name="NumberTable">
                    <property key="dff.functor.alias" value="numberTable2048" />
                    <inputport name="table" peerid="v23" />
                    <inputport name="tableNumber">1</inputport>
                </functor>
            </containerfunctor>
            <containerfunctor name="CalculateValue">
                <property key="dff.functor.alias" value="calculateValue2085" />
                <inputport name="expression">[&#x0A;    t1[12]&#x0A;]</inputport>
                <inputport name="defaultValue">.none</inputport>
                <outputport name="result" id="v217" />
                <functor name="NumberTable">
                    <property key="dff.functor.alias" value="numberTable2089" />
                    <inputport name="table" peerid="v27" />
                    <inputport name="tableNumber">1</inputport>
                </functor>
            </containerfunctor>
            <containerfunctor name="CalculateValue">
                <property key="dff.functor.alias" value="calculateValue2005" />
                <inputport name="expression">[&#x0A;    t2[31]&#x0A;]</inputport>
                <inputport name="defaultValue">.none</inputport>
                <outputport name="result" id="v218" />
                <functor name="NumberTable">
                    <property key="dff.functor.alias" value="numberTable1992" />
                    <inputport name="table" peerid="v141" />
                    <inputport name="tableNumber">2</inputport>
                </functor>
            </containerfunctor>
            <containerfunctor name="CalculateValue">
                <property key="dff.functor.alias" value="calculateValue2008" />
                <inputport name="expression">[&#x0A;    t1[31]&#x0A;]</inputport>
                <inputport name="defaultValue">.none</inputport>
                <outputport name="result" id="v219" />
                <functor name="NumberTable">
                    <property key="dff.functor.alias" value="numberTable1989" />
                    <inputport name="table" peerid="v140" />
                    <inputport name="tableNumber">1</inputport>
                </functor>
            </containerfunctor>
            <containerfunctor name="CalculateValue">
                <property key="dff.functor.alias" value="calculateValue2010" />
                <inputport name="expression">[&#x0A;    t3[31]&#x0A;]</inputport>
                <inputport name="defaultValue">.none</inputport>
                <outputport name="result" id="v220" />
                <functor name="NumberTable">
                    <property key="dff.functor.alias" value="numberTable2001" />
                    <inputport name="table" peerid="v142" />
                    <inputport name="tableNumber">3</inputport>
                </functor>
            </containerfunctor>
            <containerfunctor name="CalculateValue">
                <property key="dff.functor.alias" value="calculateValue2014" />
                <property key="viewer.result" value="yes" />
                <inputport name="expression">[&#x0A;    t4[31]&#x0A;]</inputport>
                <inputport name="defaultValue">.none</inputport>
                <outputport name="result" id="v221" />
                <functor name="NumberTable">
                    <property key="dff.functor.alias" value="numberTable2003" />
                    <inputport name="table" peerid="v143" />
                    <inputport name="tableNumber">4</inputport>
                </functor>
            </containerfunctor>
            <containerfunctor name="CalculateMap">
                <property key="dff.functor.alias" value="calculateMap4001" />
                <inputport name="expression">[&#x0A;    if i2 &gt; 0 then&#x0A;        i1&#x0A;    else &#x0A;        0&#x0A;]</inputport>
                <inputport name="cellType">.float32</inputport>
                <inputport name="nullValue">.default</inputport>
                <inputport name="resultIsSparse">.no</inputport>
                <inputport name="resultFormat">.none</inputport>
                <outputport name="result" id="v222" />
                <functor name="NumberMap">
                    <property key="dff.functor.alias" value="numberMap4003" />
                    <inputport name="map" peerid="v107" />
                    <inputport name="mapNumber">1</inputport>
                </functor>
                <functor name="NumberMap">
                    <property key="dff.functor.alias" value="numberMap4005" />
                    <inputport name="map" peerid="v185" />
                    <inputport name="mapNumber">2</inputport>
                </functor>
            </containerfunctor>
        </containerfunctor>
        <containerfunctor name="Group">
            <property key="dff.functor.alias" value="group5103" />
            <containerfunctor name="CalculateValue">
                <property key="dff.functor.alias" value="calculateValue5116" />
                <inputport name="expression">[&#x0A;    v1 / 100&#x0A;]</inputport>
                <inputport name="defaultValue">.none</inputport>
                <outputport name="result" id="v223" />
                <functor name="NumberValue">
                    <property key="dff.functor.alias" value="numberValue5109" />
                    <inputport name="value" peerid="v270" />
                    <inputport name="valueNumber">1</inputport>
                </functor>
            </containerfunctor>
            <containerfunctor name="CalculateValue">
                <property key="dff.functor.alias" value="calculateValue5118" />
                <inputport name="expression">[&#x0A;    v1 / 100&#x0A;]</inputport>
                <inputport name="defaultValue">.none</inputport>
                <outputport name="result" id="v224" />
                <functor name="NumberValue">
                    <property key="dff.functor.alias" value="numberValue5111" />
                    <inputport name="value" peerid="v269" />
                    <inputport name="valueNumber">1</inputport>
                </functor>
            </containerfunctor>
        </containerfunctor>
        <containerfunctor name="Group">
            <property key="dff.functor.alias" value="group5129" />
            <functor name="LoadLookupTable">
                <property key="dff.functor.alias" value="loadLookupTable5131" />
                <inputport name="filename">&quot;Temp/Harvest_pixels_W.csv&quot;</inputport>
                <inputport name="suffixDigits">0</inputport>
                <inputport name="step">.none</inputport>
                <inputport name="workdir">.none</inputport>
                <outputport name="table" id="v225" />
            </functor>
            <functor name="LoadLookupTable">
                <property key="dff.functor.alias" value="loadLookupTable5135" />
                <inputport name="filename">&quot;Temp/Prune_factor_V.csv&quot;</inputport>
                <inputport name="suffixDigits">0</inputport>
                <inputport name="step">.none</inputport>
                <inputport name="workdir">.none</inputport>
                <outputport name="table" id="v226" />
            </functor>
            <functor name="LoadLookupTable">
                <property key="dff.functor.alias" value="loadLookupTable5133" />
                <inputport name="filename">&quot;Temp/Prune_factor_W.csv&quot;</inputport>
                <inputport name="suffixDigits">0</inputport>
                <inputport name="step">.none</inputport>
                <inputport name="workdir">.none</inputport>
                <outputport name="table" id="v227" />
            </functor>
            <functor name="LoadLookupTable">
                <property key="dff.functor.alias" value="loadLookupTable5137" />
                <inputport name="filename">&quot;Temp/Harvest_pixels_V.csv&quot;</inputport>
                <inputport name="suffixDigits">0</inputport>
                <inputport name="step">.none</inputport>
                <inputport name="workdir">.none</inputport>
                <outputport name="table" id="v228" />
            </functor>
        </containerfunctor>
        <containerfunctor name="Group">
            <property key="dff.functor.alias" value="group5154" />
            <functor name="LookupTableJunction">
                <property key="dff.functor.alias" value="lookupTableJunction5144" />
                <property key="viewer.table" value="yes" />
                <inputport name="possibleTable1" peerid="v231" />
                <inputport name="possibleTable2" peerid="v233" />
                <outputport name="table" id="v229" />
            </functor>
            <functor name="LookupTableJunction">
                <property key="dff.functor.alias" value="lookupTableJunction5165" />
                <property key="viewer.table" value="yes" />
                <inputport name="possibleTable1" peerid="v232" />
                <inputport name="possibleTable2" peerid="v233" />
                <outputport name="table" id="v230" />
            </functor>
            <containerfunctor name="IfThen">
                <property key="dff.functor.alias" value="ifThen5156" />
                <inputport name="condition" peerid="v247" />
                <functor name="LoadLookupTable">
                    <property key="dff.functor.alias" value="loadLookupTable5041" />
                    <property key="viewer.table" value="yes" />
                    <inputport name="filename">&quot;LULCC/TempTables/multi_loss.csv&quot;</inputport>
                    <inputport name="suffixDigits">0</inputport>
                    <inputport name="step">.none</inputport>
                    <inputport name="workdir">.none</inputport>
                    <outputport name="table" id="v231" />
                </functor>
                <functor name="LoadLookupTable">
                    <property key="dff.functor.alias" value="loadLookupTable5059" />
                    <property key="viewer.table" value="yes" />
                    <inputport name="filename">&quot;LULCC/TempTables/multi_gain.csv&quot;</inputport>
                    <inputport name="suffixDigits">0</inputport>
                    <inputport name="step">.none</inputport>
                    <inputport name="workdir">.none</inputport>
                    <outputport name="table" id="v232" />
                </functor>
            </containerfunctor>
            <containerfunctor name="IfNotThen">
                <property key="dff.functor.alias" value="ifNotThen5162" />
                <inputport name="condition" peerid="v247" />
                <functor name="LookupTable">
                    <property key="dff.functor.alias" value="lookupTable5149" />
                    <property key="dff.functor.comment" value="NO Transitions" />
                    <property key="viewer.object" value="yes" />
                    <inputport name="constant">[&#x0A;    &quot;Key&quot; &quot;Value&quot;,&#x0A;    0.001 0&#x0A;]</inputport>
                    <outputport name="object" id="v233" />
                </functor>
            </containerfunctor>
        </containerfunctor>
        <containerfunctor name="Group">
            <property key="dff.functor.alias" value="group5424" />
            <functor name="LoadTable">
                <property key="dff.functor.alias" value="loadTable5426" />
                <inputport name="filename">&quot;Temp/i_st_all.csv&quot;</inputport>
                <inputport name="suffixDigits">0</inputport>
                <inputport name="step">.none</inputport>
                <inputport name="workdir">.none</inputport>
                <outputport name="table" id="v234" />
            </functor>
            <functor name="LoadTable">
                <property key="dff.functor.alias" value="loadTable5430" />
                <property key="viewer.table" value="yes" />
                <inputport name="filename">&quot;Temp/rmax_all.csv&quot;</inputport>
                <inputport name="suffixDigits">0</inputport>
                <inputport name="step">.none</inputport>
                <inputport name="workdir">.none</inputport>
                <outputport name="table" id="v235" />
            </functor>
            <functor name="LoadTable">
                <property key="dff.functor.alias" value="loadTable5428" />
                <property key="viewer.table" value="yes" />
                <inputport name="filename">&quot;Temp/k_all.csv&quot;</inputport>
                <inputport name="suffixDigits">0</inputport>
                <inputport name="step">.none</inputport>
                <inputport name="workdir">.none</inputport>
                <outputport name="table" id="v236" />
            </functor>
            <functor name="LookupTable">
                <property key="dff.functor.alias" value="lookupTable1823" />
                <inputport name="constant" peerid="v282" />
                <outputport name="object" id="v237" />
            </functor>
        </containerfunctor>
    </containerfunctor>
    <containerfunctor name="Group">
        <property key="dff.container.collapsed" value="no" />
        <property key="dff.functor.alias" value="group2457" />
        <functor name="Bool">
            <property key="dff.functor.alias" value="bool2459" />
            <inputport name="constant" peerid="v283" />
            <outputport name="object" id="v238" />
        </functor>
        <functor name="Int">
            <property key="dff.functor.alias" value="Number of MC runs" />
            <property key="dff.functor.comment" value="Minimum is 2" />
            <property key="wizard.constant.input" value="Int_constant_2" />
            <inputport name="constant">2</inputport>
            <outputport name="object" id="v239" />
        </functor>
        <functor name="Int">
            <property key="dff.functor.alias" value="Simulation Length (SL)" />
            <property key="dff.functor.comment" value="Total Simulation Length in years" />
            <property key="wizard.constant.input" value="Int_constant_1" />
            <inputport name="constant">40</inputport>
            <outputport name="object" id="v240" />
        </functor>
        <functor name="Int">
            <property key="dff.functor.alias" value="StartUp year" />
            <property key="dff.functor.comment" value="Start Up year" />
            <inputport name="constant">2010</inputport>
            <outputport name="object" id="v241" />
        </functor>
        <functor name="Int">
            <property key="dff.functor.alias" value="Instant increase/decrease of fuelwood use at initial time, in %" />
            <property key="dff.functor.comment" value="Percetange of fuelwod use savings due to an intervention (e.g. cookstoves, fuel swithching) assuming an INSTANT AND TOTAL (100%) LONG TERM ADOPTION. For sensitivity purposes only." />
            <property key="wizard.constant.input" value="Int_constant_20" />
            <inputport name="constant">0</inputport>
            <outputport name="object" id="v242" />
        </functor>
        <functor name="Int">
            <property key="dff.functor.alias" value="Iteration Length (IL)" />
            <property key="dff.functor.comment" value="NRB works at a weekly basis and assuming 48 weeks in a year. This defines each iteration length (each growth&amp;harvest event length): e.g. 48 =1 year, 4 = 1 month, 1 = 1 week, or 12 = 3 months.&#x0A;&#x0A;OJO CON EL LULCC: ESTA SETADO EN 1 AÑO AHORA en multi.csv" />
            <inputport name="constant">48</inputport>
            <outputport name="object" id="v243" />
        </functor>
        <functor name="Bool">
            <property key="dff.functor.alias" value="K through MC?" />
            <property key="dff.functor.comment" value="If YES, K will pass through the MonteCarlo and vary relatively randomly; otherwise (any other value), the K will remain constant as defined by the user, across all MonteCarlo runs of the model." />
            <property key="wizard.constant.input" value="Bool_constant_3" />
            <inputport name="constant">.yes</inputport>
            <outputport name="object" id="v244" />
        </functor>
        <functor name="Bool">
            <property key="dff.functor.alias" value="rmax through MC?" />
            <property key="dff.functor.comment" value="If YES, K will pass through the MonteCarlo and vary relatively randomly; otherwise (any other value), the Initial Stock will remain constant as defined by the user, across all MonteCarlo runs of the model." />
            <property key="wizard.constant.input" value="Bool_constant_4" />
            <inputport name="constant">.yes</inputport>
            <outputport name="object" id="v245" />
        </functor>
        <functor name="Bool">
            <property key="dff.functor.alias" value="TOF through MC?" />
            <property key="dff.functor.comment" value="If YES, TOF will pass through the MonteCarlo and vary relatively randomly; otherwise (any other value), the Initial Stock will remain constant as defined by the user, across all MonteCarlo runs of the model." />
            <property key="wizard.constant.input" value="Bool_constant_5" />
            <inputport name="constant">.yes</inputport>
            <outputport name="object" id="v246" />
        </functor>
        <functor name="Bool">
            <property key="dff.functor.alias" value="Account for fuelwood available through deforestation?" />
            <property key="wizard.constant.input" value="Bool_constant_11" />
            <inputport name="constant">.no</inputport>
            <outputport name="object" id="v247" />
        </functor>
        <functor name="Int">
            <property key="dff.functor.alias" value="Percentage of ease to enter NPAs" />
            <inputport name="constant">10</inputport>
            <outputport name="object" id="v248" />
        </functor>
        <functor name="Int">
            <property key="dff.functor.alias" value="Number of MonteCarlo Histograms per figure for Forests and Woodlands" />
            <property key="dff.functor.comment" value="In multiples of five (i.e. five per row is preset)" />
            <inputport name="constant">50</inputport>
            <outputport name="object" id="v249" />
        </functor>
        <functor name="Int">
            <property key="dff.functor.alias" value="Number of MonteCarlo Histograms per figure for TOF" />
            <property key="dff.functor.comment" value="In multiples of five (i.e. five per row is preset)" />
            <inputport name="constant">50</inputport>
            <outputport name="object" id="v250" />
        </functor>
        <functor name="Bool">
            <property key="dff.functor.alias" value="Re-run MonteCarlo?" />
            <property key="dff.functor.comment" value='Turn off &quot;No&quot; if you want to use the same MonteCarlo datasets for all scenarios.' />
            <property key="wizard.constant.input" value="Bool_constant_6" />
            <inputport name="constant">.yes</inputport>
            <outputport name="object" id="v251" />
        </functor>
        <functor name="Bool">
            <property key="dff.functor.alias" value="Turn on maps and animations?" />
            <property key="wizard.constant.input" value="Bool_constant_14" />
            <inputport name="constant">.yes</inputport>
            <outputport name="object" id="v252" />
        </functor>
        <functor name="Bool">
            <property key="dff.functor.alias" value="Do you want to produce Summary Tables by administrative polygons?" />
            <property key="dff.functor.comment" value="For meaninful results, the analysis area must cover entire administrative areas. Will be bypass if maps and animations are turned off" />
            <property key="wizard.constant.input" value="Bool_constant_13" />
            <inputport name="constant">.yes</inputport>
            <outputport name="object" id="v253" />
        </functor>
        <functor name="Int">
            <property key="dff.functor.alias" value="Year in 1 or 2 digit format when observed loss maps will be replaced by simulated ones" />
            <property key="dff.functor.comment" value="A value of 10 means that simulated maps will start to be uploaded in 2011. Using 0 or any negative integer bypass this option. A value of 6 means that simulated maps will start to be uploaded in 2007. THIS VALUE MUST BE SET TO 0 WHEN NOT ACCOUNTING FOR FUELWOOD FROM DEFORESTATION." />
            <inputport name="constant">0</inputport>
            <outputport name="object" id="v254" />
        </functor>
        <functor name="Int">
            <property key="dff.functor.alias" value="Size of windows for fuelwood from deforestation in pixels" />
            <property key="dff.functor.comment" value="Size of window in pixels defining the area of influence (squared window) in which fuelwood from land clearing activities will be eventually distributed if a loss event exist and any driving or walking collectors enter." />
            <inputport name="constant">21</inputport>
            <outputport name="object" id="v255" />
        </functor>
        <functor name="String">
            <property key="dff.functor.alias" value="BaU vs ICS scenario" />
            <property key="dff.functor.comment" value='Are you running a &quot;BaU&quot; or &quot;ICS&quot; scenario?&#x0A;BaU: Business-as-Usual scenario&#x0A;ICS: Improved cookstoves or fuel reduction scenario' />
            <inputport name="constant">&quot;BaU&quot;</inputport>
            <outputport name="object" id="v256" />
        </functor>
        <functor name="LoadTable">
            <property key="dff.functor.alias" value="loadTable3998" />
            <inputport name="filename">&quot;LULCC/TempTables/Rpath.csv&quot;</inputport>
            <inputport name="suffixDigits">0</inputport>
            <inputport name="step">.none</inputport>
            <inputport name="workdir">.none</inputport>
            <outputport name="table" id="v257" />
        </functor>
        <functor name="GetTableValue">
            <property key="dff.functor.alias" value="getTableValue4000" />
            <inputport name="table" peerid="v257" />
            <inputport name="keys">[ 1 ]</inputport>
            <inputport name="column">&quot;Rpath&quot;</inputport>
            <inputport name="valueIfNotFound">.none</inputport>
            <outputport name="result" id="v258" />
        </functor>
        <functor name="LoadTable">
            <property key="dff.functor.alias" value="loadTable3999" />
            <inputport name="filename">&quot;LULCC/TempTables/OStype.csv&quot;</inputport>
            <inputport name="suffixDigits">0</inputport>
            <inputport name="step">.none</inputport>
            <inputport name="workdir">.none</inputport>
            <outputport name="table" id="v259" />
        </functor>
        <functor name="GetTableValue">
            <property key="dff.functor.alias" value="getTableValue4001" />
            <inputport name="table" peerid="v259" />
            <inputport name="keys">[ 1 ]</inputport>
            <inputport name="column">&quot;OS&quot;</inputport>
            <inputport name="valueIfNotFound">.none</inputport>
            <outputport name="result" id="v260" />
        </functor>
        <functor name="Int">
            <property key="dff.functor.alias" value="LUC map version" />
            <inputport name="constant">1</inputport>
            <outputport name="object" id="v261" />
        </functor>
        <functor name="Int">
            <property key="dff.functor.alias" value="AGB map version" />
            <inputport name="constant">1</inputport>
            <outputport name="object" id="v262" />
        </functor>
        <functor name="Int">
            <property key="dff.functor.alias" value="Cutoff years" />
            <property key="dff.functor.comment" value="Years to cut from starting year to avoid the idling period in the temporal trajectories map." />
            <inputport name="constant">10</inputport>
            <outputport name="object" id="v263" />
        </functor>
        <containerfunctor name="Group">
            <property key="dff.container.collapsed" value="no" />
            <property key="dff.functor.alias" value="Initial Stock parameters" />
            <functor name="Int">
                <property key="dff.functor.alias" value="Initial Stock as a % of K" />
                <property key="dff.functor.comment" value="Initial Stock as a percentage of K (or AGB at t0) (being K the maximum achievable biomass stock per forest or woodlan type). So, to assign an Initial Stock = K, then the integer must be 100. For an Initial Stock of half K then use 50, or for (K*0.2) use 20. This is use when selecting a biomass map with room to grow." />
                <property key="wizard.constant.input" value="Int_constant_10" />
                <inputport name="constant">100</inputport>
                <outputport name="object" id="v264" />
            </functor>
            <functor name="Bool">
                <property key="dff.functor.alias" value="Initial Stock through MC?" />
                <property key="dff.functor.comment" value="If YES the Initial Stock will pass through the MonteCarlo and vary relatively randomly; otherwise (any other value), the Initial Stock will remain constant as defined by the user, across all MonteCarlo runs of the model." />
                <inputport name="constant">.no</inputport>
                <outputport name="object" id="v265" />
            </functor>
            <functor name="Bool">
                <property key="dff.functor.alias" value="Tree cover map" />
                <property key="dff.functor.comment" value='Do you have a vegetation cover map in % to adjust the Initial Stock accordingly based on K (maximum achievable stock) assumptions per land cover class? If &quot;YES&quot;, arguments &quot;Initial Stock as a % of K&quot; and &quot;Intial Stcok through MC&quot; are ignored.' />
                <property key="wizard.constant.input" value="Bool_constant_9" />
                <inputport name="constant">.no</inputport>
                <outputport name="object" id="v266" />
            </functor>
            <functor name="Bool">
                <property key="dff.functor.alias" value="Are you using an AGB map with room to grow?" />
                <property key="dff.functor.comment" value='Do you have a raster map displaying the spatial distribution of aboveground biomass at start year with room for biomass to grow up to K? If &quot;YES&quot;, arguments &quot;Initial Stock as a % of K&quot;, &quot;Intial Stcok through MC&quot; and &quot;Tree cover map&quot; are ignored.' />
                <property key="wizard.constant.input" value="Bool_constant_7" />
                <inputport name="constant">.yes</inputport>
                <outputport name="object" id="v267" />
            </functor>
            <functor name="Bool">
                <property key="dff.functor.alias" value="Are you using an AGB map without room to grow?" />
                <property key="dff.functor.comment" value='Do you have a raster map displaying the spatial distribution of aboveground biomass at start year without room for biomass to grow up to K? i.e. biomass at to = K. If &quot;YES&quot;, arguments &quot;Initial Stock as a % of K&quot;, &quot;Intial Stcok through MC&quot; and &quot;Tree cover map&quot; are ignored.' />
                <property key="wizard.constant.input" value="Bool_constant_8" />
                <inputport name="constant">.yes</inputport>
                <outputport name="object" id="v268" />
            </functor>
        </containerfunctor>
        <containerfunctor name="Group">
            <property key="dff.functor.alias" value="group3981" />
            <functor name="Int">
                <property key="dff.functor.alias" value="Percentage of fuelwood eventually available from deforestation that will be COLLECTED by walking peasents." />
                <property key="dff.functor.comment" value="Percentage of fuelwood eventually available from deforestation that will be COLLECTED by walking peasents." />
                <inputport name="constant">40</inputport>
                <outputport name="object" id="v269" />
            </functor>
            <functor name="Int">
                <property key="dff.functor.alias" value="Percentage of fuelwood eventually available from deforestation that will be SELLED to driving resellers." />
                <property key="dff.functor.comment" value="Percentage of fuelwood eventually available from deforestation that will be SELLED to driving resellers." />
                <inputport name="constant">40</inputport>
                <outputport name="object" id="v270" />
            </functor>
        </containerfunctor>
        <containerfunctor name="Group">
            <property key="dff.functor.alias" value="group1786" />
            <functor name="ExtractMapAttributes">
                <property key="dff.functor.alias" value="extractMapAttributes1788" />
                <inputport name="map" peerid="v280" />
                <inputport name="extractDynamicAttributes">.yes</inputport>
                <inputport name="extractStatisticalAttributes">.yes</inputport>
                <outputport name="attributes" id="v271" />
            </functor>
            <functor name="Double">
                <property key="dff.functor.alias" value="Harvest Threshold in t/ha (Vehicle)" />
                <property key="dff.functor.comment" value="Harvest threshold VEHICLE - Harvest over these pixels does not ocurr accounting for elasticity in consumption driven by accute scarcity. Careful when assigning the threshold value" />
                <inputport name="constant">1</inputport>
                <outputport name="object" id="v272" />
            </functor>
            <functor name="Double">
                <property key="dff.functor.alias" value="Harvest Threshold in t/ha (Walking)" />
                <property key="dff.functor.comment" value="Harvest threshold WALKING - Harvest over these pixels does not ocurr accounting for elasticity in consumption driven by accute scarcity. Careful when assigning the threshold value. ONLY FOR FORESTS AND WOODLANDS" />
                <inputport name="constant">0.1</inputport>
                <outputport name="object" id="v273" />
            </functor>
            <containerfunctor name="CalculateValue">
                <property key="dff.functor.alias" value="calculateValue1790" />
                <property key="dff.functor.comment" value="Rescaling of minimun stock for harvestable pixels adjusted by map resolution. This is the V value." />
                <property key="viewer.result" value="yes" />
                <inputport name="expression">[&#x0A;    v1 * (t1[5] ^ 2) / (100 ^ 2)&#x0A;]</inputport>
                <inputport name="defaultValue">.none</inputport>
                <outputport name="result" id="v274" />
                <functor name="NumberTable">
                    <property key="dff.functor.alias" value="numberTable1795" />
                    <inputport name="table" peerid="v271" />
                    <inputport name="tableNumber">1</inputport>
                </functor>
                <functor name="NumberValue">
                    <property key="dff.functor.alias" value="numberValue1802" />
                    <inputport name="value" peerid="v272" />
                    <inputport name="valueNumber">1</inputport>
                </functor>
            </containerfunctor>
            <containerfunctor name="CalculateValue">
                <property key="dff.functor.alias" value="calculateValue1792" />
                <property key="dff.functor.comment" value="Rescaling of minimun stock for harvestable pixels adjusted by map resolution. This is the W value." />
                <property key="viewer.result" value="yes" />
                <inputport name="expression">[&#x0A;    v1 * (t1[5] ^ 2) / (100 ^ 2)&#x0A;]</inputport>
                <inputport name="defaultValue">.none</inputport>
                <outputport name="result" id="v275" />
                <functor name="NumberTable">
                    <property key="dff.functor.alias" value="numberTable1797" />
                    <inputport name="table" peerid="v271" />
                    <inputport name="tableNumber">1</inputport>
                </functor>
                <functor name="NumberValue">
                    <property key="dff.functor.alias" value="numberValue1805" />
                    <inputport name="value" peerid="v273" />
                    <inputport name="valueNumber">1</inputport>
                </functor>
            </containerfunctor>
        </containerfunctor>
    </containerfunctor>
    <containerfunctor name="Group">
        <property key="dff.container.collapsed" value="no" />
        <property key="dff.functor.alias" value="group2500" />
        <functor name="Bool">
            <property key="dff.functor.alias" value="bool2502" />
            <inputport name="constant" peerid="v238" />
            <outputport name="object" id="v276" />
        </functor>
        <functor name="RunExternalProcess">
            <property key="dff.functor.alias" value="runExternalProcess2510" />
            <inputport name="fileName" peerid="v258" />
            <inputport name="parameters" peerid="v277" />
            <inputport name="waitProcessCompletion">.yes</inputport>
            <inputport name="secondsToWait">0</inputport>
        </functor>
        <functor name="StringJunction">
            <property key="dff.functor.alias" value="stringJunction3935" />
            <inputport name="possibleString1" peerid="v279" />
            <inputport name="possibleString2" peerid="v278" />
            <outputport name="string" id="v277" />
        </functor>
        <containerfunctor name="IfThen">
            <property key="dff.functor.alias" value="ifThen3929" />
            <inputport name="condition" peerid="v251" />
            <containerfunctor name="CreateString">
                <property key="dff.container.collapsed" value="no" />
                <property key="dff.functor.alias" value="createString2505" />
                <property key="viewer.result" value="yes" />
                <inputport name="format">&quot;R CMD BATCH --no-save \&quot;--args MC=&lt;v1&gt; IT=&lt;v2&gt; K_MC=&lt;v4&gt; TOF_MC=&lt;v5&gt; Ini_st_MC=&lt;v6&gt; Ini_st.factor.percentage=&lt;v7&gt; COVER_MAP=&lt;v8&gt; rmax_MC=&lt;v9&gt; DEF_FW=&lt;v10&gt; IL=&lt;v11&gt; STdyn=&lt;v12&gt; Harv.Pix.W=&lt;v14&gt; Prune.W=&lt;v15&gt; Harv.Pix.V=&lt;v16&gt; Prune.V=&lt;v17&gt; Harv.Pix_MC=&lt;v18&gt; Prune_MC=&lt;v19&gt; Harvestable_W=&lt;v22&gt; Harvestable_V=&lt;v23&gt; Histograms.per.Fig_FOR=&lt;v24&gt; Histograms.per.Fig_TOF=&lt;v25&gt; AGBmap=&lt;v26&gt; OSType=&lt;v28&gt; BaUvsICS=&apos;&lt;s29&gt;&apos; LUCmap_v=&lt;v30&gt; AGBmap_v=&lt;v31&gt;\&quot; -- rnorm2.R &quot;</inputport>
                <outputport name="result" id="v278" />
                <functor name="NumberValue">
                    <property key="dff.functor.alias" value="numberValue2507" />
                    <inputport name="value" peerid="v239" />
                    <inputport name="valueNumber">1</inputport>
                </functor>
                <functor name="NumberValue">
                    <property key="dff.functor.alias" value="numberValue2488" />
                    <inputport name="value" peerid="v264" />
                    <inputport name="valueNumber">7</inputport>
                </functor>
                <functor name="NumberValue">
                    <property key="dff.functor.alias" value="numberValue4951" />
                    <inputport name="value" peerid="v265" />
                    <inputport name="valueNumber">6</inputport>
                </functor>
                <functor name="NumberValue">
                    <property key="dff.functor.alias" value="numberValue4961" />
                    <inputport name="value" peerid="v245" />
                    <inputport name="valueNumber">9</inputport>
                </functor>
                <functor name="NumberValue">
                    <property key="dff.functor.alias" value="numberValue4963" />
                    <inputport name="value" peerid="v244" />
                    <inputport name="valueNumber">4</inputport>
                </functor>
                <functor name="NumberValue">
                    <property key="dff.functor.alias" value="numberValue4967" />
                    <inputport name="value" peerid="v246" />
                    <inputport name="valueNumber">5</inputport>
                </functor>
                <functor name="NumberValue">
                    <property key="dff.functor.alias" value="numberValue5026" />
                    <inputport name="value" peerid="v266" />
                    <inputport name="valueNumber">8</inputport>
                </functor>
                <functor name="NumberValue">
                    <property key="dff.functor.alias" value="numberValue5170" />
                    <inputport name="value" peerid="v247" />
                    <inputport name="valueNumber">10</inputport>
                </functor>
                <functor name="NumberValue">
                    <property key="dff.functor.alias" value="numberValue5084" />
                    <inputport name="value" peerid="v240" />
                    <inputport name="valueNumber">12</inputport>
                </functor>
                <functor name="NumberValue">
                    <property key="dff.functor.alias" value="numberValue5087" />
                    <inputport name="value" peerid="v241" />
                    <inputport name="valueNumber">2</inputport>
                </functor>
                <functor name="NumberValue">
                    <property key="dff.functor.alias" value="numberValue5091" />
                    <inputport name="value" peerid="v243" />
                    <inputport name="valueNumber">11</inputport>
                </functor>
                <functor name="NumberValue">
                    <property key="dff.functor.alias" value="numberValue5103" />
                    <inputport name="value" peerid="v284" />
                    <inputport name="valueNumber">14</inputport>
                </functor>
                <functor name="NumberValue">
                    <property key="dff.functor.alias" value="numberValue5105" />
                    <inputport name="value" peerid="v287" />
                    <inputport name="valueNumber">15</inputport>
                </functor>
                <functor name="NumberValue">
                    <property key="dff.functor.alias" value="numberValue5107" />
                    <inputport name="value" peerid="v285" />
                    <inputport name="valueNumber">16</inputport>
                </functor>
                <functor name="NumberValue">
                    <property key="dff.functor.alias" value="numberValue5109" />
                    <inputport name="value" peerid="v286" />
                    <inputport name="valueNumber">17</inputport>
                </functor>
                <functor name="NumberValue">
                    <property key="dff.functor.alias" value="numberValue5123" />
                    <inputport name="value" peerid="v289" />
                    <inputport name="valueNumber">18</inputport>
                </functor>
                <functor name="NumberValue">
                    <property key="dff.functor.alias" value="numberValue5125" />
                    <inputport name="value" peerid="v288" />
                    <inputport name="valueNumber">19</inputport>
                </functor>
                <functor name="NumberValue">
                    <property key="dff.functor.alias" value="numberValue4933" />
                    <inputport name="value" peerid="v299" />
                    <inputport name="valueNumber">22</inputport>
                </functor>
                <functor name="NumberValue">
                    <property key="dff.functor.alias" value="numberValue4946" />
                    <inputport name="value" peerid="v300" />
                    <inputport name="valueNumber">23</inputport>
                </functor>
                <functor name="NumberValue">
                    <property key="dff.functor.alias" value="numberValue5987" />
                    <inputport name="value" peerid="v249" />
                    <inputport name="valueNumber">24</inputport>
                </functor>
                <functor name="NumberValue">
                    <property key="dff.functor.alias" value="numberValue5989" />
                    <inputport name="value" peerid="v250" />
                    <inputport name="valueNumber">25</inputport>
                </functor>
                <functor name="NumberValue">
                    <property key="dff.functor.alias" value="numberValue1762" />
                    <inputport name="value" peerid="v267" />
                    <inputport name="valueNumber">26</inputport>
                </functor>
                <functor name="NumberValue">
                    <property key="dff.functor.alias" value="numberValue5165" />
                    <inputport name="value" peerid="v260" />
                    <inputport name="valueNumber">28</inputport>
                </functor>
                <functor name="NumberString">
                    <property key="dff.functor.alias" value="numberString1791" />
                    <inputport name="value" peerid="v256" />
                    <inputport name="valueNumber">29</inputport>
                </functor>
                <functor name="NumberValue">
                    <property key="dff.functor.alias" value="numberValue1787" />
                    <inputport name="value" peerid="v261" />
                    <inputport name="valueNumber">30</inputport>
                </functor>
                <functor name="NumberValue">
                    <property key="dff.functor.alias" value="numberValue1789" />
                    <inputport name="value" peerid="v262" />
                    <inputport name="valueNumber">31</inputport>
                </functor>
            </containerfunctor>
        </containerfunctor>
        <containerfunctor name="IfNotThen">
            <property key="dff.functor.alias" value="ifNotThen3931" />
            <inputport name="condition" peerid="v251" />
            <containerfunctor name="CreateString">
                <property key="dff.functor.alias" value="createString3927" />
                <inputport name="format">&quot;R CMD BATCH --no-save \&quot;--args RerunMC=&lt;v31&gt; BaUvsICS=&apos;&lt;s29&gt;&apos;\&quot; -- bypassMC.R&quot;</inputport>
                <outputport name="result" id="v279" />
                <functor name="NumberValue">
                    <property key="dff.functor.alias" value="numberValue1797" />
                    <inputport name="value" peerid="v251" />
                    <inputport name="valueNumber">31</inputport>
                </functor>
                <functor name="NumberString">
                    <property key="dff.functor.alias" value="numberString1799" />
                    <inputport name="value" peerid="v256" />
                    <inputport name="valueNumber">29</inputport>
                </functor>
            </containerfunctor>
        </containerfunctor>
    </containerfunctor>
    <containerfunctor name="Group">
        <property key="dff.container.collapsed" value="no" />
        <property key="dff.functor.alias" value="group1610" />
        <functor name="LoadMap">
            <property key="dff.functor.alias" value="loadMap1089" />
            <property key="dff.functor.comment" value='Upload the fuelwood supply (categorical). should be a positive Integer. Each class (key value) represents a land cover class that is a fuelwood source for marketed fuelwood. Load a non-categorical map. Null values may be set to 0 if desired.&#x0A;VERY IMPORTANT: ALL FUELWOOD CATEGORIES INCLUDED (Thas why is the &quot;selfgathered&quot; supply)&#x0A;THE FUNCTOR IS LOAD MAP (NOT CATEGORICAL)' />
            <inputport name="filename">&quot;LULCC/TempRaster/LULCt1_c.tif&quot;</inputport>
            <inputport name="nullValue">.none</inputport>
            <inputport name="loadAsSparse">.no</inputport>
            <inputport name="suffixDigits">0</inputport>
            <inputport name="step">.none</inputport>
            <inputport name="workdir">.none</inputport>
            <outputport name="map" id="v280" />
        </functor>
        <functor name="LoadCategoricalMap">
            <property key="dff.functor.alias" value="loadCategoricalMap1078" />
            <inputport name="filename">&quot;LULCC/TempRaster/NPA_c.tif&quot;</inputport>
            <inputport name="nullValue">.none</inputport>
            <inputport name="loadAsSparse">.no</inputport>
            <inputport name="suffixDigits">0</inputport>
            <inputport name="step">.none</inputport>
            <inputport name="workdir">.none</inputport>
            <outputport name="map" id="v281" />
        </functor>
        <functor name="LoadLookupTable">
            <property key="dff.functor.alias" value="loadLookupTable3952" />
            <inputport name="filename">&quot;LULCC/TempTables/TOFvsFOR_Categories1.csv&quot;</inputport>
            <inputport name="suffixDigits">0</inputport>
            <inputport name="step">.none</inputport>
            <inputport name="workdir">.none</inputport>
            <outputport name="table" id="v282" />
        </functor>
        <functor name="Bool">
            <property key="dff.functor.alias" value="bool2033" />
            <inputport name="constant">.yes</inputport>
            <outputport name="object" id="v283" />
        </functor>
        <containerfunctor name="Group">
            <property key="dff.container.collapsed" value="no" />
            <property key="dff.functor.alias" value="group5099" />
            <functor name="Int">
                <property key="dff.functor.alias" value="Harvested pixels W" />
                <property key="viewer.object" value="yes" />
                <inputport name="constant" peerid="v295" />
                <outputport name="object" id="v284" />
            </functor>
            <functor name="Int">
                <property key="dff.functor.alias" value="Harvested pixels V" />
                <property key="viewer.object" value="yes" />
                <inputport name="constant" peerid="v296" />
                <outputport name="object" id="v285" />
            </functor>
            <functor name="Int">
                <property key="dff.functor.alias" value="Prune Factor V" />
                <property key="wizard.constant.input" value="Int_constant_17" />
                <inputport name="constant">1</inputport>
                <outputport name="object" id="v286" />
            </functor>
            <functor name="Int">
                <property key="dff.functor.alias" value="Prune Factor W" />
                <property key="wizard.constant.input" value="Int_constant_19" />
                <inputport name="constant">1</inputport>
                <outputport name="object" id="v287" />
            </functor>
            <functor name="Bool">
                <property key="dff.functor.alias" value="Prune Factor through MC?" />
                <inputport name="constant">.no</inputport>
                <outputport name="object" id="v288" />
            </functor>
            <functor name="Bool">
                <property key="dff.functor.alias" value="Harvest pixels through MC?" />
                <inputport name="constant">.no</inputport>
                <outputport name="object" id="v289" />
            </functor>
            <functor name="Int">
                <property key="dff.functor.alias" value="Percentage of W landscape to be harvested" />
                <property key="wizard.constant.input" value="Int_constant_18" />
                <inputport name="constant">100</inputport>
                <outputport name="object" id="v290" />
            </functor>
            <functor name="Int">
                <property key="dff.functor.alias" value="Percentage of V landscape to be harvested" />
                <property key="wizard.constant.input" value="Int_constant_16" />
                <inputport name="constant">100</inputport>
                <outputport name="object" id="v291" />
            </functor>
            <functor name="ExtractMapAttributes">
                <property key="dff.functor.alias" value="extractMapAttributes3926" />
                <inputport name="map" peerid="v298" />
                <inputport name="extractDynamicAttributes">.yes</inputport>
                <inputport name="extractStatisticalAttributes">.yes</inputport>
                <outputport name="attributes" id="v292" />
            </functor>
            <functor name="ExtractMapAttributes">
                <property key="dff.functor.alias" value="extractMapAttributes3928" />
                <property key="viewer.attributes" value="yes" />
                <property key="viewer.layerattributes" value="yes" />
                <inputport name="map" peerid="v280" />
                <inputport name="extractDynamicAttributes">.yes</inputport>
                <inputport name="extractStatisticalAttributes">.yes</inputport>
                <outputport name="attributes" id="v293" />
            </functor>
            <functor name="Bool">
                <property key="dff.functor.alias" value="Bypass Patchers" />
                <property key="dff.functor.comment" value="If yes, it will bypass the patcher assuming 100% harvest pixels and prune factor equal to 1 (deterministic setting). Useful for coarse resolutions." />
                <property key="wizard.constant.input" value="Bool_constant_15" />
                <inputport name="constant">.yes</inputport>
                <outputport name="object" id="v294" />
            </functor>
            <containerfunctor name="CalculateValue">
                <property key="dff.functor.alias" value="Total non-null cells W" />
                <property key="viewer.result" value="yes" />
                <inputport name="expression">[&#x0A;    if v1 &gt; 100 then&#x0A;        t1[9] * 100 / 100&#x0A;    else &#x0A;        t1[9] * v1 / 100&#x0A;]</inputport>
                <inputport name="defaultValue">.none</inputport>
                <outputport name="result" id="v295" />
                <functor name="NumberTable">
                    <property key="dff.functor.alias" value="numberTable1974" />
                    <inputport name="table" peerid="v293" />
                    <inputport name="tableNumber">1</inputport>
                </functor>
                <functor name="NumberValue">
                    <property key="dff.functor.alias" value="numberValue1985" />
                    <inputport name="value" peerid="v290" />
                    <inputport name="valueNumber">1</inputport>
                </functor>
            </containerfunctor>
            <containerfunctor name="CalculateValue">
                <property key="dff.functor.alias" value="calculateValue1991" />
                <property key="viewer.result" value="yes" />
                <inputport name="expression">[&#x0A;    if v1 &gt; 100 then&#x0A;        t1[9] * 100 / 100&#x0A;    else &#x0A;        t1[9] * v1 / 100&#x0A;]</inputport>
                <inputport name="defaultValue">.none</inputport>
                <outputport name="result" id="v296" />
                <functor name="NumberValue">
                    <property key="dff.functor.alias" value="numberValue1989" />
                    <inputport name="value" peerid="v291" />
                    <inputport name="valueNumber">1</inputport>
                </functor>
                <functor name="NumberTable">
                    <property key="dff.functor.alias" value="numberTable1996" />
                    <inputport name="table" peerid="v292" />
                    <inputport name="tableNumber">1</inputport>
                </functor>
            </containerfunctor>
            <containerfunctor name="CalculateMap">
                <property key="dff.container.collapsed" value="no" />
                <property key="dff.functor.alias" value="calculateMap3930" />
                <property key="viewer.result" value="yes" />
                <inputport name="expression">[&#x0A;    t1[i1]&#x0A;]</inputport>
                <inputport name="cellType">.int32</inputport>
                <inputport name="nullValue">.default</inputport>
                <inputport name="resultIsSparse">.no</inputport>
                <inputport name="resultFormat">.none</inputport>
                <outputport name="result" id="v297" />
                <functor name="NumberMap">
                    <property key="dff.functor.alias" value="numberMap3948" />
                    <inputport name="map" peerid="v280" />
                    <inputport name="mapNumber">1</inputport>
                </functor>
                <functor name="NumberTable">
                    <property key="dff.functor.alias" value="numberTable3950" />
                    <inputport name="table" peerid="v282" />
                    <inputport name="tableNumber">1</inputport>
                </functor>
            </containerfunctor>
            <containerfunctor name="CalculateMap">
                <property key="dff.functor.alias" value="calculateMap3932" />
                <property key="viewer.result" value="yes" />
                <inputport name="expression">[&#x0A;    if i2 = 1 then&#x0A;        null&#x0A;    else &#x0A;        i1&#x0A;]</inputport>
                <inputport name="cellType">.int32</inputport>
                <inputport name="nullValue">.default</inputport>
                <inputport name="resultIsSparse">.no</inputport>
                <inputport name="resultFormat">.none</inputport>
                <outputport name="result" id="v298" />
                <functor name="NumberMap">
                    <property key="dff.functor.alias" value="numberMap3938" />
                    <inputport name="map" peerid="v297" />
                    <inputport name="mapNumber">2</inputport>
                </functor>
                <functor name="NumberMap">
                    <property key="dff.functor.alias" value="numberMap3946" />
                    <inputport name="map" peerid="v280" />
                    <inputport name="mapNumber">1</inputport>
                </functor>
            </containerfunctor>
        </containerfunctor>
        <containerfunctor name="CalculateValue">
            <property key="dff.functor.alias" value="calculateValue4938" />
            <inputport name="expression">[&#x0A;    t1[9]&#x0A;]</inputport>
            <inputport name="defaultValue">.none</inputport>
            <outputport name="result" id="v299" />
            <functor name="NumberTable">
                <property key="dff.functor.alias" value="numberTable4942" />
                <inputport name="table" peerid="v293" />
                <inputport name="tableNumber">1</inputport>
            </functor>
        </containerfunctor>
        <containerfunctor name="CalculateValue">
            <property key="dff.functor.alias" value="calculateValue4940" />
            <inputport name="expression">[&#x0A;    t1[9]&#x0A;]</inputport>
            <inputport name="defaultValue">.none</inputport>
            <outputport name="result" id="v300" />
            <functor name="NumberTable">
                <property key="dff.functor.alias" value="numberTable4944" />
                <inputport name="table" peerid="v292" />
                <inputport name="tableNumber">1</inputport>
            </functor>
        </containerfunctor>
    </containerfunctor>
    <containerfunctor name="Group">
        <property key="dff.container.collapsed" value="no" />
        <property key="dff.functor.alias" value="group5033" />
        <functor name="LoadMap">
            <property key="dff.functor.alias" value="loadMap5045" />
            <property key="viewer.map" value="yes" />
            <inputport name="filename">&quot;LULCC/TempRaster/roads_c_d.tif&quot;</inputport>
            <inputport name="nullValue">.none</inputport>
            <inputport name="loadAsSparse">.no</inputport>
            <inputport name="suffixDigits">0</inputport>
            <inputport name="step">.none</inputport>
            <inputport name="workdir">.none</inputport>
            <outputport name="map" id="v301" />
        </functor>
        <functor name="LoadMap">
            <property key="dff.functor.alias" value="loadMap5047" />
            <inputport name="filename">&quot;LULCC/TempRaster/rivers_c_d.tif&quot;</inputport>
            <inputport name="nullValue">.none</inputport>
            <inputport name="loadAsSparse">.no</inputport>
            <inputport name="suffixDigits">0</inputport>
            <inputport name="step">.none</inputport>
            <inputport name="workdir">.none</inputport>
            <outputport name="map" id="v302" />
        </functor>
        <functor name="LoadMap">
            <property key="dff.functor.alias" value="loadMap5049" />
            <inputport name="filename">&quot;LULCC/TempRaster/DEM_c.tif&quot;</inputport>
            <inputport name="nullValue">.default</inputport>
            <inputport name="loadAsSparse">.no</inputport>
            <inputport name="suffixDigits">0</inputport>
            <inputport name="step">.none</inputport>
            <inputport name="workdir">.none</inputport>
            <outputport name="map" id="v303" />
        </functor>
        <functor name="LoadWeights">
            <property key="dff.functor.alias" value="loadWeights5051" />
            <inputport name="filename">&quot;LULCC/TempTables/weights_loss.dcf&quot;</inputport>
            <inputport name="suffixDigits">0</inputport>
            <inputport name="step">.none</inputport>
            <inputport name="workdir">.none</inputport>
            <outputport name="weights" id="v304" />
        </functor>
        <functor name="CalcSlopeMap">
            <property key="dff.functor.alias" value="calcSlopeMap5053" />
            <inputport name="elevation" peerid="v303" />
            <inputport name="diagonalsAreLonger">.yes</inputport>
            <inputport name="slopeInPercent">.no</inputport>
            <inputport name="cellType">.int32</inputport>
            <inputport name="nullValue">.default</inputport>
            <inputport name="slopeIsSparse">.no</inputport>
            <outputport name="slope" id="v305" />
        </functor>
        <functor name="LoadWeights">
            <property key="dff.functor.alias" value="loadWeights5057" />
            <inputport name="filename">&quot;LULCC/TempTables/weights_gain.dcf&quot;</inputport>
            <inputport name="suffixDigits">0</inputport>
            <inputport name="step">.none</inputport>
            <inputport name="workdir">.none</inputport>
            <outputport name="weights" id="v306" />
        </functor>
        <functor name="LoadMap">
            <property key="dff.functor.alias" value="loadMap4995" />
            <inputport name="filename">&quot;LULCC/TempRaster/tc2000_c.tif&quot;</inputport>
            <inputport name="nullValue">.none</inputport>
            <inputport name="loadAsSparse">.no</inputport>
            <inputport name="suffixDigits">0</inputport>
            <inputport name="step">.none</inputport>
            <inputport name="workdir">.none</inputport>
            <outputport name="map" id="v307" />
        </functor>
        <functor name="LoadCategoricalMap">
            <property key="dff.functor.alias" value="loadCategoricalMap3997" />
            <inputport name="filename">&quot;LULCC/TempRaster/Gain_00.tif&quot;</inputport>
            <inputport name="nullValue">.none</inputport>
            <inputport name="loadAsSparse">.no</inputport>
            <inputport name="suffixDigits">0</inputport>
            <inputport name="step">.none</inputport>
            <inputport name="workdir">.none</inputport>
            <outputport name="map" id="v308" />
        </functor>
        <functor name="LoadCategoricalMap">
            <property key="dff.functor.alias" value="loadCategoricalMap3975" />
            <inputport name="filename">&quot;LULCC/TempRaster/Loss_00.tif&quot;</inputport>
            <inputport name="nullValue">.none</inputport>
            <inputport name="loadAsSparse">.no</inputport>
            <inputport name="suffixDigits">0</inputport>
            <inputport name="step">.none</inputport>
            <inputport name="workdir">.none</inputport>
            <outputport name="map" id="v309" />
        </functor>
        <functor name="LoadCategoricalMap">
            <property key="dff.functor.alias" value="loadCategoricalMap3982" />
            <inputport name="filename">&quot;LULCC/TempRaster/npa_c.tif&quot;</inputport>
            <inputport name="nullValue">.default</inputport>
            <inputport name="loadAsSparse">.no</inputport>
            <inputport name="suffixDigits">0</inputport>
            <inputport name="step">.none</inputport>
            <inputport name="workdir">.none</inputport>
            <outputport name="map" id="v310" />
        </functor>
    </containerfunctor>
    <containerfunctor name="Group">
        <property key="dff.container.collapsed" value="no" />
        <property key="dff.functor.alias" value="group3468" />
        <functor name="Bool">
            <property key="dff.functor.alias" value="bool3466" />
            <inputport name="constant" peerid="v2" />
            <outputport name="object" id="v311" />
        </functor>
        <functor name="String">
            <property key="dff.functor.alias" value="string3471" />
            <property key="viewer.object" value="yes" />
            <inputport name="constant" peerid="v1" />
            <outputport name="object" id="v312" />
        </functor>
        <functor name="RunExternalProcess">
            <property key="dff.functor.alias" value="runExternalProcess3537" />
            <inputport name="fileName" peerid="v312" />
            <inputport name="parameters" peerid="v313" />
            <inputport name="waitProcessCompletion">.yes</inputport>
            <inputport name="secondsToWait">0</inputport>
        </functor>
        <functor name="StringJunction">
            <property key="dff.functor.alias" value="stringJunction3950" />
            <inputport name="possibleString1" peerid="v321" />
            <inputport name="possibleString2" peerid="v323" />
            <outputport name="string" id="v313" />
        </functor>
        <containerfunctor name="IfThen">
            <property key="dff.functor.alias" value="ifThen3944" />
            <inputport name="condition" peerid="v252" />
            <functor name="GetTableValue">
                <property key="dff.functor.alias" value="getTableValue3914" />
                <inputport name="table" peerid="v315" />
                <inputport name="keys">[ 1 ]</inputport>
                <inputport name="column">&quot;x&quot;</inputport>
                <inputport name="valueIfNotFound">.none</inputport>
                <outputport name="result" id="v314" />
            </functor>
            <functor name="LoadLookupTable">
                <property key="dff.functor.alias" value="loadLookupTable3908" />
                <inputport name="filename">&quot;Temp/MaxAGB_firstMC.csv&quot;</inputport>
                <inputport name="suffixDigits">0</inputport>
                <inputport name="step">.none</inputport>
                <inputport name="workdir">.none</inputport>
                <outputport name="table" id="v315" />
            </functor>
            <functor name="GetTableValue">
                <property key="dff.functor.alias" value="getTableValue2053" />
                <inputport name="table" peerid="v317" />
                <inputport name="keys">[ 1 ]</inputport>
                <inputport name="column">&quot;x&quot;</inputport>
                <inputport name="valueIfNotFound">.none</inputport>
                <outputport name="result" id="v316" />
            </functor>
            <functor name="LoadLookupTable">
                <property key="dff.functor.alias" value="loadLookupTable2051" />
                <inputport name="filename">&quot;Temp/MaxAGB_lastMC.csv&quot;</inputport>
                <inputport name="suffixDigits">0</inputport>
                <inputport name="step">.none</inputport>
                <inputport name="workdir">.none</inputport>
                <outputport name="table" id="v317" />
            </functor>
            <functor name="GetTableValue">
                <property key="dff.functor.alias" value="getTableValue1953" />
                <property key="viewer.result" value="yes" />
                <inputport name="table" peerid="v319" />
                <inputport name="keys">[ 1 ]</inputport>
                <inputport name="column">&quot;x&quot;</inputport>
                <inputport name="valueIfNotFound">.none</inputport>
                <outputport name="result" id="v318" />
            </functor>
            <functor name="LoadLookupTable">
                <property key="dff.functor.alias" value="loadLookupTable2823" />
                <inputport name="filename">&quot;Temp/MaxAGB.csv&quot;</inputport>
                <inputport name="suffixDigits">0</inputport>
                <inputport name="step">.none</inputport>
                <inputport name="workdir">.none</inputport>
                <outputport name="table" id="v319" />
            </functor>
            <functor name="ExtractMapAttributes">
                <property key="dff.functor.alias" value="extractMapAttributes1795" />
                <inputport name="map" peerid="v303" />
                <inputport name="extractDynamicAttributes">.no</inputport>
                <inputport name="extractStatisticalAttributes">.no</inputport>
                <outputport name="attributes" id="v320" />
            </functor>
            <containerfunctor name="CreateString">
                <property key="dff.container.collapsed" value="no" />
                <property key="dff.functor.alias" value="createString3474" />
                <inputport name="format">&quot;R CMD BATCH --no-save \&quot;--args MC=&lt;v1&gt; IT=&lt;v2&gt; K_MC=&lt;v4&gt; TOF_MC=&lt;v5&gt; Ini_st_MC=&lt;v6&gt; Ini_st.factor.percentage=&lt;v7&gt; COVER_MAP=&lt;v8&gt; rmax_MC=&lt;v9&gt; DEF_FW=&lt;v10&gt; IL=&lt;v11&gt; STdyn=&lt;v12&gt; Harv.Pix.W=&lt;v14&gt; Prune.W=&lt;v15&gt; Harv.Pix.V=&lt;v16&gt; Prune.V=&lt;v17&gt; Harv.Pix_MC=&lt;v18&gt; Prune_MC=&lt;v19&gt; MaxAGB=&lt;v22&gt; MaxAGB_lastMC=&lt;v23&gt; MaxAGB_firstMC=&lt;v24&gt; AGBmap=&lt;v26&gt; SumTables=&lt;v27&gt; OSType=&lt;v28&gt; BaUvsICS=&apos;&lt;s29&gt;&apos; resolution=&lt;v30&gt; RerunMC=&lt;v31&gt; cutoff_yrs=&lt;v32&gt;\&quot; -- maps_animations6.R&quot;</inputport>
                <outputport name="result" id="v321" />
                <functor name="NumberValue">
                    <property key="dff.functor.alias" value="numberValue3493" />
                    <inputport name="value" peerid="v318" />
                    <inputport name="valueNumber">22</inputport>
                </functor>
                <functor name="NumberValue">
                    <property key="dff.functor.alias" value="numberValue3495" />
                    <inputport name="value" peerid="v239" />
                    <inputport name="valueNumber">1</inputport>
                </functor>
                <functor name="NumberValue">
                    <property key="dff.functor.alias" value="numberValue3499" />
                    <inputport name="value" peerid="v241" />
                    <inputport name="valueNumber">2</inputport>
                </functor>
                <functor name="NumberValue">
                    <property key="dff.functor.alias" value="numberValue3505" />
                    <inputport name="value" peerid="v288" />
                    <inputport name="valueNumber">19</inputport>
                </functor>
                <functor name="NumberValue">
                    <property key="dff.functor.alias" value="numberValue3507" />
                    <inputport name="value" peerid="v244" />
                    <inputport name="valueNumber">4</inputport>
                </functor>
                <functor name="NumberValue">
                    <property key="dff.functor.alias" value="numberValue3509" />
                    <inputport name="value" peerid="v289" />
                    <inputport name="valueNumber">18</inputport>
                </functor>
                <functor name="NumberValue">
                    <property key="dff.functor.alias" value="numberValue3511" />
                    <inputport name="value" peerid="v246" />
                    <inputport name="valueNumber">5</inputport>
                </functor>
                <functor name="NumberValue">
                    <property key="dff.functor.alias" value="numberValue3513" />
                    <inputport name="value" peerid="v286" />
                    <inputport name="valueNumber">17</inputport>
                </functor>
                <functor name="NumberValue">
                    <property key="dff.functor.alias" value="numberValue3515" />
                    <inputport name="value" peerid="v265" />
                    <inputport name="valueNumber">6</inputport>
                </functor>
                <functor name="NumberValue">
                    <property key="dff.functor.alias" value="numberValue3517" />
                    <inputport name="value" peerid="v285" />
                    <inputport name="valueNumber">16</inputport>
                </functor>
                <functor name="NumberValue">
                    <property key="dff.functor.alias" value="numberValue3519" />
                    <inputport name="value" peerid="v264" />
                    <inputport name="valueNumber">7</inputport>
                </functor>
                <functor name="NumberValue">
                    <property key="dff.functor.alias" value="numberValue3521" />
                    <inputport name="value" peerid="v287" />
                    <inputport name="valueNumber">15</inputport>
                </functor>
                <functor name="NumberValue">
                    <property key="dff.functor.alias" value="numberValue3523" />
                    <inputport name="value" peerid="v266" />
                    <inputport name="valueNumber">8</inputport>
                </functor>
                <functor name="NumberValue">
                    <property key="dff.functor.alias" value="numberValue3525" />
                    <inputport name="value" peerid="v284" />
                    <inputport name="valueNumber">14</inputport>
                </functor>
                <functor name="NumberValue">
                    <property key="dff.functor.alias" value="numberValue3527" />
                    <inputport name="value" peerid="v245" />
                    <inputport name="valueNumber">9</inputport>
                </functor>
                <functor name="NumberValue">
                    <property key="dff.functor.alias" value="numberValue3531" />
                    <inputport name="value" peerid="v247" />
                    <inputport name="valueNumber">10</inputport>
                </functor>
                <functor name="NumberValue">
                    <property key="dff.functor.alias" value="numberValue3533" />
                    <inputport name="value" peerid="v240" />
                    <inputport name="valueNumber">12</inputport>
                </functor>
                <functor name="NumberValue">
                    <property key="dff.functor.alias" value="numberValue3535" />
                    <inputport name="value" peerid="v243" />
                    <inputport name="valueNumber">11</inputport>
                </functor>
                <functor name="NumberValue">
                    <property key="dff.functor.alias" value="numberValue2056" />
                    <inputport name="value" peerid="v316" />
                    <inputport name="valueNumber">23</inputport>
                </functor>
                <functor name="NumberValue">
                    <property key="dff.functor.alias" value="numberValue3910" />
                    <inputport name="value" peerid="v314" />
                    <inputport name="valueNumber">24</inputport>
                </functor>
                <functor name="NumberValue">
                    <property key="dff.functor.alias" value="numberValue3961" />
                    <inputport name="value" peerid="v267" />
                    <inputport name="valueNumber">26</inputport>
                </functor>
                <functor name="NumberValue">
                    <property key="dff.functor.alias" value="numberValue3965" />
                    <inputport name="value" peerid="v253" />
                    <inputport name="valueNumber">27</inputport>
                </functor>
                <functor name="NumberValue">
                    <property key="dff.functor.alias" value="numberValue5169" />
                    <inputport name="value" peerid="v260" />
                    <inputport name="valueNumber">28</inputport>
                </functor>
                <functor name="NumberString">
                    <property key="dff.functor.alias" value="numberString1791" />
                    <inputport name="value" peerid="v256" />
                    <inputport name="valueNumber">29</inputport>
                </functor>
                <functor name="NumberValue">
                    <property key="dff.functor.alias" value="numberValue1791" />
                    <inputport name="value" peerid="v322" />
                    <inputport name="valueNumber">30</inputport>
                </functor>
                <functor name="NumberValue">
                    <property key="dff.functor.alias" value="numberValue1795" />
                    <inputport name="value" peerid="v251" />
                    <inputport name="valueNumber">31</inputport>
                </functor>
                <functor name="NumberValue">
                    <property key="dff.functor.alias" value="numberValue1810" />
                    <inputport name="value" peerid="v263" />
                    <inputport name="valueNumber">32</inputport>
                </functor>
            </containerfunctor>
            <containerfunctor name="CalculateValue">
                <property key="dff.functor.alias" value="calculateValue1797" />
                <inputport name="expression">[&#x0A;    t1[5]&#x0A;]</inputport>
                <inputport name="defaultValue">.none</inputport>
                <outputport name="result" id="v322" />
                <functor name="NumberTable">
                    <property key="dff.functor.alias" value="numberTable1801" />
                    <inputport name="table" peerid="v320" />
                    <inputport name="tableNumber">1</inputport>
                </functor>
            </containerfunctor>
        </containerfunctor>
        <containerfunctor name="IfNotThen">
            <property key="dff.functor.alias" value="ifNotThen3946" />
            <inputport name="condition" peerid="v252" />
            <containerfunctor name="CreateString">
                <property key="dff.functor.alias" value="createString3948" />
                <inputport name="format">&quot;R CMD BATCH --no-save -- bypass_maps_animations.R&quot;</inputport>
                <outputport name="result" id="v323" />
            </containerfunctor>
        </containerfunctor>
    </containerfunctor>
    <containerfunctor name="Group">
        <property key="dff.functor.alias" value="group1799" />
        <functor name="RunExternalProcess">
            <property key="dff.functor.alias" value="runExternalProcess1801" />
            <inputport name="fileName" peerid="v312" />
            <inputport name="parameters" peerid="v324" />
            <inputport name="waitProcessCompletion">.yes</inputport>
            <inputport name="secondsToWait">0</inputport>
        </functor>
        <functor name="Bool">
            <property key="dff.functor.alias" value="bool1804" />
            <inputport name="constant" peerid="v311" />
        </functor>
        <containerfunctor name="CreateString">
            <property key="dff.functor.alias" value="createString1802" />
            <inputport name="format">&quot;R CMD BATCH --no-save \&quot;--args BaUvsICS=&apos;&lt;s29&gt;&apos;\&quot; -- finalogs.R&quot;</inputport>
            <outputport name="result" id="v324" />
            <functor name="NumberString">
                <property key="dff.functor.alias" value="numberString1804" />
                <inputport name="value" peerid="v256" />
                <inputport name="valueNumber">29</inputport>
            </functor>
        </containerfunctor>
    </containerfunctor>
</script>
